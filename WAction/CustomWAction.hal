external procedure ExtractObj(string,var Integer,var string);


global 
procedure ItemSaldoRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	record UserVc User;
	integer i;
	string 20 loc;
	
	getwindowrecord(wn,RepSpec);
	User.Code = currentuser;
	if(readfirstmain(User,1,true))then begin
		if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
			i = 0;
			ExtractObj(User.UserLocations,i,loc);
			RepSpec.f1 = loc;
			putwindowrecord(wn,RepSpec);
		end;
	end;
return;
end;


global
procedure PecuniaryRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;


global
procedure PecuniaryTestRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global
procedure SaleReportRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SaleReportRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global
procedure SalesReportExtRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SalesReportExtRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

procedure INConsDClasspateCode(integer wn, integer changed)
begin
	record INConsVc INCr;
	record INVc INr;
	
	if(changed>0)then begin
		getwindowrecord(wn,INCr);
		INr.Code = INCr.Code;
		if(readfirstmain(INr,1,true))then begin
			INCr.Name = INr.Name;
			putwindowrecord(wn,INCr);
		end;
	end;
	
return
end;

global
function Boolean INConsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  switch (fieldname) begin
  	case "Code": INConsDClasspateCode(wn,changed);
  end;
  
return;
end;

global 
procedure ExportRegIVDsm()
begin
	record IVVc IVr;
	integer wn;
	area arec;
	
	setareazerosize(arec);
	wn = curwindow;
	if(fileexists("IVBack/IV.txt"))then begin
	end else begin
		createfile("IVBack/IV.txt");
		closefile;
	end;
	getwindowrecord(wn,IVr);
	addrecordtoarea(IVr,"IVVc",arec);
	writeareatofile(arec,"IVBack/IV.txt",1);
	NewLine;
	
	
return;
end;

global 
procedure OrderStatusInfoMn()
begin
	integer wn,nwn;
	record RcVc RepSpec;

	nwn = OpenWindow("OrderStatusInfoAClass",0,0,"","",RepSpec);

  return;
end;