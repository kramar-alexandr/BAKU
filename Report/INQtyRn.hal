external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FindFiscalYear(Date,var Date,var Date);
external function val GetStockQty(string,string,Date,Boolean);
external procedure HTArts(string, string, var string);
external procedure HTLocations(string, string, var string);
external function Boolean CheckDeliveryLocation(string,string,LongInt,val,var val);
//external procedure PrintHeaderIQ(); // Edit ***** 18 June 2013 14:20:00 Larisa
external function Boolean SetInSet2(string,string);
external procedure ExtractObj(string,var Integer,var string); // Edit ***** 18 June 2013 14:30:00 Larisa

//SetLangMode(LangRussian,"RUS",0);		Edit Dima-----------09.12.2014

procedure PrintISInfo(record INVc INr,string lastitem,val Instock,val OrddOut,val POQty,val thisfiscalyearq,val thismonthq,val lastyear,string specloc)
BEGIN
  string 255 tstr;
  val t;
  string 255 classcode,brend,model; // Edit ***** 18 June 2013 14:27:00 Larisa
  integer pos; // Edit ***** 18 June 2013 14:27:00 Larisa
  record DIVc DIr; // Edit ***** 18 June 2013 14:27:00 Larisa
  
 if (nonblank(lastitem)) then begin
   tstr = INr.Name;
   if (len(INr.Name)>30) then begin 
     tstr = Left(INr.Name,30); 
   end;
   if (blank(specloc)) then begin
//     t = lastyear + thismonthq;
     t = lastyear;
   end else begin
     t = lastyear;
   end;
   
   pos = 0; // Edit ***** 18 June 2013 14:25:00 Larisa
   classcode = INr.DispGroups;
   brend = "";
   model = "";
   ExtractObj(classcode,pos,brend);
   ExtractObj(classcode,pos,model);
   DIr.Code = brend;
   if(ReadFirstMain(DIr,1,true))then begin
     brend = DIr.Name;
   end;
   DIr.Code = model;
   if(ReadFirstMain(DIr,1,true))then begin
     model = DIr.Name;
   end; // Edit ***** 18 June 2013 14:25:00 Larisa
   
   StartFormat(15);
//    OutString(0,0,INr.Code,false);
	OutString(0,"DblINVc",INr.Code,false); // Edit ***** 18 June 2013 14:13:00 Larisa
    OutString(40,0,tstr,false);
    OutString(140,0,brend,false); // Edit ***** 18 June 2013 14:23:00 Larisa
    OutString(200,0,model,false); // Edit ***** 18 June 2013 14:23:00 Larisa
    OutVal(250,0,INr.MinLevel,M4Qty,true);
    OutVal(280,0,Instock,M4Qty,true);
    OutVal(310,0,OrddOut,M4Qty,true);
    OutVal(340,0,POQty,M4Qty,true);
    OutVal(370,0,thismonthq,M4Qty,true);
    OutVal(400,0,thisfiscalyearq,M4Qty,true);
    OutVal(430,0,t,M4Qty,true);
  
    EndFormat;   
  end;
  RETURN;
END;

procedure FindFromToQtyStructure(string artcode,string location,Date lfsd,Date lfed,Date fsd,Date monthbegin,Date curdate,
                                 var val thismonthq,var val thisfiscalyearq,var val lastyearq)
BEGIN
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs,testf;
  Integer i,rwcnt;

  thismonthq = 0;
  thisfiscalyearq = 0;
  lastyearq = 0;
  TrHs = true;
  IVr.TransDate = fsd;
  while (LoopKey("TransDate",IVr,1,TrHs)) begin
    if (IVr.TransDate>curdate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (IVr.Location!=location) then begin testf = false; end;
//      if (IVr.UpdStockFlag==0) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.ArtCode==artcode) then begin
            if (DateInRange(IVr.TransDate,monthbegin,curdate)) then begin
              switch (IVr.InvType) begin
                case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
                case kInvoiceTypeCredit:
                  LkInvoiceTypeCredit:;
                  switch (IVrw.stp) begin
                    case 11:
                      thismonthq = thismonthq + IVrw.Quant;
                    case kInvoiceRowTypeNormal:
                      thismonthq = thismonthq - IVrw.Quant;
                    case kInvoiceRowTypeStructuredItemComponent:
                      thismonthq = thismonthq - IVrw.Quant;
                  end;
                otherwise
                  thismonthq = thismonthq + IVrw.Quant;
              end;
            end;
            if (DateInRange(IVr.TransDate,fsd,curdate)) then begin
              switch (IVr.InvType) begin
                case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
                case kInvoiceTypeCredit:
                  LkInvoiceTypeCredit:;
                  switch (IVrw.stp) begin
                    case 11:
                      thisfiscalyearq = thisfiscalyearq + IVrw.Quant;
                    case kInvoiceRowTypeNormal:
                      thisfiscalyearq = thisfiscalyearq - IVrw.Quant;
                    case kInvoiceRowTypeStructuredItemComponent:
                      thisfiscalyearq = thisfiscalyearq - IVrw.Quant;
                  end;
                otherwise
                  thisfiscalyearq = thisfiscalyearq + IVrw.Quant;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  ResetLoop(IVr);
  TrHs = true;
  IVr.TransDate = lfsd;
  while (LoopKey("TransDate",IVr,1,TrHs)) begin
    if (IVr.TransDate>lfed) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (IVr.Location!=location) then begin testf = false; end;
//      if (IVr.UpdStockFlag==0) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.ArtCode==artcode) then begin
            if (DateInRange(IVr.TransDate,lfsd,lfed)) then begin
              switch (IVr.InvType) begin
                case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
                case kInvoiceTypeCredit:
                  LkInvoiceTypeCredit:;
                  switch (IVrw.stp) begin
                    case 11:
                      lastyearq = lastyearq + IVrw.Quant;
                    case kInvoiceRowTypeNormal:
                      lastyearq = lastyearq - IVrw.Quant;
                    case kInvoiceRowTypeStructuredItemComponent:
                      lastyearq = lastyearq - IVrw.Quant;
                  end;
                otherwise
                  lastyearq = lastyearq + IVrw.Quant;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure FindFromToQty(string artcode,string location,Date fromdate,Date todate,var val thismonthq)
BEGIN
  record ItemHistVc IHr;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs,testf,ivf,test2f;
  Integer i,rwcnt;
  val qtydel;
  
  TrHs = true;
  IHr.FileName = "IVVc";
  IHr.ArtCode = artcode;
  IHr.TransDate = fromdate;
  while (LoopKey("FNArtCode",IHr,3,TrHs)) begin
    if (IHr.FileName!="IVVc") then begin TrHs = false; end;
    if (IHr.ArtCode!=artcode) then begin TrHs = false; end;
    if (IHr.TransDate>todate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (IHr.Invalid!=0) then begin testf = false; end;
      ivf = false;
      IVr.SerNr = IHr.TransNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        ivf = true;
//        if (IVr.UpdStockFlag==0) then begin testf = false; end;
        if (IVr.OKFlag==0) then begin testf = false; end;
      end;
      if (nonblank(location)) then begin 
        if (IVr.OrderNr<>-1) then begin
        end else begin
          if (IHr.Location<>location) then begin
            testf = false;
          end;
        end;  
      end;
      if (IHr.Invalid!=0) then begin testf = false; end;
      if (TrHs and testf) then begin
        if (ivf) then begin
          rwcnt = MatRowCnt(IVr);
          if (IHr.Row<=rwcnt) then begin
            MatRowGet(IVr,IHr.Row,IVrw);
            if (IVrw.ArtCode==artcode) then begin
              test2f = true;
                qtydel = IVrw.Quant;
/*                        
it should show not only stock items    
              if ((IVr.UpdStockFlag!=0) and (IVr.OrderNr==-1)) then begin 
                qtydel = IVrw.Quant;
                test2f = true;                 
              end;                
              if (test2f==false) then begin
                if (CheckDeliveryLocation(artcode,location,IVr.OrderNr,IVrw.Quant,qtydel))  then begin
                  test2f = true;
                end;
              end;
*/              

              if (test2f)  then begin
                switch (IVr.InvType) begin
                  case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
                  case kInvoiceTypeCredit:
                    LkInvoiceTypeCredit:;
                    switch (IVrw.stp) begin
                      case 11:
                        thismonthq = thismonthq + qtydel;
                      case kInvoiceRowTypeNormal:
                        thismonthq = thismonthq - qtydel;
                      case kInvoiceRowTypeStructuredItemComponent:
                        thismonthq = thismonthq - qtydel;
                    end;
                  otherwise
                    thismonthq = thismonthq + qtydel;
                end;
              end;  
            end;
          end;  
        end;  
      end;
    end;  
  end;  
  RETURN;
END;

procedure FindFiscalYearQty(record INVc INr,string artcode,string location,Date sdate,Date edate,var val yearq,string specloc)
BEGIN
  record STVc STr;  
  Date td;
  
  if (blank(specloc)) then begin
    yearq = GetTurnover(INr,"quant",sdate,edate);
  end else begin
    FindFromToQty(artcode,location,sdate,edate,yearq); 
  end;  
  
  RETURN;
END;

procedure SumupOneItem(record ItemStatusVc ISr,var string lastitem,var val Instock,var val OrddOut, var val POQty)
BEGIN
  Boolean testf;
  
  testf = false;
  if (blank(lastitem)) then begin
    lastitem = ISr.Code;
    testf = true;
  end;  
  if (nonblank(lastitem)) then begin
    if (ISr.Code==lastitem) then begin
      testf = true;
    end;
  end; 
  if (testf) then begin
    Instock = ISr.Instock + Instock;
    OrddOut = ISr.OrddOut + OrddOut;
    POQty = ISr.POUnOKQty + POQty;  
  end else begin
    StartFormat(15);
      OutString(0,0,"Wrong data",false);
    EndFormat;
  end;
  RETURN;
END;

procedure SetZeroVals(var val Instock,var val OrddOut,var val POQty,var val thisfiscalyearq,var val thismonthq,var val lastyearq)
BEGIN
  Instock = 0;
  OrddOut = 0;
  POQty = 0;
  thisfiscalyearq = 0;
  thismonthq = 0;
  lastyearq = 0;
  RETURN;
END;

//--------------------By VG
procedure FindInstockforStrItem(record INVc INr,string stock, var val Instock)
begin
  Record RecVc Recr;
  row RecVc Recrw;
  integer ar,i;
  val inst,am,minam;
  boolean firstr;
  
  Recr.Code=INr.Recepy;
  minam=0;  
  if  (ReadFirstMain(Recr,1,true)) then begin
      ar=MatRowCnt(Recr);
      firstr=true;
      for (i=0;i<ar;i=i+1) begin
          MatRowGet(Recr,i,Recrw);
          if (Recrw.InQty>0) then begin
              inst = GetStockQty(Recrw.Item,stock,CurrentDate,false);
              am=inst/Recrw.InQty;
              if (firstr) then begin 
                     firstr=false;
                     minam=am; 
              end;
              if (am<minam) then begin
                 minam=am;
              end;             
          end;         
      end;
  end;
  instock=minam;
   
end;


//--------------------

global
procedure INQtyRn(record RcVc RepSpec)
BEGIN
  record ItemStatusVc ISr;
  record INVc INr;
  Integer rw,keys;
  string 255 tstr;
  string 20 lastitem;
  string 20 frin,toin;
  string 10 frloc,toloc;
  string 10 lastloc,keystr;
  Boolean TrHs,testf,lastf,readitemf,testf1;
  val thisfiscalyearq,thismonthq,lastyearq;
  Date curdate,fsd,fed,monthbegin,lfsd,lfed,ltd;
  val Instock,OrddOut,POQty;
  Integer sorting,Terminated;
  
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frloc = FirstInRange(RepSpec.f2,10);
  toloc = LastInRange(RepSpec.f2,10);
  rw = 1;
  StartReportJob(USetStr(8960));
  HTArts(frin,toin,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  HTLocations(frloc,toloc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  EndHeader;
  curdate = RepSpec.d1;
  if (blankdate(curdate)) then begin
    curdate = CurrentDate;  
  end;
  FindFiscalYear(curdate,fsd,fed);
  ltd = AddYear(curdate,-1);    
  FindFiscalYear(ltd,lfsd,lfed);


  if (RepSpec.Media == mtExcel) then begin	//Edit ---------------------Dima 17.12.2014
  		OutString(0,0,USetStr(8960),true);
  		EndFormat;
  		
  		OutString(0,0,USetStr(1413),false);	//Enterprise by Hansa, Print Date
  		OutString(40,0,"",false);
  		OutString(140,0,"",false);
  		OutString(200,0,CurrentDate,false);
  		OutString(250,0,CurrentTime,false);
  		EndFormat;
  		
  		HTArts(frin,toin,tstr);
  		OutString(0,0,tstr,false);
  		EndFormat;
  		HTLocations(frloc,toloc,tstr);
  		OutString(0,0,tstr,false);
  		EndFormat;
  		EndFormat;
  		EndFormat;
  end;//------------------------------



  //PrintHeaderIQ; // Edit ***** 18 june 2013 14:16:00 Larisa
  StartFormat(15); // Edit ***** 18 june 2013 14:16:00 Larisa
   OutString(0,0,USetStr(31231),false);
   OutString(40,0,USetStr(2463),false);
   OutString(140,0,USetStr(31226),false);//Edit Dima----------- 09.12.2014
   OutString(200,0,USetStr(31206),false);//Edit Dima----------- 09.12.2014
   OutString(250,0,USetStr(2339),true);
   OutString(280,0,USetStr(2569),true);
   OutString(310,0,USetStr(2570),true);
   OutString(340,0,USetStr(2571),true);
   OutString(370,0,USetStr(2991),true);  
   OutString(400,0,USetStr(3011),true);  
   OutString(430,0,USetStr(2722),true);  
  EndFormat;
  Gray_Divider(0,1); // Edit ***** 18 june 2013 14:16:00 Larisa
  sorting = 0;
  ISr.Code = frin;
  keystr = "Code";
  keys = 1;
  if ((nonblank(RepSpec.f1)) and (nonblank(RepSpec.f2)))then begin
    ISr.Location = frloc;
    keys = 2;
    sorting = 1;
  end;
//  if ((blank(RepSpec.f1)) and (nonblank(RepSpec.f2)))then begin
  if (nonblank(RepSpec.f2))then begin
    ISr.Location = frloc;
    keystr = "Location";
    sorting = 2;
    keys = 1;
    if (nonblank(RepSpec.f1))then begin
      keys = 2;
    end;
  end;
  readitemf = true;
  lastf = false;
  TrHs = true;
  while (LoopKey(keystr,ISr,keys,TrHs)) begin
    testf = true;
    switch (sorting) begin
      case 0:
        if (nonblank(toin)) then begin
          if (ISr.Code>toin) then begin TrHs = false; end;
        end;
      case 1:
        if (nonblank(toin)) then begin
          if (ISr.Code>toin) then begin TrHs = false; end;
        end;
        if (nonblank(RepSpec.f2)) then begin
          if (ISr.Location>toloc) then begin TrHs = false; end;
        end;
      case 2:
        if (nonblank(RepSpec.f2)) then begin
          if (ISr.Location>toloc) then begin TrHs = false; end;
        end;
        if (nonblank(RepSpec.f1)) then begin
          if (ISr.Code<frin) then begin TrHs = false; end;
          if (ISr.Code>toin) then begin TrHs = false; end;
        end;
    end;
    if (ISr.Location==";;;") then begin
      testf = false;
    end;
    if (TrHs and testf) then begin
//      if ((lastitem<>ISr.Code) or (nonblank(toloc) and (lastloc<>ISr.Location)) ) then begin
      if (Terminated==0) and (lastitem<>ISr.Code) and ((Instock!=0) or (OrddOut!=0) or (POQty!=0) or (thisfiscalyearq!=0) or (thismonthq!=0) or (lastyearq!=0)) then begin
        if (testf1) then begin
          PrintISInfo(INr,lastitem,Instock,OrddOut,POQty,thisfiscalyearq,thismonthq,lastyearq,RepSpec.f2);        
        end;
        SetZeroVals(Instock,OrddOut,POQty,thisfiscalyearq,thismonthq,lastyearq);
      end;
      if (lastitem<>ISr.Code) then begin 
        lastitem = ISr.Code;
        readitemf = true;
      end;
      if (readitemf) then begin
        INr.Code = ISr.Code;
        testf1 = true;
        if (ReadFirstItem(ISr.Code,INr,false,false)) then begin 
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
              testf1 = false;
            end;
          end;
        end;  
        Terminated = INr.Terminated;  
        readitemf = false;   
      end;
      SumupOneItem(ISr,lastitem,Instock,OrddOut,POQty);      
      monthbegin = AddDay(curdate,-(GetDay(curdate)-1));
      
      if (INr.ItemType==2) then begin
        if (RepSpec.flags[0]!=0) then begin
          FindInstockforStrItem(INr,frloc,Instock);
          if (blank(RepSpec.f2)) then begin
            thismonthq = GetTurnover(INr,"quant",monthbegin,curdate);
            thisfiscalyearq = GetTurnover(INr,"quant",fsd,curdate);
            lastyearq = GetTurnover(INr,"quant",lfsd,lfed);
          end else begin
            FindFromToQtyStructure(INr.Code,RepSpec.f2,lfsd,lfed,fsd,monthbegin,curdate,thismonthq,thisfiscalyearq,lastyearq);          
          end;
        end;
      end else begin
          FindFromToQty(ISr.Code,ISr.Location,monthbegin,curdate,thismonthq); 
          FindFiscalYearQty(INr,ISr.Code,ISr.Location,fsd,curdate,thisfiscalyearq,RepSpec.f2);
          FindFiscalYearQty(INr,ISr.Code,ISr.Location,lfsd,lfed,lastyearq,RepSpec.f2); 
      end;                
//      FindThisFiscalYearQty(INr,ISr.Code,ISr.Location,curdate,fsd,lastyearq,RepSpec.f2);
      lastf = true;      
    end;
  end;
  if ((lastf and testf1) and ((Terminated==0) and (Instock!=0) or (OrddOut!=0) or (POQty!=0) or (thisfiscalyearq!=0) or (thismonthq!=0) or (lastyearq!=0))) then begin
    PrintISInfo(INr,lastitem,Instock,OrddOut,POQty,thisfiscalyearq,thismonthq,lastyearq,RepSpec.f2);
  end;  
  EndJob;  
  RETURN;
END;



global
procedure DblSDVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  24.02.2015
begin
  Integer wn;
  record SDVc SDr;
  
  SDr.SerNr = StringToLongInt(dblstr);
  
  if (ReadFirstMain(SDr,1,true)) then begin  
    wn = OpenWindow("SDDClass",1,0,"","",SDr);
  end; 
  return;
end;



procedure ExtractClassificationsFromINVc(string artcode,var string type, var string brand)	//Edit----------------------Dima  23.02.2015
begin
	record INVc INr;
	record DIVc DIr;
	integer pos;
	string 15 classification;
	
	INr.Code = artcode;
	if (ReadFirstMain(INr,1,true)) then begin

		pos = 0;
  	ExtractObj(INr.DispGroups,pos,classification);
  	while(nonblank(classification)) begin
  		DIr.Code = classification;
			if(ReadFirstMain(DIr,1,true) and (DIr.CType=="BRAND")) then begin 
						brand = DIr.Name;
			end else begin
					if(ReadFirstMain(DIr,1,true) and (DIr.CType=="TYPE")) then begin 
						type = DIr.Name;
					end;
			end;	
  		ExtractObj(INr.DispGroups,pos,classification);
  	end;
	end;	

return;
end;

procedure HeaderLocations(string a,  var string res)	//Edit----------------------Dima  23.02.2015
begin
  if (blank(a)) then begin
     res = USetStr(8961);
  end else begin
     res = USetStr(2768);
     res = res &": " & a;
  end;
return;
end;



global
procedure FoundersRn(record RcVc RepSpec)  					//Edit----------------------Dima  23.02.2015
begin
  record SDVc SDr;
  row SDVc SDrw;
  record ObjVc Objr;
  record PLVc PLr;
  integer rw,rwcnt,i,pos;
  string 200 tstr;
  string 30 objct,type,brand,founder;
  boolean testf,TrHs;
  val sum;  
  
  
  StartReportJob(USetStr(31322));
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
  HeaderLocations(RepSpec.f1,tstr);	
  Header(rw,tstr,1);
  rw = rw + 1;	
	EndHeader;
	
	StartFormat(15);
		OutString(0,0,USetStr(31203),false);		//ArtCode
		OutString(90,0,USetStr(12003),false);		//Type
		OutString(140,0,USetStr(31205),false);	//Brand
		OutString(200,0,USetStr(31169),false);	//Currency
		OutString(240,0,USetStr(12004),false);	//Quantity
		OutString(280,0,USetStr(31122),false);	//Sum
		OutString(320,0,USetStr(35001),false);	//Founder
		OutString(390,0,USetStr(12001),false);	//Date
		OutString(440,0,USetStr(13214),false);	//Document

	EndFormat;
	
	TrHs = true;
	SDr.TransDate = RepSpec.sStartDate;
	
	While(LoopKey("TransDate",SDr,1,TrHs))begin
		testf = true;

		if (SDr.TransDate > RepSpec.sEndDate) then begin
			testf = false;
			TrHs = false;
		end;
		
		if (nonblank(RepSpec.f1) and (RepSpec.f1 != SDr.Location)) then begin
			testf = false;
		end;	
	
		if (testf) then begin	
			pos = 0;
  		ExtractObj(SDr.Objects,pos,objct);
  		testf = false;
  		while(nonblank(objct)) begin
  			Objr.Code = objct;  			 
				if(ReadFirstMain(Objr,1,true) and (Objr.OTCode=="FOUND")) then begin 
						testf = true;
						founder = Objr.Comment;
						goto LBreakObjSearch4;
				end;
  			ExtractObj(SDr.Objects,pos,objct);
  		end;
			LBreakObjSearch4:;
		end;
	
			
		if(testf)  then begin
		
				rwcnt = MatRowCnt(SDr);
				
				for(i=0; i<rwcnt; i=i+1) begin
					MatRowGet(SDr,i,SDrw);					
					ExtractClassificationsFromINVc(SDrw.ArtCode,type,brand);
					
					PLr.PLCode = "FOB17";	
					PLr.ArtCode = SDrw.ArtCode;
					ReadFirstMain(PLr,2,true);
					sum = PLr.ExVatPrice * SDrw.Qty;
				
					StartFormat(15);
						OutString(0,0,SDrw.ArtCode,false);
						OutString(90,0,type,false);
						OutString(140,0,brand,false);
						OutString(200,0,PLr.CurncyCode,false);
						OutString(240,0,SDrw.Qty,false);
						OutVal(280,0,sum,M4Val,false);
						OutString(320,0,founder,false);
						OutString(390,0,SDr.TransDate,false);
						OutStringID(440,"DblSDVcOpen",SDr.SerNr,false,SDr.SerNr);
						        	
					EndFormat;				
				
				end;				
		end;
			
	end;	
	
	
	EndJob;

return;
end;
