external function string 255 MonthName(Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string,boolean);
external function string 10 GetStringCellNum(integer,integer);

SetLangMode(LangRussian,"RUS",0);


global 
procedure DaysCumulativeExcelRn(record RcVc RepSpec,var area areatofile)
begin
  array string 255 LocArr,MonthArr,ConsultArr,NameArr;
  boolean TrHs,testf,cnf;
  date startdate,enddate,prevdate;
  record IVVc IVr;
  record LocationVc Locr;
  record UserVc Userr;
  row IVVc IVrw;
  integer keycnt,rwcnt,normrwcnt,LAi,MAi,CAi,NAi,i,j,qtyoborot,qtyvozvrat;
  string 20 key;
  string 255 tstr,loc,month,salesman;
  val sumoborot,sumvozvrat;
  vector boolean LocInArr,MonthInArr,ConsultInArr,MonthLoc,MonthLocDay,DayNameObor,DayNameVozv,NameInArr;
  vector val Oborot,Vozvrat;
  array string 50 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 6 reportName;
  array string 255 mas;
  array integer lvlArray;
  vector boolean loccode;
  vector string 100 locname;
  
  setexportcodepage("UTF8");
  
  if (nonblank(RepSpec.sStartDate)) then begin
    startdate = RepSpec.sStartDate;
    enddate = RepSpec.sEndDate;
  end else begin
    startdate = StringToDate("01/01/" & getyear(CurrentDate));
    enddate = StringToDate("31/12/" & getyear(CurrentDate));
  end;
  IVr.InvDate = startdate;
  if (nonblank(RepSpec.ObjStr)) then begin
    IVr.Location = RepSpec.ObjStr;
    key = "Location";
    keycnt = 2;
  end else begin
    key = "InvDate";
    keycnt = 1;
  end;
  TrHs = true;
  while(loopkey(key,IVr,keycnt,TrHs))begin
    testf = true;
    if (key=="Location") then begin
      if (IVr.Location!=RepSpec.ObjStr) then begin TrHs = false; testf = false; end;
      if (IVr.InvDate>enddate) then begin testf = false; end;
    end else begin
      if (IVr.InvDate>enddate) then begin TrHs = false; testf = false; end;
    end;
    if (IVr.OKFlag==0) then begin testf = false; end;
    if (IVr.Invalid==1) then begin testf = false; end;
    if (testf) then begin
    	
    	if(loccode[IVr.Location]==false)then begin
				Locr.Code = IVr.Location;
				
				if (ReadFirstMain(Locr,1,true)) then begin
					loc = Locr.Name;
				end else begin
					loc = IVr.Location;
				end;
				locname[IVr.Location] = loc;
				if (LocInArr[loc]==false) then begin
					LocInArr[loc] = true;
					LocArr[LAi] = loc;
					LAi = LAi + 1;
				end;
      end else begin
      	loc = locname[IVr.Location];
      end;
      month = getmonth(IVr.InvDate) & "_" & getyear(IVr.InvDate);
      if (MonthInArr[month]==false) then begin
        MonthInArr[month] = true;
        MonthArr[MAi] = month;
        MAi = MAi + 1;
      end;
      MonthLoc[month & ";" & loc] = true;
      MonthLocDay[month & ";" & loc & ";" & getday(IVr.InvDate)] = true;
      Userr.Code = IVr.SalesMan;
      if (ReadFirstMain(Userr,1,true)) then begin
        salesman = Userr.Name;
      end else begin
        salesman = IVr.SalesMan;
      end;
      if (ConsultInArr[salesman]==false) then begin
        ConsultInArr[salesman] = true;
        ConsultArr[CAi] = salesman;
        CAi = CAi + 1;
      end;
      tstr = loc & ";" & month & ";" & getday(IVr.InvDate) & ";" & salesman & ";";
      if (IVr.PayDeal=="CN") then begin
        Vozvrat[tstr & "sum"] = Vozvrat[tstr & "sum"] - IVr.BaseSum4;
        Vozvrat[tstr & "chek"] = Vozvrat[tstr & "chek"] + 1;
        cnf = true;
      end;
      sumvozvrat = 0;
      sumoborot = 0;
      rwcnt = matrowcnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        matrowget(IVr,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) then begin
          if (cnf) then begin
            DayNameVozv[loc & ";" & salesman & ";" & IVr.InvDate & ";" & IVrw.ArtCode] = true;
            if (NameInArr[IVrw.ArtCode]==false) then begin
              NameArr[NAi] = IVrw.ArtCode;
              NAi = NAi + 1;
              NameInArr[IVrw.ArtCode] = true;
            end;
          end else begin
            if (IVrw.Quant<0) then begin
              DayNameVozv[loc & ";" & salesman & ";" & IVr.InvDate & ";" & IVrw.ArtCode] = true;
              if (NameInArr[IVrw.ArtCode]==false) then begin
                NameArr[NAi] = IVrw.ArtCode;
                NAi = NAi + 1;
                NameInArr[IVrw.ArtCode] = true;
              end;
              sumvozvrat = sumvozvrat + MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            end else begin
              DayNameObor[IVr.InvDate & ";" & IVrw.ArtCode] = true;
              if (NameInArr[IVrw.ArtCode]==false) then begin
                NameArr[NAi] = IVrw.ArtCode;
                NAi = NAi + 1;
                NameInArr[IVrw.ArtCode] = true;
              end;
              sumoborot = sumoborot + MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            end;
          end;
        end;
      end;
      if (cnf) then begin
      end else begin
        if (sumvozvrat!=0) then begin
          Vozvrat[tstr & "chek"] = Vozvrat[tstr & "chek"] + 1;
          Vozvrat[tstr & "sum"] = Vozvrat[tstr & "sum"] + sumvozvrat;
        end;
        if (sumoborot!=0) then begin
          Oborot[tstr & "chek"] = Oborot[tstr & "chek"] + 1;
          Oborot[tstr & "sum"] = Oborot[tstr & "sum"] + sumoborot;
        end;
      end;
    end;
    prevdate = IVr.InvDate;
  end;
  
  reportName = "DaysCumulativeExcelRn";
	if(windowsmode==1)then begin
		fileToSave = "tmpxlsx.xlsx";
	end else begin
		fileToSave = "/tmpxlsx.xlsx";
	end;
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
  for (MAi=0;MAi<MonthArr.length;MAi=MAi+1) begin
    for (LAi=0;LAi<LocArr.length;LAi=LAi+1) begin
      if (MonthLoc[MonthArr[MAi] & ";" & LocArr[LAi]]) then begin
        sheetNames[qtyOfSheets] = UpperCase(left(MonthName(StringToDate("1/" & left(MonthArr[MAi],(len(MonthArr[MAi]) - 5)) & "/2000")),3)) & " " & LocArr[LAi];
        qtyOfSheets = qtyOfSheets + 1;
      end;
    end;
  end;
  
	sheetColls[0] = 2.86;
	sheetColls[1] = 27.71;
	sheetColls[2] = 12.14;
	sheetColls[3] = 9.14;
	sheetColls[4] = 9.14;
	sheetColls[5] = 12.14;
	sheetColls[6] = 9.14;
	sheetColls[7] = 9.14;
  sheetColls[8] = 12.14;
	
	numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	XmlXlsxWorkBegin(fileToSave,reportName);
	CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,true);
	sheetnum = 0;
  for (MAi=0;MAi<MonthArr.length;MAi=MAi+1) begin
    for (LAi=0;LAi<LocArr.length;LAi=LAi+1) begin
    if (MonthLoc[MonthArr[MAi] & ";" & LocArr[LAi]]) then begin
        sheetnum = sheetnum + 1;
        SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
        BeginSheetData(sheetnum,fileToSave);
        mergeCell[0] = "C6:E6";
        mergeCell[1] = "F6:H6";
        mergeCell[2] = "I6:I7";
        mergeCell[3] = "B6:B7";
        qtyMergeCell = 4;
        rownum = 1;
        colnum = 3;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 2;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Отчет за день с накопительным эффектом",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        rownum = rownum + 1;
        colnum = 2;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 3;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,LocArr[LAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 2;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 3;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,startdate & ":" & enddate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        rownum = rownum + 1;
        colnum = 2;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 26;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Имя консультанта",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 28;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Оборот",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 29;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 30;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 28;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Возвраты",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 29;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 30;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 31;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Сумма",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 2;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 27;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 12;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Приход",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 13;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. чеков",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 14;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. наим.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 12;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Возврат",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 13;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. чеков",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 14;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. наим.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 32;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        for (i=1;i<32;i=i+1) begin
          if (MonthLocDay[MonthArr[MAi] & ";" & LocArr[LAi] & ";" & i]) then begin
            colnum = 2;
            BeginRow(sheetnum,fileToSave,rownum,0,blankval);
              mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
              style = 33;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,i & "/" & left(MonthArr[MAi],(len(MonthArr[MAi]) - 5)) & "/" & right(MonthArr[MAi],4),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 34;
              qtyOfEmpStr = 6;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 35;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);
              qtyMergeCell = qtyMergeCell + 1;
            EndRow(sheetnum,fileToSave,rownum);
            for (CAi=0;CAi<ConsultArr.length;CAi=CAi+1) begin
              tstr = LocArr[LAi] & ";" & MonthArr[MAi] & ";" & i & ";" & ConsultArr[CAi] & ";";
              if ((Oborot[tstr & "chek"]!=blankval) or (Vozvrat[tstr & "chek"]!=blankval)) then begin
                qtyoborot = 0;
                qtyvozvrat = 0;
                for (j=0;j<NameArr.length;j=j+1) begin
                  if (DayNameObor[LocArr[LAi] & ";" & ConsultArr[CAi] & ";" & i & "/" & left(MonthArr[MAi],(len(MonthArr[MAi]) - 5)) & "/" & right(MonthArr[MAi],4) & ";" & NameArr[j]]) then begin
                    qtyoborot = qtyoborot + 1;
                  end;
                  if (DayNameVozv[LocArr[LAi] & ";" & ConsultArr[CAi] & ";" & i & "/" & left(MonthArr[MAi],(len(MonthArr[MAi]) - 5)) & "/" & right(MonthArr[MAi],4) & ";" & NameArr[j]]) then begin
                    qtyvozvrat = qtyvozvrat + 1;
                  end;
                end;
                colnum = 2;
                BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                  style = 7;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ConsultArr[CAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  style = 8;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Oborot[tstr & "sum"]);
                  style = 4;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Oborot[tstr & "chek"]);
                  style = 9;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Oborot[tstr & "naim"]);
                  style = 8;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Vozvrat[tstr & "sum"]);
                  style = 4;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Vozvrat[tstr & "chek"]);
                  style = 9;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Vozvrat[tstr & "naim"]);
                  style = 11;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,Oborot[tstr & "sum"] + Vozvrat[tstr & "sum"]);
                EndRow(sheetnum,fileToSave,rownum);
              end;
            end;
          end;
        end;
        colnum = 2;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 25;
          qtyOfEmpStr = 8;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        
        
        
        
        EndSheetData(sheetnum,fileToSave);
        MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
        EndSheet(sheetnum,fileToSave,0);
      end;
    end;
  end;
  FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
	ConvertToXLSX(fileToSave,false);
	MilliSleep(2000);
	addfiletoarea(fileToSave,areatofile,false);
	delete_file(fileToSave);
  
  return;
end;