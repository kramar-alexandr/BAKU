external procedure YcToStr(Integer,var string);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure BrandManagerRnTool(record RcVc,var val,var val,var val,var val);
external procedure GetObjs(string,string,var string);

procedure BMRnPrintAccHeader(string AccNumber,Boolean forBrand,integer tab1,integer tab2,integer tab3,integer tab4,integer tab5,integer tab6,integer tab7,integer tab8,integer tab9,integer tab10)
BEGIN
	string 20 head;
	
	switch (AccNumber) begin
		case "60":
			head = USetStr(35037);
		case "64":
			head = USetStr(35038);
		case "61":
			head = USetStr(35046);
	end;
	StartFormat(15);
		OutString(tab1,0,"",false);
		OutString(tab2,0,head,false);
		OutString(tab3,0,"",false);
		OutString(tab4,0,"",false);
		OutString(tab5,0,"",false);
		OutString(tab6,0,"",false);
		OutString(tab7,0,"",false);
		OutString(tab8,0,"",false);
		OutString(tab9,0,"",false);
		OutString(tab10,0,"",false);
	EndFormat;
	StartFormat(15);
	EndFormat;
	StartFormat(15);
		OutString	(tab1,0,"",false);
		OutString	(tab2,0,"",false);
		OutStringCut(tab3,tab4 + 20,0,USetStr(35042),true,0);
		OutString	(tab5,0,"",false);
		OutStringCut(tab5,tab6,0,USetStr(35043),true,0);
		OutString	(tab7,0,"",false);
		OutStringCut(tab7,tab8 + 20,0,USetStr(35044),true,0);
		OutString	(tab9,0,"",false);
		OutStringCut(tab9,tab10 + 20,0,USetStr(35045),true,0);
	EndFormat;
	Black_Divider(tab3 + 1, tab5 - 1);
	Black_Divider(tab5 + 1, tab7 - 1);
	Black_Divider(tab7 + 1, tab9 - 1);
	Black_Divider(tab9 + 1,1);
	StartFormat(15);
		if (forBrand) then begin
			OutString(tab1,0,USetStr(31144),false);
		end else begin
			OutString(tab1,0,USetStr(35039),false);
		end;
		OutString(tab2,0,USetStr(35020),false);
		OutString(tab3,0,USetStr(35040),false);
		OutString(tab4,0,USetStr(35041),false);
		OutString(tab5,0,USetStr(35040),false);
		OutString(tab6,0,USetStr(35041),false);
		OutString(tab7,0,USetStr(35040),false);
		OutString(tab8,0,USetStr(35041),false);
		OutString(tab9,0,USetStr(35040),false);
		OutString(tab10,0,USetStr(35041),false);
	EndFormat;
	Black_Divider(0,1);
	RETURN
END;

global
procedure BrandManagerRn(record RcVc RepSpec)
BEGIN
	record MainVc mainr;
	record TRVc TRr,tempTRr;
	row TRVc TRrw,tempTRrw;
	record ObjVc Objr;
	record CurncyCodeVc CCr;
	integer i,j,k,l,rwcnt,acccount,brandcount,curcount;
	boolean TrHs;
	integer tab1, tab2, tab3,
			tab4, tab5, tab6,
			tab7, tab8, tab9,
			tab10;
	Array string 100 BrandList;
	Array string 10 AccList;
	Array string 10 CurencyList;
	vector boolean BrandNonBlank;
	vector val BrandBeginBal,BrandDebet,BrandCredit,BrandEndBal;
	val TotBeginBal,TotDebet,TotCredit,TotEndBal;
	string 30 brand, tempstr;
	
	tab1 = 0;	 tab2 = 50;	  tab3 = 80;
	tab4 = 130;  tab5 = 180;  tab6 = 230;
	tab7 = 280;	 tab8 = 330;  tab9 = 380;
	tab10 = 430;
	
	AccList[0] = "60";
	AccList[1] = "64";
	AccList[2] = "61";
	acccount = 3;
	TrHs = true;
	curcount = 0;
	while (LoopMain(CCr,1,TrHs)) begin
		if (TrHs) then begin
			CurencyList[curcount] = CCr.CurncyCode;
			curcount = curcount + 1;
		end;
	end;
	
	StartReportNoHeaderJob(USetStr(35036));
	StartFormat(15);
		OutString(tab1,0,USetStr(31102),false);
		OutString(tab2,0,RepSpec.sStartDate & " - " & RepSpec.sEndDate,false);
	EndFormat;
	StartFormat(15);
		OutString(tab1,0,USetStr(31024),false);
		OutString(tab2,0,RepSpec.ObjStr,false);
	EndFormat;
	if blank(RepSpec.f1) then begin
		Black_Divider(0,1);
		StartFormat(15);
		EndFormat;
		Objr.OTCode = "BRAND";
		TrHs = true;
		brandcount = 0;
		while (LoopKey("OTCode",Objr,1,TrHs)) begin
			if (TrHs) then begin
				BrandList[brandcount] = Objr.Code;
				brandcount = brandcount + 1;
			end;
		end;
		BrandList[brandcount] = "BLANKBRAND";
		brandcount = brandcount + 1;

		for (i=0;i<acccount;i=i+1) begin
			for (j=0;j<brandcount;j=j+1) begin
				BrandNonBlank[BrandList[j]] = false;
			end;
			for (j=0;j<brandcount;j=j+1) begin
				for (k=0;k<curcount;k=k+1) begin
					BrandBeginBal[BrandList[j] & ":" & CurencyList[k]] = blankval;
					BrandBeginBal[BrandList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
					BrandDebet[BrandList[j] & ":" & CurencyList[k]] = blankval;
					BrandDebet[BrandList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
					BrandCredit[BrandList[j] & ":" & CurencyList[k]] = blankval;
					BrandCredit[BrandList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
					BrandEndBal[BrandList[j] & ":" & CurencyList[k]] = blankval;
					BrandEndBal[BrandList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
				end;
			end;
			mainr.AccNumber = AccList[i];
			TrHs = true;
			while (LoopMain(mainr,1,TrHs)) begin
				if ((mainr.AccNumber != AccList[i]) or (mainr.TransDate > RepSpec.sEndDate))  then begin
					TrHs = false;	
				end;
				if ((TrHs) and (mainr.FileName=="TRVc")) then begin
					TRr.Number = mainr.TransNr;
					TRr.IntYc = mainr.IntYc;
					if (ReadFirstMain(TRr,2,true)) then begin
						if (mainr.TransDate == TRr.TransDate) then begin
							rwcnt = MatRowCnt(TRr);
							for (j=0;j<rwcnt;j=j+1) begin
								MatRowGet(TRr,j,TRrw);
								if ((TRrw.AccNumber == AccList[i]) and (TRrw.ovst <> 1) and (TRrw.stp == 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
									brand = "";
									GetObjs("BRAND",TRrw.Objects,brand);
									if blank(brand) then begin
										brand = "BLANKBRAND";
									end;
									BrandNonBlank[brand] = true;
									if (mainr.TransDate >= RepSpec.sStartDate) then begin
										BrandDebet[brand & ":" & TRrw.Curncy] = BrandDebet[brand & ":" & TRrw.Curncy] + TRrw.CurDebVal;
										BrandDebet[brand & ":" & TRrw.Curncy & ":BASE"] = BrandDebet[brand & ":" & TRrw.Curncy & ":BASE"] + TRrw.DebVal;
										BrandCredit[brand & ":" & TRrw.Curncy] = BrandCredit[brand & ":" & TRrw.Curncy] + TRrw.CurCredVal;
										BrandCredit[brand & ":" & TRrw.Curncy & ":BASE"] = BrandCredit[brand & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal;
									end else begin
										if (AccList[i] <> "61") then begin
											BrandBeginBal[brand & ":" & TRrw.Curncy] = BrandBeginBal[brand & ":" & TRrw.Curncy] + TRrw.CurCredVal - TRrw.CurDebVal;
											BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal - TRrw.DebVal;
										end else begin
											BrandBeginBal[brand & ":" & TRrw.Curncy] = BrandBeginBal[brand & ":" & TRrw.Curncy] - TRrw.CurCredVal + TRrw.CurDebVal;
											BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] - TRrw.CredVal + TRrw.DebVal;
										end;
									end;
									if (AccList[i] <> "61") then begin
										BrandEndBal[brand & ":" & TRrw.Curncy] = BrandEndBal[brand & ":" & TRrw.Curncy] + TRrw.CurCredVal - TRrw.CurDebVal;
										BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal - TRrw.DebVal;
									end else begin
										BrandEndBal[brand & ":" & TRrw.Curncy] = BrandEndBal[brand & ":" & TRrw.Curncy] - TRrw.CurCredVal + TRrw.CurDebVal;
										BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] - TRrw.CredVal + TRrw.DebVal;
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			ResetLoop(mainr);
			BMRnPrintAccHeader(AccList[i],false,tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10);
			for (j=0;j<brandcount;j=j+1) begin
				if (BrandNonBlank[BrandList[j]]) then begin
					for (k=0;k<curcount;k=k+1) begin
						if ((BrandEndBal[BrandList[j] & ":" & CurencyList[k]] <> 0) or (BrandBeginBal[BrandList[j] & ":" & CurencyList[k]] <> 0) or (BrandDebet[BrandList[j] & ":" & CurencyList[k]] <> 0) or (BrandCredit[BrandList[j] & ":" & CurencyList[k]] <> 0)) then begin
							StartFormat(15);
								if (BrandList[j] == "BLANKBRAND") then begin
									OutString(tab1,0,"",false);
								end else begin
									OutStringID(tab1,"DblBrand",BrandList[j],false,AccList[i] & ":" & CurencyList[k]);
								end;
								OutString(tab2,0,CurencyList[k],false);
								if (BrandList[j] == "BLANKBRAND") then begin
									OutString(tab3,0,BrandBeginBal[BrandList[j] & ":" & CurencyList[k]],false);
									OutString(tab4,0,BrandBeginBal[BrandList[j] & ":" & CurencyList[k] & ":BASE"],false);
								end else begin
									OutStringID(tab3,"DblBrandBeginBal",BrandBeginBal[BrandList[j] & ":" & CurencyList[k]],false,AccList[i] & ":" & BrandList[j]);
									OutStringID(tab4,"DblBrandBeginBal",BrandBeginBal[BrandList[j] & ":" & CurencyList[k] & ":BASE"],false,AccList[i] & ":" & BrandList[j]);
								end;
								OutString(tab5,0,BrandDebet[BrandList[j] & ":" & CurencyList[k]],false);
								OutString(tab6,0,BrandDebet[BrandList[j] & ":" & CurencyList[k] & ":BASE"],false);
								OutString(tab7,0,BrandCredit[BrandList[j] & ":" & CurencyList[k]],false);
								OutString(tab8,0,BrandCredit[BrandList[j] & ":" & CurencyList[k] & ":BASE"],false);
								OutString(tab9,0,BrandEndBal[BrandList[j] & ":" & CurencyList[k]],false);
								OutString(tab10,0,BrandEndBal[BrandList[j] & ":" & CurencyList[k] & ":BASE"],false);
							EndFormat;
							Gray_Divider(0,1);
						end;
					end;
				end;
			end;
			Black_Divider(0,1);
			RepSpec.f4 = AccList[i];
			RepSpec.CurncyCode = "";
			BrandManagerRnTool(RepSpec,TotDebet,TotCredit,TotBeginBal,TotEndBal);
			StartFormat(15);
				OutString(tab1,0,USetStr(31222),false);
				OutString(tab2,0,"",false);
				OutString(tab3,0,"",false);
				OutString(tab4,0,TotBeginBal,false);
				OutString(tab5,0,"",false);
				OutString(tab6,0,TotDebet,false);
				OutString(tab7,0,"",false);
				OutString(tab8,0,TotCredit,false);
				OutString(tab9,0,"",false);
				OutString(tab10,0,TotEndBal,false);
			EndFormat;
			StartFormat(15);
			EndFormat;
		end;
	end else begin
		StartFormat(15);
			OutString(tab1,0,USetStr(35047),false);
			OutString(tab2,0,RepSpec.f1,false);
		EndFormat;
		Black_Divider(0,1);
		StartFormat(15);
		EndFormat;
		for (i=0;i<acccount;i=i+1) begin
			for (k=0;k<curcount;k=k+1) begin
				BrandBeginBal[RepSpec.f1 & ":" & CurencyList[k]] = blankval;
				BrandBeginBal[RepSpec.f1 & ":" & CurencyList[k] & ":BASE"] = blankval;
				BrandEndBal[RepSpec.f1 & ":" & CurencyList[k]] = blankval;
				BrandEndBal[RepSpec.f1 & ":" & CurencyList[k] & ":BASE"] = blankval;
			end;
			mainr.AccNumber = AccList[i];
			TrHs = true;
			l = 0;
			RecordClear(tempTRr);
			while (LoopMain(mainr,1,TrHs)) begin
				if ((mainr.AccNumber != AccList[i]) or (mainr.TransDate > RepSpec.sEndDate))  then begin
					TrHs = false;	
				end;
				if ((TrHs) and (mainr.FileName=="TRVc")) then begin
					TRr.Number = mainr.TransNr;
					TRr.IntYc = mainr.IntYc;
					if (ReadFirstMain(TRr,2,true)) then begin
						if (mainr.TransDate == TRr.TransDate) then begin
							rwcnt = MatRowCnt(TRr);
							for (j=0;j<rwcnt;j=j+1) begin
								MatRowGet(TRr,j,TRrw);
								if ((TRrw.AccNumber == AccList[i]) and (TRrw.ovst <> 1) and (TRrw.stp == 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
									brand = "";
									GetObjs("BRAND",TRrw.Objects,brand);
									if (brand == RepSpec.f1) then begin
										if (mainr.TransDate >= RepSpec.sStartDate) then begin
											ClearRow(tempTRr,tempTRrw,tempTRrw.stp);
											YcToStr(TRr.IntYc,tempstr);
											tempTRrw.Comment = tempstr & "." & TRr.Number;
											tempTRrw.Curncy = TRrw.Curncy;
											tempTRrw.CurDebVal = TRrw.CurDebVal;
											tempTRrw.CurCredVal = TRrw.CurCredVal;
											tempTRrw.DebVal = TRrw.DebVal;
											tempTRrw.CredVal = TRrw.CredVal;
											MatRowPut(tempTRr,l,tempTRrw);
											l = l + 1;
										end else begin
											if (AccList[i] <> "61") then begin
												BrandBeginBal[brand & ":" & TRrw.Curncy] = BrandBeginBal[brand & ":" & TRrw.Curncy] + TRrw.CurCredVal - TRrw.CurDebVal;
												BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal - TRrw.DebVal;
											end else begin
												BrandBeginBal[brand & ":" & TRrw.Curncy] = BrandBeginBal[brand & ":" & TRrw.Curncy] - TRrw.CurCredVal + TRrw.CurDebVal;
												BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandBeginBal[brand & ":" & TRrw.Curncy & ":BASE"] - TRrw.CredVal + TRrw.DebVal;
											end;
										end;
										if (AccList[i] <> "61") then begin
											BrandEndBal[brand & ":" & TRrw.Curncy] = BrandEndBal[brand & ":" & TRrw.Curncy] + TRrw.CurCredVal - TRrw.CurDebVal;
											BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal - TRrw.DebVal;
										end else begin
											BrandEndBal[brand & ":" & TRrw.Curncy] = BrandEndBal[brand & ":" & TRrw.Curncy] - TRrw.CurCredVal + TRrw.CurDebVal;
											BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandEndBal[brand & ":" & TRrw.Curncy & ":BASE"] - TRrw.CredVal + TRrw.DebVal;
										end;
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			ResetLoop(mainr);
			TotBeginBal = 0;
			TotDebet = 0;
			TotCredit = 0;
			TotEndBal = 0;
			BMRnPrintAccHeader(AccList[i],true,tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10);
			for (k=0;k<curcount;k=k+1) begin
				if (BrandBeginBal[RepSpec.f1 & ":" & CurencyList[k]] <> 0) then begin
					StartFormat(15);
						OutString(tab1,0,"",false);
						OutString(tab2,0,CurencyList[k],false);
						OutString(tab3,0,BrandBeginBal[RepSpec.f1 & ":" & CurencyList[k]],false);
						OutString(tab4,0,BrandBeginBal[RepSpec.f1 & ":" & CurencyList[k] & ":BASE"],false);
						OutString(tab5,0,"",false);
						OutString(tab6,0,"",false);
						OutString(tab7,0,"",false);
						OutString(tab8,0,"",false);
						OutString(tab9,0,"",false);
						OutString(tab10,0,"",false);
					EndFormat;
					Gray_Divider(0,1);
				end;
			end;
			rwcnt = MatRowCnt(tempTRr);
			for (j=0;j<rwcnt;j=j+1) begin
				MatRowGet(tempTRr,j,tempTRrw);
				StartFormat(15);
				switch (FirstTransTypeInRange(tempTRrw.Comment)) begin
					case IVYc:
						OutStringID(tab1,"DblIVVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					case VIYc:
						OutStringID(tab1,"DblVIVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					case RetPUYc:
						OutStringID(tab1,"DblRetPUVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					case OPYc:
						OutStringID(tab1,"DblOPVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					case PUYc:
						OutStringID(tab1,"DblPUVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					case SDYc:
						OutStringID(tab1,"DblSDVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					case STMovYc:
						OutStringID(tab1,"DblStockMovVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
					otherwise
						OutStringID(tab1,"DblTrans",tempTRrw.Comment,false,CurrentCompany);
				end;
					OutString(tab2,0,tempTRrw.Curncy,false);
					OutString(tab3,0,"",false);
					OutString(tab4,0,"",false);
					OutString(tab5,0,tempTRrw.CurDebVal,false);
					OutString(tab6,0,tempTRrw.DebVal,false);
					TotDebet = TotDebet + tempTRrw.DebVal;
					OutString(tab7,0,tempTRrw.CurCredVal,false);
					OutString(tab8,0,tempTRrw.CredVal,false);
					TotCredit = TotCredit + tempTRrw.CredVal;
					OutString(tab9,0,"",false);
					OutString(tab10,0,"",false);
				EndFormat;
				Gray_Divider(0,1);
			end;
			for (k=0;k<curcount;k=k+1) begin
				if (BrandEndBal[RepSpec.f1 & ":" & CurencyList[k]] <> 0) then begin
					StartFormat(15);
						OutString(tab1,0,"",false);
						OutString(tab2,0,CurencyList[k],false);
						OutString(tab3,0,"",false);
						OutString(tab4,0,"",false);
						OutString(tab5,0,"",false);
						OutString(tab6,0,"",false);
						OutString(tab7,0,"",false);
						OutString(tab8,0,"",false);
						OutString(tab9,0,BrandEndBal[RepSpec.f1 & ":" & CurencyList[k]],false);
						OutString(tab10,0,BrandEndBal[RepSpec.f1 & ":" & CurencyList[k] & ":BASE"],false);
					EndFormat;
					Gray_Divider(0,1);
				end;
			end;
			Black_Divider(0,1)
			RepSpec.f4 = AccList[i];
			RepSpec.CurncyCode = "";
			RepSpec.ObjStr = RepSpec.ObjStr & "," & RepSpec.f1;
			BrandManagerRnTool(RepSpec,TotDebet,TotCredit,TotBeginBal,TotEndBal);
			StartFormat(15);
				OutString(tab1,0,USetStr(31222),false);
				OutString(tab2,0,"",false);
				OutString(tab3,0,"",false);
				OutString(tab4,0,TotBeginBal,false);
				OutString(tab5,0,"",false);
				OutString(tab6,0,TotDebet,false);
				OutString(tab7,0,"",false);
				OutString(tab8,0,TotCredit,false);
				OutString(tab9,0,"",false);
				OutString(tab10,0,TotEndBal,false);
			EndFormat;
			StartFormat(15);
			EndFormat;
		end;
	end;
	EndJob;

	RETURN;
END;