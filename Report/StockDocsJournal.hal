//SetLangMode(LangRussian,"ENG",0);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function roundmode DefaultRoundMode();

procedure HeaderLocations(string a,  var string res)	//Edit----------------------Dima  23.02.2015
begin
  if (blank(a)) then begin
     res = USetStr(8961);
  end else begin
     res = USetStr(2768);
     res = res &": " & a;
  end;
return;
end;


global
procedure StockDocsJournalRn(record RcVc RepSpec)
begin
record PUVc PUr;
record StockMovVc SMr;
row StockMovVc SMrw;
record SDVc SDr;
row SDVc SDrw;
record SHVc SHr;
row SHVc SHrw;
record RetVc Retr;
row RetVc Retrw;
record RetPUVc RetPUr;
record IVVc IVr;
row IVVc IVrw;
record BaseCurBlock BCb;
string 250 tstr;
string 50 docType,location;
string 5 baseCur;
integer rw,rwcnt,i;
boolean TrHs,testf;
val subTotalCost, TotalCost,cost,cost2,costPLN;
integer sign;

	BlockLoad(BCb);
	baseCur = BCb.BaseCur1;	

	subTotalCost = 0;
	TotalCost = 0;
	location = RepSpec.f1;

  StartReportJob("Stock documents journal");
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
  HeaderLocations(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  Header(rw,"All values in PLN",1);
  rw = rw + 1;  
	EndHeader;

	StartFormat(15);
		OutString(0,0,"Location",false);				
		OutString(90,0,"Document type",false);	
		OutString(180,0,"Number",false);					
		OutString(250,0,"Date",false);	
		OutString(300,0,"Cost",false);

	EndFormat;

//-------------------------------------------------------PUVc------------------------------------------------	
	TrHs = true;
	PUr.TransDate = RepSpec.sStartDate;
	docType = "Goods Receipts";

	While(LoopKey("TransDate",PUr,1,TrHs)) begin
		testf = true;
		if (PUr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (PUr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=PUr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			costPLN = PUr.SumCostPrice;
			if (PUr.CurncyCode != "PLN") then begin
				CurValToOtherCur(PUr.TransDate,PUr.CurncyCode,PUr.SumCostPrice,"PLN",costPLN,DefaultCurRoundOff); 
			end;	
			OutString(0,0,PUr.Location,false);				
			OutString(90,0,docType,false);	
			OutStringID(180,"DblPUVcOpen",PUr.SerNr,false,PUr.SerNr);					
			OutString(250,0,PUr.TransDate,false);	
			OutString(300,0,costPLN,false);			
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;		
	EndFormat;	

//-------------------------------------------------------SDVc------------------------------------------------		
	TrHs = true;
	SDr.TransDate = RepSpec.sStartDate;
	docType = "Stock Depreciations";
	subTotalCost = 0;

	While(LoopKey("TransDate",SDr,1,TrHs)) begin
		testf = true;
		if (SDr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (SDr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=SDr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(SDr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SDr,i,SDrw);
				cost = cost - SDrw.FIFORowVal;
			end;
			CurValToOtherCur(SDr.TransDate,baseCur,cost,"PLN",costPLN,DefaultCurRoundOff);		
			OutString(0,0,SDr.Location,false);				
			OutString(90,0,docType,false);	
			OutStringID(180,"DblSDVcOpen",SDr.SerNr,false,SDr.SerNr);					
			OutString(250,0,SDr.TransDate,false);	
			OutString(300,0,costPLN,false);
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);	
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	EndFormat;
	
	
//-------------------------------------------------------StockMovVc------------------------------------------------		
	TrHs = true;
	SMr.TransDate = RepSpec.sStartDate;
	docType = "Stock Movements";
	subTotalCost = 0;

	While(LoopKey("TransDate",SMr,1,TrHs)) begin
		testf = true;
		if (SMr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (SMr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=SMr.FrLocation and location!=SMr.ToLocation)) then begin testf = false; end;
		
		if (testf) then begin
			
			rwcnt = MatRowCnt(SMr);
			cost = 0;
			cost2= 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SMr,i,SMrw);
				cost = cost - SMrw.OldPrice;
				cost2 = cost2 +	SMrw.NewPrice;	
			end;
			if (location==SMr.FrLocation or blank(location)) then begin
				CurValToOtherCur(SMr.TransDate,SMr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 			
				OutString(0,0,SMr.FrLocation,false);				
				OutString(90,0,docType,false);	
				OutStringID(180,"DblStockMovVcOpen",SMr.SerNr,false,SMr.SerNr);			
				OutString(250,0,SMr.TransDate,false);	
				OutString(300,0,costPLN,false);
				subTotalCost = subTotalCost + costPLN;
				if (blank(location)) then begin EndFormat; end;
			end;
			if (location==SMr.ToLocation or blank(location)) then begin	
				CurValToOtherCur(SMr.TransDate,SMr.CurncyCode,cost2,"PLN",costPLN,DefaultCurRoundOff); 			
				OutString(0,0,SMr.ToLocation,false);				
				OutString(90,0,docType,false);	
				OutStringID(180,"DblStockMovVcOpen",SMr.SerNr,false,SMr.SerNr);	
				OutString(250,0,SMr.TransDate,false);	
				OutString(300,0,costPLN,false);
				subTotalCost = subTotalCost + costPLN;
			end;			
			
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);	
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	EndFormat;
	

//-------------------------------------------------------SHVc------------------------------------------------		
	TrHs = true;
	SHr.ShipDate = RepSpec.sStartDate;
	docType = "Deliveries";
	subTotalCost = 0;

	While(LoopKey("ShipDate",SHr,1,TrHs)) begin
		testf = true;
		if (SHr.ShipDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (SHr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=SHr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(SHr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SHr,i,SHrw);
				cost = cost - SHrw.BasePrice*SHrw.Ship;
			end;
			costPLN = cost;
			if (SHr.CurncyCode != "PLN") then begin
				CurValToOtherCur(SHr.ShipDate,SHr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 
			end;						
			OutString(0,0,SHr.Location,false);				
			OutString(90,0,docType,false);	
			//OutString(180,0,SHr.SerNr,false);
			OutStringID(180,"DblSHVcOpen",SHr.SerNr,false,SHr.SerNr);					
			OutString(250,0,SHr.ShipDate,false);	
			OutString(300,0,costPLN,false);
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);	
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	EndFormat;
	

//-------------------------------------------------------RetVc------------------------------------------------		
	TrHs = true;
	Retr.TransDate = RepSpec.sStartDate;
	docType = "Returned Goods";
	subTotalCost = 0;

	While(LoopKey("TransDate",Retr,1,TrHs)) begin
		testf = true;
		if (Retr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (Retr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=Retr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(Retr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(Retr,i,Retrw);
				cost = cost + Retrw.CostPrice*Retrw.Quant;
			end;
			costPLN = cost;
			if (Retr.CurncyCode != "PLN") then begin
				CurValToOtherCur(Retr.TransDate,Retr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 
			end;					
			OutString(0,0,Retr.Location,false);				
			OutString(90,0,docType,false);	
			//OutString(180,0,Retr.SerNr,false);
			OutStringID(180,"DblRetVcOpen",Retr.SerNr,false,Retr.SerNr);					
			OutString(250,0,Retr.TransDate,false);	
			OutString(300,0,costPLN,false);
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);	
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	EndFormat;			
	
	
//-------------------------------------------------------RetPUVc------------------------------------------------	
	TrHs = true;
	RetPUr.TransDate = RepSpec.sStartDate;
	docType = "Returned Goods to Supp.";

	While(LoopKey("TransDate",RetPUr,1,TrHs)) begin
		testf = true;
		if (RetPUr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (RetPUr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=RetPUr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			costPLN = RetPUr.SumCostPrice;
			if (RetPUr.CurncyCode != "PLN") then begin
				CurValToOtherCur(RetPUr.TransDate,RetPUr.CurncyCode,RetPUr.SumCostPrice,"PLN",costPLN,DefaultCurRoundOff); 
			end;		
			OutString(0,0,RetPUr.Location,false);				
			OutString(90,0,docType,false);	
			//OutString(180,0,RetPUr.SerNr,false);
			OutStringID(180,"DblRetPUVcOpen",RetPUr.SerNr,false,RetPUr.SerNr);					
			OutString(250,0,RetPUr.TransDate,false);	
			OutString(300,0,costPLN,false);			
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;		
	EndFormat;
	
	
//-------------------------------------------------------IVVc------------------------------------------------	
	TrHs = true;
	IVr.TransDate = RepSpec.sStartDate;
	docType = "Invoices";

	While(LoopKey("TransDate",IVr,1,TrHs)) begin
		testf = true;
		if (IVr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (IVr.OKFlag==0  or IVr.UpdStockFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=IVr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(IVr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(IVr,i,IVrw);
				cost = cost - IVrw.BasePrice*IVrw.Quant;
			end;
			costPLN = cost;
			if (IVr.CurncyCode != "PLN") then begin
				CurValToOtherCur(IVr.TransDate,IVr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 
			end;						
			OutString(0,0,IVr.Location,false);				
			OutString(90,0,docType,false);	
			//OutString(180,0,IVr.SerNr,false);
			OutStringID(180,"DblIVVcOpen",IVr.OfficialSerNr,false,IVr.SerNr);					
			OutString(250,0,IVr.TransDate,false);	
			OutString(300,0,costPLN,false);			
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);
	OutString(300,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;		
	EndFormat;
	
	Black_Divider(0,1);
	OutString(2500,0,"Total cost: ",false);	
	OutString(300,0,TotalCost,false);			
	EndFormat;				
	
	
	
	
	EndJob;

return;
end;