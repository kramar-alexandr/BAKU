remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
remote procedure GetBaseCurncy(Integer,var string);
external procedure ExtractObj(string,var Integer,var string);
external function longint DateDiff(date,date);
remote procedure ItemStockStatExtWebRn(record RcVc,var area,string);
remote procedure SalesReportExtPictRn(record RcVc,var area,string);
external procedure GetUserName(string,var string);
//Edit---------------Vitalii 16:23 21.05.2015
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure YcToStr(Integer,var string);
external function Boolean CorspTRTest(record TRVc,record AccVc,Integer,var val,var val);


//SetLangMode(LangRussian,"RUS",0); //Edit***************************Sasha2,17:21 11.12.2014

/*
///////Перенесено в файл  MiddleInvoiceRn.hal ---------Dima  09.12.2014
global procedure MiddleInvoiceRn(record RcVc RepSpec)
begin
	record IVVc IVr;
	row IVVc IVrw;
	integer i,mtrw;
	boolean TrHs,testf,first;
	string 50 key;
	integer fl;
	record CYBlock CYb;
	val day,total,dayqty,totalqty;
	integer invday,invtotal;
	date curdat;
	val fr,to1,to2,br1,br2,ivfr,ivto;
  string 20 curncy;
	Array string 50 acrncy;// Edit ************************** Tuesday, 19 March 2013 15:48:06
  Array Boolean achangecrncyf;// Edit ************************** Tuesday, 19 March 2013 15:48:52
  Integer acrncnt;// Edit ************************** Tuesday, 19 March 2013 15:48:51

	CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);// Edit ************************** Wednesday, 19 June 2013 13:59:15
	curncy = acrncy[0];// Edit ************************** Wednesday, 19 June 2013 13:59:14


	blockload(CYb);

	startreportnoheaderjob(USetStr(31117));

	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,USetStr(31101),false);
		outstring(150,0,RepSpec.sStartDate & USetStr(31116) & RepSpec.sEndDate,false);
	endformat;
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,getyear(RepSpec.sStartDate),false);
		outstring(50,0,"",false);
		outstring(100,0,CYb.BusinessName,false);
		outstring(150,0,RepSpec.f1,false);
		outstring(190,0,USetStr(31118),false);
		if(nonblank(RepSpec.f2))then begin
			outstring(240,0,RepSpec.f2,false);
			outstring(300,0,USetStr(31119),false);
		end;
	endformat;
	black_divider(0,1);
	startformat(15);
	endformat;
	startformat(15);//Edit -----Dima-----------09.12.2014
		outstring(0,0,USetStr(31120),false);	//date
		outstring(50,0,USetStr(31121),false);	//quantity of receipts
		outstring(120,0,USetStr(31122),false);	//in total
		outstring(170,0,USetStr(31123),false);	//check's average cost
		outstring(240,0,USetStr(31124),false);	//total quantity per day
	endformat;
	startformat(15);
	endformat;

	key = "TransDate";
	fl = 1;
	if(nonblank(RepSpec.f1))then begin
		key = "MachineName";
		IVr.MachineName = RepSpec.f1;
		fl = 2;
	end;

	IVr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	curdat = stringtodate("1/1/2000");
	day = 0;
	dayqty = 0;
	total = 0;
	totalqty = 0;
	invday = 0;
	invtotal = 0;
	first = true;
	while(loopkey(key,IVr,fl,TrHs))begin
		if(first)then begin
			curdat = IVr.TransDate;
			first = false;
		end;
		if(curdat!=IVr.TransDate and invday>0)then begin
			startformat(15);
				outstring(0,0,curdat,false);
				outstring(50,0,invday,false);
				outstring(120,0,day,false);
				outstring(170,0,day/invday,false);
				outstring(240,0,dayqty,false);
			endformat;
			invday = 0;
			day = 0;
			dayqty = 0;
			curdat = IVr.TransDate;
		end;
		testf = true;
		if(IVr.TransDate<RepSpec.sStartDate or IVr.TransDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
		if(nonblank(RepSpec.f1) and IVr.MachineName!=RepSpec.f1)then begin
			testf = false;
			if(key=="MachineName")then begin
				TrHs = false;
			end;
		end;
		if(nonblank(RepSpec.f2) and RepSpec.f2!=IVr.SalesMan)then begin testf = false; end;
		if(IVr.OKFlag==0)then begin testf = false; end;
		if(IVr.Invalid==1)then begin testf = false; end;
		//if(IVr.Sum4<0)then begin testf = false; end;

		if(testf)then begin
			ivfr = 1; ivto = 1;
			fr = 1; to1 = 1;
			if(IVr.CurncyCode!=curncy)then begin
				ivfr = IVr.FrRate;
				ivto = IVr.ToRateB1;
				if(ivfr==0 or ivto==0)then begin
					ivfr = 1;	ivto = 1;
				end;
				GetFullCurncyRate(curncy,IVr.TransDate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr = 1;	to1 = 1;
				end;
			end;
			invday = invday + 1;
			invtotal = invtotal + 1;
			day = day + IVr.Sum4/ivfr*ivto*fr/to1;

			mtrw = matrowcnt(IVr);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(IVr,i,IVrw);
	  		if(IVrw.stp==kInvoiceRowTypeNormal and IVrw.Quant!=0)then begin
	  			dayqty = dayqty + 1;
	  			totalqty = totalqty + 1;
	  		end;
			end;

			total = total + IVr.Sum4/ivfr*ivto*fr/to1;
		end;
	end;
	if(invday>0)then begin
		startformat(15);
			outstring(0,0,curdat,false);
			outstring(50,0,invday,false);
			outstring(120,0,day,false);
			outstring(170,0,day/invday,false);
			outstring(240,0,dayqty,false);
		endformat;
		invday = 0;
		day = 0;
		dayqty = 0;
		curdat = IVr.TransDate;
	end;
	gray_divider(0,1);
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,"Всего:",false);
		outstring(50,0,invtotal,false);
		outstring(120,0,total,false);
		outstring(170,0,total/invtotal,false);
		outstring(240,0,totalqty,false);
	endformat;

	endjob;

return;
end;//////////////////////////////////Перенесено в файл  MiddleInvoiceRn.hal ---------Dima  09.12.2014/
*/

global procedure MiddleInvoiceOrderRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record ORVc ORr;
  row ORVc ORrw;
  integer i,mtrw;
  boolean TrHs,testf,first;
  string 50 key;
  integer fl;
  record CYBlock CYb;
  val day,total,dayqty,totalqty;
  integer invday,invtotal;
  date curdat;
  val fr,to1,to2,br1,br2,ivfr,ivto;
  string 20 curncy;
  Array string 50 acrncy;// Edit ************************** Tuesday, 19 March 2013 15:48:06
  Array Boolean achangecrncyf;// Edit ************************** Tuesday, 19 March 2013 15:48:52
  Integer acrncnt;// Edit ************************** Tuesday, 19 March 2013 15:48:51

	CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);// Edit ************************** Wednesday, 19 June 2013 13:59:15
	curncy = acrncy[0];// Edit ************************** Wednesday, 19 June 2013 13:59:14


	blockload(CYb);

	startreportnoheaderjob(USetStr(31167));

	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,USetStr(31102),false);
		outstring(150,0,RepSpec.sStartDate & ":" & RepSpec.sEndDate,false);
	endformat;
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,getyear(RepSpec.sStartDate),false);
		outstring(50,0,"",false);
		outstring(100,0,CYb.BusinessName,false);
		outstring(150,0,RepSpec.f1,false);
		outstring(190,0,USetStr(31218),false);
		if(nonblank(RepSpec.f2))then begin
			outstring(240,0,RepSpec.f2,false);
			outstring(300,0,USetStr(31219),false);
		end;
	endformat;
	black_divider(0,1);
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,USetStr(31220),false);
		outstring(50,0,USetStr(31221),false);
		outstring(120,0,USetStr(31222),false);
		outstring(170,0,USetStr(31223),false);
		outstring(240,0,USetStr(31224),false);
	endformat;
	startformat(15);
	endformat;

	key = "OrdDate";
	fl = 1;
	/*
	if(nonblank(RepSpec.f1))then begin
		key = "MachineName";
		IVr.MachineName = RepSpec.f1;
		fl = 2;
	end;
	*/


	ORr.OrdDate = RepSpec.sStartDate;
	TrHs = true;
	curdat = stringtodate("1/1/2000");
	day = 0;
	dayqty = 0;
	total = 0;
	totalqty = 0;
	invday = 0;
	invtotal = 0;
	first = true;
	while(loopkey(key,ORr,fl,TrHs))begin
		if(first)then begin
			curdat = ORr.OrdDate;
			first = false;
		end;
		if(curdat!=ORr.OrdDate and invday>0)then begin
			startformat(15);
				outstring(0,0,curdat,false);
				outstring(50,0,invday,false);
				outstring(120,0,day,false);
				outstring(170,0,day/invday,false);
				outstring(240,0,dayqty,false);
			endformat;
			invday = 0;
			day = 0;
			dayqty = 0;
			curdat = ORr.OrdDate;
		end;
		testf = true;
		if(ORr.OrdDate<RepSpec.sStartDate or ORr.OrdDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
		if(nonblank(RepSpec.f1) and ORr.LocalMachineCode!=RepSpec.f1)then begin testf = false; end;
		if(nonblank(RepSpec.f3) and ORr.Location!=RepSpec.f3)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and RepSpec.f2!=ORr.SalesMan)then begin testf = false; end;
		if(ORr.OKFlag==0)then begin testf = false; end;

		if(testf)then begin
			ivfr = 1; ivto = 1;
			fr = 1; to1 = 1;
			if(ORr.CurncyCode!=curncy)then begin
				ivfr = ORr.FrRate;
				ivto = ORr.ToRateB1;
				if(ivfr==0 or ivto==0)then begin
					ivfr = 1;	ivto = 1;
				end;
				GetFullCurncyRate(curncy,ORr.OrdDate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr = 1;	to1 = 1;
				end;
			end;
			invday = invday + 1;
			invtotal = invtotal + 1;
			day = day + ORr.Sum4/ivfr*ivto*fr/to1;

			mtrw = matrowcnt(ORr);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(ORr,i,ORrw);
	  		//if(IVrw.stp==kInvoiceRowTypeNormal and IVrw.Quant!=0)then begin
	  		if(nonblank(ORrw.ArtCode) and ORrw.Quant!=0 /*and ORrw.Sum!=0*/)then begin
	  			dayqty = dayqty + ORrw.Quant;
	  			totalqty = totalqty + ORrw.Quant;
	  		end;
			end;

			total = total + ORr.Sum4/ivfr*ivto*fr/to1;
		end;
	end;
	if(invday>0)then begin
		startformat(15);
			outstring(0,0,curdat,false);
			outstring(50,0,invday,false);
			outstring(120,0,day,false);
			outstring(170,0,day/invday,false);
			outstring(240,0,dayqty,false);
		endformat;
		invday = 0;
		day = 0;
		dayqty = 0;
		curdat = ORr.OrdDate;
	end;
	gray_divider(0,1);
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,USetStr(31211),false);
		outstring(50,0,invtotal,false);
		outstring(120,0,total,false);
		outstring(170,0,total/invtotal,false);
		outstring(240,0,totalqty,false);
	endformat;

	endjob;

return;
end;

global procedure StockMovPricingRn(record RcVc RepSpec)
begin
	record StockMovVc SMr,SM2r;
	row StockMovVc SMrw,SM2rw;
	integer i,mtrw,k,smmtrw;
	record PLDefVc PLDr;
	record PLVc PLr;
	string 20 curcode,curdef,basecur;
	val totqty,totsumb1;
	boolean curfoundf;
	val fr,to1,to2,br1,br2;
	Array string 50 acrncy;
  Array Boolean achangecrncyf;
  Integer acrncnt;

	totqty = 0;
	recordnew(SM2r);
	startreportnoheaderjob(USetStr(31166));
		startformat(15);
			outstring(0,0,USetStr(31231),false);
			outstring(150,0,USetStr(31204),false);
			outstring(300,0,USetStr(31165) & " RRP",true);
			outstring(320,0,USetStr(31121),false);
			outstring(400,0,USetStr(31122),true);
			outstring(1,0,USetStr(31164) &" RRP",true);
		endformat;
	PLDr.Code = "RRP";
	readfirstmain(PLDr,1,true);
	curcode = PLDr.CurncyCode;
	curdef = curcode;
	SMr.SerNr = RepSpec.long1;
	if(readfirstmain(SMr,1,true))then begin
		mtrw = matrowcnt(SMr);
		if(mtrw>0)then begin
			for(i=0;i<mtrw;i=i+1)begin
				matrowget(SMr,i,SMrw);
				curcode = curdef;
				PLr.ArtCode = SMrw.ArtCode;
				PLr.PLCode = "RRP";
				PLr.SerialNr = SMrw.SerialNr;
				readfirstkey("SerialNr",PLr,3,true);
				if(nonblank(PLr.CurncyCode))then begin
					curcode = PLr.CurncyCode;
				end;
				startformat(15);
					outstring(0,0,SMrw.ArtCode,false);
					outstring(150,0,SMrw.Spec,false);
					outstring(300,0,PLr.ExVatPrice,true);
					outstring(320,0,SMrw.OrdQuant,false);
					outstring(400,0,SMrw.OrdQuant*PLr.ExVatPrice,true);
					outstring(1,0,curcode,true);
				endformat;
				totqty = totqty + SMrw.OrdQuant;
				GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr=1; to1=1;
				end;
				totsumb1 = totsumb1 + SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
				smmtrw = matrowcnt(SM2r);
				if(smmtrw>0)then begin
					curfoundf = false;
					For(k=0;k<smmtrw;k=k+1) begin
						matrowget(SM2r,k,SM2rw);
	  				if(SM2rw.ArtCode==curcode)then begin
	  					SM2rw.OldPrice = SM2rw.OldPrice + SMrw.OrdQuant*PLr.ExVatPrice;
							SM2rw.NewPrice = SM2rw.NewPrice + SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
	  					curfoundf = true;
	  					matrowput(SM2r,k,SM2rw);
	  				end;
					end;
					if(curfoundf==false)then begin
	  				SM2rw.ArtCode = curcode;
						SM2rw.OldPrice = SMrw.OrdQuant*PLr.ExVatPrice;
						SM2rw.NewPrice = SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
						matrowput(SM2r,smmtrw,SM2rw);
					end;

				end else begin
					SM2rw.ArtCode = curcode;
					SM2rw.OldPrice = SMrw.OrdQuant*PLr.ExVatPrice;
					SM2rw.NewPrice = SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
					matrowput(SM2r,0,SM2rw);
				end;
			end;
		end;
	end;

	if(totqty<>0)then begin
		Black_Divider(320,1);
		startformat(15);
			outstring(300,0,USetStr(31074),true);
			outstring(320,0,totqty,false);
		endformat;
		smmtrw = matrowcnt(SM2r);
		if(smmtrw>0)then begin
			Gray_Divider(0,1);
			startformat(15);
				outstring(400,0,USetStr(31076),true);
				outstring(1,0,USetStr(31164),true);
			endformat;
			For(k=0;k<smmtrw;k=k+1) begin
				matrowget(SM2r,k,SM2rw);
				startformat(15);
					outstring(400,0,SM2rw.OldPrice,true);
					outstring(1,0,SM2rw.ArtCode,true);
				endformat;
			end;

		end;
		GetBaseCurncy(1,basecur);
		startformat(15);
			outstring(1,0,USetStr(31163) & basecur,true);
		endformat;
		startformat(15);
			outstring(1,0,totsumb1,true);
		endformat;

		CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
		if(acrncnt>1)then begin
			Gray_Divider(300,1);
			startformat(15);
				outstring(1,0,USetStr(31162),true);
			endformat;
			For(i=1;i<acrncnt;i=i+1) begin
				GetFullCurncyRate(acrncy[i],currentdate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr=1; to1=1;
				end;
	  		startformat(15);
					outstring(400,0,totsumb1*fr/to1,true);
					outstring(1,0,acrncy[i],true);
				endformat;
			end;
		end;
	end;

	endjob;

return;
end;


global procedure StockMovSumCostRn(record RcVc RepSpec)
begin
	record StockMovVc SMr,SM2r;
	row StockMovVc SMrw,SM2rw;
	integer i,mtrw,k,smmtrw;
	record PLDefVc PLDr;
	record PLVc PLr;
	string 20 curcode,curdef,basecur;
	val totqty,totsumb1;
	boolean curfoundf;
	val fr,to1,to2,br1,br2;
	Array string 50 acrncy;
  Array Boolean achangecrncyf;
  Integer acrncnt;

	totqty = 0;
	startreportnoheaderjob(USetStr(31161));
		startformat(15);
			outstring(0,0,USetStr(31231),false);
			outstring(100,0,USetStr(31204),false);
			outstring(300,0,USetStr(31160),true);
			outstring(320,0,USetStr(31121),false);
			outstring(400,0,USetStr(31122),true);
		endformat;
	SMr.SerNr = RepSpec.long1;
	if(readfirstmain(SMr,1,true))then begin
		mtrw = matrowcnt(SMr);
		if(mtrw>0)then begin
			for(i=0;i<mtrw;i=i+1)begin
				matrowget(SMr,i,SMrw);
				startformat(15);
					outstring(0,0,SMrw.ArtCode,false);
					outstring(100,0,SMrw.Spec,false);
					outstring(300,0,SMrw.NewPrice,true);
					outstring(320,0,SMrw.OrdQuant,false);
					outstring(400,0,SMrw.OrdQuant*SMrw.NewPrice,true);
				endformat;
				totqty = totqty + SMrw.OrdQuant;
				totsumb1 = totsumb1 + SMrw.OrdQuant*SMrw.NewPrice;
			end;
		end;
	end;

	if(totqty<>0)then begin
		Black_Divider(320,1);
		startformat(15);
			outstring(300,0,USetStr(31211),true);
			outstring(320,0,totqty,false);
			outstring(400,0,totsumb1,true);
		endformat;
	end;

	endjob;

return;
end;


function longint FindIHReference(var longint source,string artcode)
begin
	record ItemHistVc IHr;
	boolean testf;
	longint res;
	integer counter;

	res = -1;
	counter = 0;
	testf = true;
	IHr.SerNr = source;
	while(readfirstmain(IHr,1,true) and testf)begin
		if(IHr.FileName=="PUVc")then begin
			res = IHr.SerNr;
			goto LFindIHReference;
			testf = false;
		end else begin
			IHr.SerNr = IHr.Source;
		end;
		if(IHr.ArtCode!=artcode)then begin
			testf = false;
		end;
		if(counter>20)then begin
			testf = false;
		end;
		counter = counter + 1;
	end;

LFindIHReference:;
	FindIHReference = res;
return;
end;

global procedure ConsignationReportRn(record RcVc RepSpec)
begin
	record INConsVc INCr;
	record ItemStatusVc ISr;
	record ItemHistVc IHr,IH2r;
	integer pos;
	string 255 class;
	record DIVc DIr;
	record INVc INr;
	boolean TrHs,testf,TrHs1,testf1;
	val totqty,selqty,retqty,prosroch;

	startreportnoheaderjob(USetStr(31159));

		startformat(15);
			outstring(0,0,USetStr(31231),false);
			outstring(50,0,USetStr(31204),false);
			outstring(200,0,USetStr(31044),false);
			outstring(250,0,USetStr(31105),false);
			outstring(320,0,USetStr(31150),false);
			outstring(1,0,USetStr(31158),true);
		endformat;

		black_divider(0,1);
		if(nonblank(RepSpec.f1))then begin
			INCr.Code = RepSpec.f1;
		end else begin
			INCr.Code = "";
		end;
		TrHs = true;
		While(loopmain(INCr,1,TrHs)) begin
			testf = true;

			if(nonblank(RepSpec.f1) and INCr.Code!=RepSpec.f1)then begin TrHs=false; testf = false; end;

			if(nonblank(RepSpec.f2))then begin
				INr.Code = INCr.Code;
				readfirstmain(INr,1,true);
				pos = 0;
				ExtractObj(INr.DispGroups,pos,class);
				if(class!=RepSpec.f2)then begin
					testf = false;
				end;
			end;
			if(testf)then begin
				ISr.Code = INCr.Code;
				ISr.Location = ";;;";
				if(readfirstmain(ISr,2,true))then begin
					INr.Code = INCr.Code;
					readfirstmain(INr,1,true);
					startformat(15);
						outstring(0,0,INCr.Code,false);
						outstring(50,0,INCr.Name,false);
						pos = 0;
						ExtractObj(INr.DispGroups,pos,class);
						DIr.Code = class;
						readfirstmain(DIr,1,true);
						outstring(200,0,DIr.Name,false);
						ExtractObj(INr.DispGroups,pos,class);
						DIr.Code = class;
						readfirstmain(DIr,1,true);
						outstring(250,0,DIr.Name,false);
						outstring(320,0,ISr.Instock,false);
						outstring(1,0,INCr.Days,true);
					endformat;
					Gray_divider(0,1);
					startformat(15);
						outstring(80,0,USetStr(31157) & " №",true);
						outstring(100,0,USetStr(31156),false);
						outstring(160,0,USetStr(31121),false);
					endformat;
					IHr.ArtCode = INr.Code;
					IHr.FileName = "PUVc";
					TrHs1 = true;
					totqty = 0;
					prosroch = 0;
					while(loopkey("FNArtCode",IHr,2,TrHs1))begin
						testf1 = true;
						if(IHr.ArtCode!=INr.Code or IHr.FileName!="PUVc")then begin testf1=false; TrHs1 = false; end;
						if(IHr.Invalid>0)then begin testf=false; end;

						if(testf1)then begin
							startformat(15);
								outstring(80,0,IHr.TransNr,true);
								outstring(100,0,IHr.TransDate,false);
								outstring(160,0,IHr.Qty,false);
							endformat;
							totqty = totqty + IHr.Qty;
							selqty = 0;
							retqty = 0;
							IH2r.ArtCode = IHr.ArtCode;
							While(loopkey("ArtCode",IH2r,1,true) and IH2r.ArtCode==IHr.ArtCode) begin
								if(IH2r.Source>0 and FindIHReference(IH2r.Source,IH2r.ArtCode)>0)then begin
									if(IH2r.FileName=="IVVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31155) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										selqty = selqty + IH2r.Qty;
									end;
									if(IH2r.FileName=="SHVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31154) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										selqty = selqty + IH2r.Qty;
									end;
									if(IH2r.FileName=="SDVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31153) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										retqty = retqty + IH2r.Qty;
									end;
									if(IH2r.FileName=="RetVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31111) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										retqty = retqty + IH2r.Qty;
									end;
								end;
							end;
							resetloop(IH2r);
							if(selqty<>0 or retqty<>0)then begin
								gray_divider(250,350);
							end;
							if(selqty<>0)then begin
								startformat(15);
									outstring(250,0,USetStr(31152),true);
									outstring(330,0,-selqty,false);
								endformat;
							end;
							if(retqty<>0)then begin
								startformat(15);
									outstring(250,0,USetStr(31151),true);
									outstring(330,0,-retqty,false);
								endformat;
							end;
							startformat(15);
								outstring(250,0,USetStr(31150),true);
								outstring(330,0,IHr.Qty + selqty + retqty,false);
							endformat;
							if((IHr.Qty + retqty)>0)then begin
								startformat(15);
									outstring(1,0,USetStr(31149),true);
								endformat;
								startformat(15);
									outstring(400,0,USetStr(31121),false);
									outstring(1,0,USetStr(31148),true);
								endformat;
								startformat(15);
									outstring(400,0,IHr.Qty + retqty,false);
									outstring(1,0,datediff(currentdate,IHr.TransDate),true);
								endformat;
								if(datediff(currentdate,IHr.TransDate)>0)then begin
									prosroch = prosroch + IHr.Qty + retqty;
								end;
							end;
						end;
					end;
					resetloop(IHr);
					gray_divider(100,1);
					startformat(15);
						outstring(100,0,USetStr(31211),false);
						outstring(160,0,totqty,false);
						outstring(390,0,USetStr(31147),true);
						outstring(400,0,prosroch,false);
					endformat;
					black_divider(0,1);
				end;
			end;
		end;

	endjob;

return;
end;


global  procedure OstatkiSKartinkamiRn(record RcVc RepSpec)
begin
	record INVc INr;
	string 255 res;
	record Attach2Vc Attachr;
	record RLinkVc RLr;
	string 255 uid;
	longint lenth;
	area attach,attachnew,webpage1;
	string 255 filename,tstr;
	string 20 rowcolor,pricecolor;
	record ItemStatusVc ISr;
	boolean filefind;
	integer wn;
	//record RcVc RepSpec;
	string 255 serverip;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	integer mtrw,i;
	boolean userlocation;
	record UserVc User;
	integer pos;
	string 50 uloc,location,compfolder;
	record ProgramStatusBlock PSb;

	/*blockload(PSb);
	blockload(Cb);

	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;*/
	serverip = RepSpec.f6;
	//setcompany(3,false);
	/*wn = curwindow;
	deselectwindow(wn,true);
	getwindowrecord(wn,RepSpec);*/

	location = RepSpec.f2;
	userlocation = false;

	if(userlocation)then begin
		messagebox(0,USetStr(31014));
  end else begin
		if(false)then begin
			Messagebox(0,USetStr(31145));
		end else begin
			closewindow(wn);
			if(right(RepSpec.ObjStr,5)==".html" or right(RepSpec.ObjStr,4)==".htm")then begin
				filename = RepSpec.ObjStr;
			end else begin
				filename = RepSpec.ObjStr & ".html";
			end;
			//createfile(filename);
			//closefile;

			setareazerosize(webpage1);
			ItemStockStatExtWebRn(RepSpec,webpage1,serverip);
			writeareatofile(webpage1,filename,0);

			messagebox(0,USetStr(31146));
		end;
	end;
end;

global  procedure ProdajiSKartinkamiRn(record RcVc RepSpec)
begin
	record INVc INr;
	string 255 res;
	record Attach2Vc Attachr;
	record RLinkVc RLr;
	string 255 uid;
	longint lenth;
	area attach,attachnew,webpage1;
	string 255 filename,tstr;
	string 20 rowcolor,pricecolor;
	record ItemStatusVc ISr;
	boolean filefind;
	integer wn;
	//record RcVc RepSpec;
	string 255 serverip;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	integer mtrw,i;
	boolean userlocation;
	record UserVc User;
	integer pos;
	string 50 uloc,location,compfolder;
	record ProgramStatusBlock PSb;
	longint alenth;
	string 255 res1;

	blockload(PSb);
	blockload(Cb);

	/*compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;*/
	serverip = RepSpec.f6;
	//messagebox(0,serverip);
	//logtext(0,serverip);
	//setcompany(3,false);
	/*wn = curwindow;
	deselectwindow(wn,true);
	selectwindow(wn);
	getwindowrecord(wn,RepSpec);*/

	location = RepSpec.f2;
	userlocation = false;

	//setexportcodepage("CP1251");

	if(userlocation)then begin
		Messagebox(0,USetStr(31014));
  end else begin
		if(false)then begin
			Messagebox(0,USetStr(31145));
		end else begin
			closewindow(wn);
			if(right(RepSpec.ObjStr,5)==".html" or right(RepSpec.ObjStr,4)==".htm")then begin
				filename = RepSpec.ObjStr;
			end else begin
				filename = RepSpec.ObjStr & ".html";
			end;
			//createfile(filename);
			//closefile;

			//setareazerosize(webpage1);
			SalesReportExtPictRn(RepSpec,webpage1,serverip);
			//writeareatofile(webpage1,filename,0);
			//weboutarea(webpage1);
			messagebox(0,USetStr(31146));
		end;
	end;
end;

global
function string 60 SalesWithImagesRClassDefaultFileName(record RcVc RepSpec)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;

  res = "SalesWithImages.html";
  SalesWithImagesRClassDefaultFileName = res;
  return;
end;

global
procedure SalesWithImagesRClassOnOpenWindow(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);

	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;
  putwindowrecord(wn,RepSpec);

  return;
end;

global
procedure SalesWithImagesRClassReportDefaults(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);
	reportdefaults(RepSpec,"SalesWithImagesRClass");
	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;

  putwindowrecord(wn,RepSpec);

  return;
end;

global
function string 60 ItemStockStatExtWebRClassDefaultFileName(record RcVc RepSpec)
begin
	string 60 res;

  res = "OstatkiWithImages.html";;
  ItemStockStatExtWebRClassDefaultFileName = res;
  return;
end;


global
procedure ItemStockStatExtWebRClassOnOpenWindow(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);

	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;
  putwindowrecord(wn,RepSpec);

  return;
end;

global
procedure ItemStockStatExtWebRClassReportDefaults(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);
	reportdefaults(RepSpec,"ItemStockStatExtWebRClass");
	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;

  putwindowrecord(wn,RepSpec);

  return;
end;


global procedure TestRn(record RcVc RepSpec)
begin
	record POVc POr;
	row POVc POrw;
	integer i,mtrw;
	record INVc INr;


	startreportnoheaderjob("test");

	startformat(15);
		outstring(0,0,"PO",false);
		outstring(50,0,"rw",false);
		outstring(100,0,"Art",false);
		outstring(150,0,"Unit1",false);
		outstring(200,0,"Unit2",false);
	endformat;

	POr.SerNr = "";
	while(loopmain(POr,1,true))begin
		mtrw = matrowcnt(POr);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(POr,i,POrw);
			INr.Code = POrw.ArtCode;
			readfirstmain(INr,1,true);
			If(INr.Unittext!=POrw.UnitCode)then begin
				startformat(15);
					outstring(0,0,POr.SerNr,false);
					outstring(50,0,i+1,false);
					outstring(100,0,POrw.ArtCode,false);
					outstring(150,0,POrw.UnitCode,false);
					outstring(200,0,INr.Unittext,false);
				endformat;
			end;
		end;

	end;

	endjob;

return;
end;


global
procedure DblSDVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  24.02.2015
begin
  Integer wn;
  record SDVc SDr;

  SDr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(SDr,1,true)) then begin
    wn = OpenWindow("SDDClass",1,0,"","",SDr);
  end;
  return;
end;

global
procedure DblPUVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  25.02.2015
begin
  Integer wn;
  record PUVc PUr;

  PUr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(PUr,1,true)) then begin
    wn = OpenWindow("PUDClass",1,0,"","",PUr);
  end;
  return;
end;

global
procedure DblSHVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record SHVc SHr;

  SHr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(SHr,1,true)) then begin
    wn = OpenWindow("SHDClass",1,0,"","",SHr);
  end;
  return;
end;

global
procedure DblStockMovVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record StockMovVc SMr;

  SMr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(SMr,1,true)) then begin
    wn = OpenWindow("StockMovDClass",1,0,"","",SMr);
  end;
  return;
end;

global
procedure DblRetVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record RetVc Retr;

  Retr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(Retr,1,true)) then begin
    wn = OpenWindow("RetDClass",1,0,"","",Retr);
  end;
  return;
end;

global
procedure DblRetPUVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record RetPUVc Retr;

  Retr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(Retr,1,true)) then begin
    wn = OpenWindow("RetPUDClass",1,0,"","",Retr);
  end;
  return;
end;

global
procedure DblIVVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record IVVc IVr;

  IVr.SerNr = StringToLongInt(l);

  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
  end;
  return;
end;


procedure ExtractClassificationsFromINVc(string artcode,var string type, var string brand)	//Edit----------------------Dima  23.02.2015
begin
	record INVc INr;
	record DIVc DIr;
	integer pos;
	string 15 classification;

	INr.Code = artcode;
	if (ReadFirstMain(INr,1,true)) then begin

		pos = 0;
  	ExtractObj(INr.DispGroups,pos,classification);
  	while(nonblank(classification)) begin
  		DIr.Code = classification;
			if(ReadFirstMain(DIr,1,true) and (DIr.CType=="BRAND")) then begin
						brand = DIr.Name;
			end else begin
					if(ReadFirstMain(DIr,1,true) and (DIr.CType=="TYPE")) then begin
						type = DIr.Name;
					end;
			end;
  		ExtractObj(INr.DispGroups,pos,classification);
  	end;
	end;

return;
end;

procedure HeaderLocations(string a,  var string res)	//Edit----------------------Dima  23.02.2015
begin
  if (blank(a)) then begin
     res = USetStr(8961);
  end else begin
     res = USetStr(2768);
     res = res &": " & a;
  end;
return;
end;



global
procedure FoundersRn(record RcVc RepSpec)  					//Edit----------------------Dima  23.02.2015
begin
  record SDVc SDr;
  row SDVc SDrw;
  record ObjVc Objr;
  record PLVc PLr;
  integer rw,rwcnt,i,pos;
  string 200 tstr;
  string 30 objct,type,brand,founder;
  boolean testf,TrHs;
  val sum;


  StartReportJob(USetStr(31322));
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
  HeaderLocations(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
	EndHeader;

	StartFormat(15);
		OutString(0,0,USetStr(31203),false);		//ArtCode
		OutString(90,0,USetStr(12003),false);		//Type
		OutString(140,0,USetStr(31205),false);	//Brand
		OutString(200,0,USetStr(31169),false);	//Currency
		OutString(240,0,USetStr(12004),false);	//Quantity
		OutString(280,0,USetStr(31122),false);	//Sum
		OutString(320,0,USetStr(35001),false);	//Founder
		OutString(390,0,USetStr(12001),false);	//Date
		OutString(440,0,USetStr(13214),false);	//Document

	EndFormat;

	TrHs = true;
	SDr.TransDate = RepSpec.sStartDate;

	While(LoopKey("TransDate",SDr,1,TrHs))begin
		testf = true;

		if (SDr.TransDate > RepSpec.sEndDate) then begin
			testf = false;
			TrHs = false;
		end;

		if (nonblank(RepSpec.f1) and (RepSpec.f1 != SDr.Location)) then begin
			testf = false;
		end;

		if (testf) then begin
			pos = 0;
  		ExtractObj(SDr.Objects,pos,objct);
  		testf = false;
  		while(nonblank(objct)) begin
  			Objr.Code = objct;
				if(ReadFirstMain(Objr,1,true) and (Objr.OTCode=="FOUND")) then begin
						testf = true;
						founder = Objr.Comment;
						goto LBreakObjSearch4;
				end;
  			ExtractObj(SDr.Objects,pos,objct);
  		end;
			LBreakObjSearch4:;
		end;


		if(testf)  then begin

				rwcnt = MatRowCnt(SDr);

				for(i=0; i<rwcnt; i=i+1) begin
					MatRowGet(SDr,i,SDrw);
					ExtractClassificationsFromINVc(SDrw.ArtCode,type,brand);

					PLr.PLCode = "FOB17";
					PLr.ArtCode = SDrw.ArtCode;
					ReadFirstMain(PLr,2,true);
					sum = PLr.ExVatPrice * SDrw.Qty;

					StartFormat(15);
						OutString(0,0,SDrw.ArtCode,false);
						OutString(90,0,type,false);
						OutString(140,0,brand,false);
						OutString(200,0,PLr.CurncyCode,false);
						OutString(240,0,SDrw.Qty,false);
						OutVal(280,0,sum,M4Val,false);
						OutString(320,0,founder,false);
						OutString(390,0,SDr.TransDate,false);
						OutStringID(440,"DblSDVcOpen",SDr.SerNr,false,SDr.SerNr);

					EndFormat;

				end;
		end;

	end;


	EndJob;

return;
end;



global
procedure PUInvoicingRn(record RcVc RepSpec)  					//Edit----------------------------------Dima  24.02.2015
begin
	record PUVc PUr;
	row PUVc PUrw;
	record POVc POr;
	row POVc POrw;
	record VIVc VIr;
	row VIVc VIrw;

  integer rw,rwcnt,i,pos;
  boolean testf,TrHs,testf3,testf4,TrHs3;
  val PUSum,POSum,VISum;
  boolean withoutPO,foundVI;

	withoutPO=!RepSpec.flags[1];

	StartReportJob(USetStr(35003));
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
	EndHeader;

	StartFormat(15);
		OutString(0,0,USetStr(22421),false);		//Vendor
		OutString(90,0,USetStr(22419),false);		//PU Number
		OutString(140,0,USetStr(31156),false);	//Date
		OutString(220,0,USetStr(31122),false);	//Sum
		OutString(300,0,USetStr(35004),false);	//Invoiced
		OutString(400,0,USetStr(2475),false);		//Difference

	EndFormat;


	TrHs = true;
	
	PUr.TransDate = RepSpec.sStartDate;
	While(LoopKey("TransDate",PUr,1,TrHs))begin
		testf = true;

		if (PUr.TransDate > RepSpec.sEndDate) then begin
			testf = false;
			TrHs = false;
		end;

		if (nonblank(RepSpec.f1) and (RepSpec.f1 != PUr.VECode)) then begin
			testf = false;
		end;

		if (nonblank(RepSpec.f2) and (RepSpec.f2 != PUr.Location)) then begin
			testf = false;
		end;


		if (testf) then begin
				PUSum = 0;
				rwcnt = MatRowCnt(PUr);
				for(i=0;i<rwcnt;i=i+1) begin
					MatRowGet(PUr,i,PUrw);
					PUSum = PUSum + PUrw.UPrice * PUrw.Quant;
				end;

					VIr.POSerNr = PUr.PONr;
					VISum = 0;
					TrHs3 = true;

					While(LoopKey("POSerNr",VIr,1,TrHs3)) begin
							testf3 = true;

							if (VIr.TransDate > RepSpec.sEndDate  or VIr.TransDate < RepSpec.sStartDate) then begin
								testf3 = false;
							end;

				 			if (VIr.POSerNr != PUr.PONr  or VIr.POSerNr<0) then begin
								TrHs3 = false;
								testf3 = false;
							end;

							if (testf3) then begin
									foundVI = true;
									rwcnt = MatRowCnt(VIr);
									for(i=0;i<rwcnt;i=i+1) begin
										MatRowGet(VIr,i,VIrw);
											testf4 = true;

											if (VIrw.PUNr > 0  and VIrw.PUNr!=PUr.SerNr)	then begin
													goto LBreakInvLoop1;
											end;

											if (VIrw.stp == kInvoiceRowTypePrepayment) then begin testf4 = false; end;

											if(testf4) then begin
												VISum = VISum + VIrw.Sum;
											end;
									end;
							end;

							LBreakInvLoop1:;
					end;
					ResetLoop(VIr);


					//if exist PU and VI only, without PO record--------------------------------------------------------------
					//and invoices(VI) were not found previously
					
					if (withoutPO and (foundVI==false)) then begin

						VISum = 0;
						TrHs3 = true;
						VIr.TransDate = RepSpec.sStartDate;
						While(LoopKey("TransDate",VIr,1,TrHs3)) begin
								testf3 = true;

								if (VIr.TransDate > RepSpec.sEndDate) then begin
									testf3 = false;
									TrHs3 = false;
								end;

								if (testf3) then begin
									rwcnt = MatRowCnt(VIr);
									for(i=0;i<rwcnt;i=i+1) begin
										MatRowGet(VIr,i,VIrw);
											testf4 = true;

											if ((VIrw.PUNr > 0  and VIrw.PUNr!=PUr.SerNr)  or (VIrw.PUNr < 0))	then begin
													goto LBreakInvLoop2;
											end;

											if (VIrw.stp == kInvoiceRowTypePrepayment) then begin testf4 = false; end;

											if(testf4) then begin
												VISum = VISum + VIrw.Sum;
											end;
									end;
									LBreakInvLoop2:;
								end;

						end;
						ResetLoop(VIr);

					end;
					foundVI = false;

					StartFormat(15);
						OutString(0,0,PUr.VEName,false);
						OutStringID(90,"DblPUVcOpen",PUr.SerNr,false,PUr.SerNr);
						OutString(140,0,PUr.TransDate,false);
						OutVal(220,0,PUSum,M4Val,false);
						OutVal(300,0,VISum,M4Val,false);
						OutVal(400,0,PUSum-VISum,M4Val,false);

					EndFormat;


		end;


	end;


	EndJob;

return;
end;





global
procedure ExportInvoiceToExcelRn(record RcVc RepSpec)  					//Edit----------------------Dima  04.03.2015
begin
  record IVVc IVr;
  row	IVVc IVrw;
  record LocationVc Locr;
  Integer rwcnt,i,wn;
  string 255 tstr;
  val noRebSum;
  
  noRebSum=0;
  IVr.SerNr = RepSpec.long1;
  if (ReadFirstMain(IVr,1,true)) then begin	 
  
  Locr.Code = IVr.Location;
  ReadFirstMain(Locr,1,true);
   

	StartReportNoHeaderJob("ExportToExcel");
	
		StartFormat(15);
		OutString(0,0,USetStr(31024),false);
		OutString(2,0,IVr.Location,true);
		OutString(3,0,"",false);
		OutString(4,0,"",false);
		OutString(3,0,USetStr(31133),false);
		GetUserName(IVr.SalesMan,tstr);
		OutString(4,0,tstr,false);
		EndFormat;
		OutString(1,0,Locr.Addr0,true);
		EndFormat;
		OutString(1,0,Locr.Phone,true);
		EndFormat;
		OutString(0,0,USetStr(2562),false);
		OutString(1,0,IVr.SerNr,true);
		OutString(1,0,"",false);
		OutString(1,0,"",false);
		OutString(0,0,USetStr(35005),false);
		OutString(1,0,"",false);	
		OutString(1,0,IVr.CustCode,true);
		if(NonBlank(IVr.RebCode)) then begin
			OutString(1,0,"",false);
			OutString(1,0,"",false);
			OutString(1,0,USetStr(31267),false);
			OutString(1,0,IVr.RebCode,true);
		end;
		EndFormat;
		OutString(1,0,USetStr(31262),false);
		OutString(1,0,IVr.InvDate,true);	
		EndFormat;
		
		OutString(1,0,"__________________________________________________________________________________________________________________________________",false);
		EndFormat;
	  OutString(1,0,USetStr(31231),false);
	  OutString(1,0,"",false);
	  OutString(1,0,USetStr(12003),false);
	  OutString(1,0,"",false);
	  OutString(1,0,"",false);
	  OutString(1,0,"",false);
	  OutString(1,0,USetStr(12004),false);
	  OutString(1,0,"",false);
	  OutString(1,0,USetStr(12005),false);
	  OutString(1,0,USetStr(12006),false);
	  OutString(1,0,USetStr(12448),false);
	  EndFormat;
  	rwcnt=MatRowCnt(IVr); 
  	
  	for(i=0;i<rwcnt;i=i+1) begin
			MatRowGet(IVr,i,IVrw);
			if(IVrw.stp==kInvoiceRowTypeNormal) then begin
				OutString(1,0,IVrw.ArtCode,true);
				OutString(1,0,"",false);
				OutString(1,0,IVrw.Spec,true);
				OutString(1,0,"",false);
				OutString(1,0,"",false);
				OutString(1,0,"",false);
				OutString(1,0,IVrw.Quant,true);
				OutString(1,0,"",false);
				OutString(1,0,IVrw.Price,true);
				OutString(1,0,IVrw.vRebate,true);
				OutString(1,0,IVrw.Sum,true);
				EndFormat;
				noRebSum = noRebSum + IVrw.Price*IVrw.Quant;
			end;	
		end;
		OutString(1,0,"__________________________________________________________________________________________________________________________________",false);
		EndFormat;
		OutString(1,0,"",false);	
		OutString(1,0,USetStr(12867),false);
		OutString(1,0,noRebSum,true);
	  OutString(1,0,"",false);
	  
	  if (NonBlank(IVr.RebCode)) then begin
	  	OutString(1,0,USetStr(31267),false);
			OutString(1,0,IVr.RebCode,true);
	  	OutString(1,0,"",false);
	  	OutString(1,0,"",false);
		end else begin
			OutString(1,0,"",false);
			OutString(1,0,"",false);
			OutString(1,0,"",false);
			OutString(1,0,"",false);
		end;
 	  OutString(1,0,USetStr(24193) & ":",false);
		OutString(1,0,IVr.Sum4,true);
	  OutString(1,0,"",false);	
	
	EndJob;
	end;

return;
end;

//Edit---------------Vitalii 15:02 19.05.2015
global
procedure DirectorWeekRn(record RcVc RepSpec)
begin
	record MainVc mainr;
	record TRVc TRr,tempTRr,tempTRr2;
	row TRVc TRrw,tempTRrw,tempTRrw2,tempTRrw3;
	record ObjVc Objr;
	record IVVc IVr;
	record IPVc IPr;
	record CLInVc CLInr;
	row CLInVc CLInrw;
	record CLOutVc CLOutr;
	row CLOutVc CLOutrw;
	record CurncyCodeVc CCr;
	record AccVc Accr;
	array string 5 CurList;
	integer i,j,k,l,rwcnt,rwcnt2,curi;
	boolean TrHs,firstprint,testf;
	Date tempDate;
	val BeginBalance50n51, BeginBalance50n51n53, BeginBalance50AZN,
		BeginBalance50, BeginBalance51, BeginBalance53,
		BeginBalance50USD, BeginBalance50EUR,
		tempBal,
		AZNTermDeb, AZNTermCred,
		AZNDeb, AZNCred,
		EURDeb, EURCred,
		USDDeb, USDCred,
		BaseDebErr, BDEBase, BDEVal, BDEDebTemp,
		BaseDeb, BaseCred,
		BalItem1, BalItem2,
		SaldoEndPeriodAZNTerm, SaldoEndPeriod53,
		SaldoEndPeriod, SaldoEndPeriodUSD,
		SaldoEndPeriodEUR, SaldoEndPeriodAZN,
		corspdebval, corspcredval, Bal53;
	boolean BDEBaseChng, BDEValChng;
	integer tab1, tab2, tab3,
			tab4, tab5, tab6,
			tab7, tab8, tab9,
			tab10,tab11,tab12,
			tab13;
	string 5 tempStr;
	
	BeginBalance50n51 = 0;
	BeginBalance50n51n53 = 0;
	BeginBalance50AZN = 0;
	BeginBalance50 = 0;
	BeginBalance51 = 0;
	BeginBalance53 = 0;
	BeginBalance50USD = 0;
	BeginBalance50EUR = 0;
	tempBal = 0;
	BaseDebErr = 0;
	BalItem1 = 0;
	BalItem2 = 0;
	SaldoEndPeriodAZNTerm = 0;
	SaldoEndPeriod53 = 0;
	SaldoEndPeriod = 0;
	SaldoEndPeriodUSD = 0;
	SaldoEndPeriodEUR = 0;
	SaldoEndPeriodAZN = 0;
	corspdebval = 0;
	corspcredval = 0;
	Bal53 = 0;
	tab1 = 0;	 tab2 = 27;	  tab3 = 79;
	tab4 = 106;  tab5 = 133;  tab6 = 160;
	tab7 = 210;	 tab8 = 260;  tab9 = 285;
	tab10 = 310; tab11 = 330; tab12 = 380;
	tab13 = 430;
	
	curi = 0;
	while(loopmain(CCr,1,true)) begin
		CurList[curi] = CCr.CurncyCode;
		curi = curi + 1;
	end;
	
	StartReportNoHeaderJob(USetStr(35012));
	//Объект
		Objr.Code = RepSpec.ObjStr;
		ReadFirstMain(Objr,1,true);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,Objr.Code & " " & Objr.Comment,false);
		EndFormat;
		
	//Период
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,"",false);
			OutString(tab4,0,"",false);
			OutString(tab5,0,"",false);
			OutString(tab6,0,"",false);
			OutString(tab7,0,RepSpec.sStartDate & " : " & RepSpec.sEndDate,false);
		EndFormat;
	//Остаток на...
		FindNLAccBal("50",RepSpec.ObjStr,"",0,"",RepSpec.sStartDate,0,0,false,"",0,"","",BeginBalance50);
		FindNLAccBal("51",RepSpec.ObjStr,"",0,"",RepSpec.sStartDate,0,0,false,"",0,"","",BeginBalance51);
		FindNLAccBal("53",RepSpec.ObjStr,"",0,"",RepSpec.sStartDate,0,0,false,"",0,"","",BeginBalance53);
		BeginBalance50n51 = BeginBalance50 + BeginBalance51;
		BeginBalance50n51n53 = BeginBalance50n51 + BeginBalance53;
		StartFormat(15);
			OutString(tab1,0,USetStr(35015) & RepSpec.sStartDate & ":",false);
			
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35058),false);
			OutString(tab3,0,BeginBalance50n51n53,false);
			OutString(tab4,0,"AZN",false);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35057),false);
			OutString(tab3,0,BeginBalance53,false);
			OutString(tab4,0,"AZN",false);
		EndFormat;
		StartFormat(15);
		EndFormat;
	//Остаток на... по валютам
		tempBal = 0;
		for (i=0;i<curi;i=i+1) begin
			if left(CurList[i],3)=="USD" then begin
				FindNLAccBal("50",RepSpec.ObjStr,"",0,"",RepSpec.sStartDate,0,0,false,CurList[i],0,"","",tempBal);
				BeginBalance50USD = BeginBalance50USD + tempBal;
			end;
		end;
		StartFormat(15);
			OutString(tab1,0,USetStr(35015) & RepSpec.sStartDate & " " & USetStr(35016) & ":",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,BeginBalance50USD,false);
			OutString(tab4,0,"USD",false);
		EndFormat;
		tempBal = 0;
		for (i=0;i<curi;i=i+1) begin
			if left(CurList[i],3)=="EUR" then begin
				FindNLAccBal("50",RepSpec.ObjStr,"",0,"",RepSpec.sStartDate,0,0,false,CurList[i],0,"","",tempBal);
				BeginBalance50EUR = BeginBalance50EUR + tempBal;
			end;
		end;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,BeginBalance50EUR,false);
			OutString(tab4,0,"EUR",false);
		EndFormat;
		tempBal = 0;
		for (i=0;i<curi;i=i+1) begin
			if left(CurList[i],3)=="AZN" then begin
				FindNLAccBal("50",RepSpec.ObjStr,"",0,"",RepSpec.sStartDate,0,0,false,CurList[i],0,"","",tempBal);
				BeginBalance50AZN = BeginBalance50AZN + tempBal;
			end;
		end;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,BeginBalance50AZN,false);
			OutString(tab4,0,"AZN",false);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,BeginBalance51,false);
			OutString(tab4,0,USetStr(35013),false);
		EndFormat;
		StartFormat(15);
		EndFormat;
		Black_Divider(0,1);
	//Шапка таблицы
		StartFormat(15);
			OutString(tab1,0,USetStr(12001),false); //Дата
			OutString(tab2,0,"",false);
			OutString(tab3,0,"",false); 
			OutStringCut(tab4,tab5,0,USetStr(11150),true,0); // Поступления
				//OutStringCut(integer x, integer y,
				//			   integer und, string str,
				//			   boolean bool, integer ovst)
				//x    - начальная координата ячейки, в которую печатаеться начинается
				//y    - конечная координата ячейки
				//und  - подчеркивание: 0 - нет / !=0 - да
				//str  - строка для вывода
				//bool - перенос ?
				//ovst - зачеркивание: 0-нет / !=0-да
			OutString(tab5,0,"",false);
			OutString(tab6,0,"",false);
			OutString(tab7,0,"",false);
			OutString(tab8,0,"",false);
			OutStringCut(tab9,tab10,0,USetStr(10670),true,0); // Расходы
			OutString(tab10,0,"",false);
			OutString(tab11,0,"",false); //В осн. валюте
			OutStringCut(tab12+25,480,0,USetStr(31292),false,0); //Примечание
		EndFormat;
		Black_Divider(tab2,tab7-2);
		Black_Divider(tab7+2,tab13-2);
		Black_Divider(tab13+2,480);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35013),false); //AZN терминал
			OutString(tab3,0,"AZN",false); 
			OutString(tab4,0,"EUR",false);
			OutString(tab5,0,"USD",false);
			OutString(tab6,0,USetStr(35014),false); //В осн. валюте
			OutString(tab7,0,USetStr(35013),false); //AZN терминал
			OutString(tab8,0,"AZN",false);
			OutString(tab9,0,"EUR",false);
			OutString(tab10,0,"USD",false);
			OutString(tab11,0,USetStr(35014),false); //В осн. валюте
			OutString(tab12,0,USetStr(35032),false);
			OutString(tab13,0,USetStr(35033),false);
		EndFormat;
		
		mainr.AccNumber = "50";
		mainr.TransDate = RepSpec.sStartDate;
		TrHs = true;
		while (LoopMain(mainr,2,TrHs)) begin
			if ((mainr.AccNumber != "50") or (mainr.TransDate > RepSpec.sEndDate))  then begin
				TrHs = false;	
			end;
			if (TrHs) then begin
				TRr.Number = mainr.TransNr;
				TRr.IntYc = mainr.IntYc;
				if (ReadFirstMain(TRr,2,true)) then begin
					if (mainr.TransDate == TRr.TransDate) then begin
						BDEBaseChng = false;
						BDEValChng = false;
						BDEBase = 0;
						BDEVal = 0;
						BDEDebTemp = 0;
						rwcnt = MatRowCnt(TRr);
						for (i=0;i<rwcnt;i=i+1) begin
							MatRowGet(TRr,i,TRrw);
							if ((TRrw.AccNumber == "50") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
								switch (TRr.IntYc) begin
									case IVYc:
										IVr.SerNr = TRr.Number;
										if (ReadFirstMain(IVr,1,true)) then begin
											tempTRrw.Comment = USetStr(35027) & IVr.SerNr;
											tempTRrw.ExtraComment = TRr.Comment;
										end;
									case IPYc:
										IPr.SerNr = TRr.Number;
										if (ReadFirstMain(IPr,1,true)) then begin
											tempTRrw.Comment = USetStr(35028) & IPr.SerNr;
											tempTRrw.ExtraComment = TRr.Comment;
										end;
									case CLInYc:
										CLInr.SerNr = TRr.Number;
										if (ReadFirstMain(CLInr,1,true)) then begin
											tempTRrw.Comment = USetStr(35029) & CLInr.SerNr;
											rwcnt2 = MatRowCnt(CLInr);
											for (k=0;k<rwcnt2;k=k+1) begin
												MatRowGet(CLInr,k,CLInrw);
												if ((CLInrw.Sum == TRrw.CurDebVal) and ((nonblank(CLInrw.CorspCode) and nonblank(TRrw.Objects) and SetInSet(CLInrw.CorspCode,TRrw.Objects)) or (blank(CLInrw.CorspCode) and blank(TRrw.Objects)))) then begin
													tempTRrw.ExtraComment = CLInrw.Comment;
												end;
											end;
											if blank(tempTRrw.ExtraComment) then begin
												tempTRrw.ExtraComment = CLInr.CorspComment;
											end;
										end;
									case CLOutYc:
										CLOutr.SerNr = TRr.Number;
										if (ReadFirstMain(CLOutr,1,true)) then begin
											tempTRrw.Comment = USetStr(35030) & CLOutr.SerNr;
											rwcnt2 = MatRowCnt(CLOutr);
											for (k=0;k<rwcnt2;k=k+1) begin
												MatRowGet(CLOutr,k,CLOutrw);
												if ((CLOutrw.Sum == TRrw.CurCredVal) and ((nonblank(CLOutrw.CorspCode) and nonblank(TRrw.Objects) and SetInSet(CLOutrw.CorspCode,TRrw.Objects)) or (blank(CLOutrw.CorspCode) and blank(TRrw.Objects)))) then begin
													tempTRrw.ExtraComment = CLOutrw.Comment;
												end;
											end;
											if blank(tempTRrw.ExtraComment) then begin
												tempTRrw.ExtraComment = CLOutr.CorspComment;
											end;
										end;
									otherwise
										YcToStr(TRr.IntYc,tempStr);
										tempTRrw.Comment = tempStr & "." & TRr.Number;
										tempTRrw.ExtraComment = TRr.Comment;
								end;
								tempTRrw.ReconDate = mainr.TransDate;	//в столбик Дата
								tempTRrw.Curncy = TRrw.Curncy;			//валюта
								tempTRrw.CurDebVal = TRrw.CurDebVal;	//в столбики Поступления AZN/EUR/USD
								tempTRrw.CurCredVal = TRrw.CurCredVal;	//в столбики Расходы AZN/EUR/USD
								tempTRrw.DebVal = TRrw.DebVal;			//в столбик Поступления В осн. валюте
								tempTRrw.CredVal = TRrw.CredVal;		//в столбик Расходы В осн. валюте
								if ((TRrw.DebVal<>0) or (TRrw.CredVal<>0)) then begin
									BDEBaseChng = true;
									BDEBase = BDEBase + TRrw.DebVal - TRrw.CredVal;
								end;
								if ((TRrw.CurDebVal<>0) or (TRrw.CurCredVal<>0)) then begin
									BDEValChng = true;
									BDEVal = BDEVal + TRrw.CurDebVal - TRrw.CurCredVal;
								end;
								BDEDebTemp = BDEDebTemp + TRrw.DebVal;
								if ((RepSpec.ArtMode == 1) and (TRr.IntYc == IVYc) and nonblank(TRrw.DebVal)) then begin
									MatRowPut(tempTRr2,l,tempTRrw);
									l = l + 1;
								end else begin
									MatRowPut(tempTRr,j,tempTRrw);
									j = j + 1;
								end;
								tempTRrw.ReconDate = "";
								tempTRrw.Curncy = "";
								tempTRrw.CurDebVal = blankval;
								tempTRrw.CurCredVal = blankval;
								tempTRrw.DebVal = blankval;
								tempTRrw.CredVal = blankval;
								tempTRrw.Comment = "";
								tempTRrw.ExtraComment = "";
							end;
							if ((TRrw.AccNumber == "76") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects) and SetInSet("E131",TRrw.Objects)) then begin
								BalItem1 = BalItem1 + TRrw.CredVal - TRrw.DebVal;
							end;
							if ((TRrw.AccNumber == "76") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects )and SetInSet("E98",TRrw.Objects)) then begin
								BalItem2 = BalItem2 - TRrw.CredVal + TRrw.DebVal;
							end;
							if ((TRrw.AccNumber == "53") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
								Accr.AccNumber = "50";
								ReadFirstMain(Accr,1,true);
								testf = CorspTRTest(TRr,Accr,i,corspdebval,corspcredval);
								if testf then begin
									Bal53 = Bal53 + TRrw.DebVal;
								end;
							end;
							if ((TRrw.AccNumber == "51") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
								Accr.AccNumber = "50";
								ReadFirstMain(Accr,1,true);
								testf = CorspTRTest(TRr,Accr,i,corspdebval,corspcredval);
								if testf then begin
									BaseDebErr = BaseDebErr + TRrw.DebVal;
								end;
							end;
							if ((TRrw.AccNumber == "84/03") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
								Accr.AccNumber = "50";
								ReadFirstMain(Accr,1,true);
								testf = CorspTRTest(TRr,Accr,i,corspdebval,corspcredval);
								if testf then begin
									BaseDebErr = BaseDebErr + TRrw.DebVal;
								end;
							end;
						end;
						if (((BDEBase == 0) and BDEBaseChng) or ((BDEVal == 0) and BDEValChng)) then begin
							BaseDebErr = BaseDebErr + BDEDebTemp;
						end;
					end;
				end;
			end;
		end;
		ResetLoop(mainr);
		mainr.AccNumber = "51";
		mainr.TransDate = RepSpec.sStartDate;
		TrHs = true;
		while (LoopMain(mainr,2,TrHs)) begin
			if ((mainr.AccNumber != "51") or (mainr.TransDate > RepSpec.sEndDate))  then begin
				TrHs = false;	
			end;
			if (TrHs) then begin
				TRr.Number = mainr.TransNr;
				TRr.IntYc = mainr.IntYc;
				if (ReadFirstMain(TRr,2,true)) then begin
					if (mainr.TransDate == TRr.TransDate) then begin
						rwcnt = MatRowCnt(TRr);
						for (i=0;i<rwcnt;i=i+1) begin
							MatRowGet(TRr,i,TRrw);
							if ((TRrw.AccNumber == "51") and (TRrw.ovst <> 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
								switch (TRr.IntYc) begin
									case IVYc:
										IVr.SerNr = TRr.Number;
										if (ReadFirstMain(IVr,1,true)) then begin
											tempTRrw.Comment = USetStr(35027) & IVr.SerNr;
											tempTRrw.ExtraComment = TRr.Comment;
										end;
									case IPYc:
										IPr.SerNr = TRr.Number;
										if (ReadFirstMain(IPr,1,true)) then begin
											tempTRrw.Comment = USetStr(35028) & IPr.SerNr;
											tempTRrw.ExtraComment = TRr.Comment;
										end;
									case CLInYc:
										CLInr.SerNr = TRr.Number;
										if (ReadFirstMain(CLInr,1,true)) then begin
											tempTRrw.Comment = USetStr(35029) & CLInr.SerNr;
											rwcnt2 = MatRowCnt(CLInr);
											for (k=0;k<rwcnt2;k=k+1) begin
												MatRowGet(CLInr,k,CLInrw);
												if ((CLInrw.Sum == TRrw.CurDebVal) and ((nonblank(CLInrw.CorspCode) and nonblank(TRrw.Objects) and SetInSet(CLInrw.CorspCode,TRrw.Objects)) or (blank(CLInrw.CorspCode) and blank(TRrw.Objects)))) then begin
													tempTRrw.ExtraComment = CLInrw.Comment;
												end;
											end;
											if blank(tempTRrw.ExtraComment) then begin
												tempTRrw.ExtraComment = CLInr.CorspComment;
											end;
										end;
									case CLOutYc:
										CLOutr.SerNr = TRr.Number;
										if (ReadFirstMain(CLOutr,1,true)) then begin
											tempTRrw.Comment = USetStr(35030) & CLOutr.SerNr;
											rwcnt2 = MatRowCnt(CLOutr);
											for (k=0;k<rwcnt2;k=k+1) begin
												MatRowGet(CLOutr,k,CLOutrw);
												if ((CLOutrw.Sum == TRrw.CurCredVal) and ((nonblank(CLOutrw.CorspCode) and nonblank(TRrw.Objects) and SetInSet(CLOutrw.CorspCode,TRrw.Objects)) or (blank(CLOutrw.CorspCode) and blank(TRrw.Objects)))) then begin
													tempTRrw.ExtraComment = CLOutrw.Comment;
												end;
											end;
											if blank(tempTRrw.ExtraComment) then begin
												tempTRrw.ExtraComment = CLOutr.CorspComment;
											end;
										end;
									otherwise
										YcToStr(TRr.IntYc,tempStr);
										tempTRrw.Comment = tempStr & "." & TRr.Number;
										tempTRrw.ExtraComment = TRr.Comment;
								end;
								tempTRrw.ReconDate = mainr.TransDate;
								tempTRrw.Curncy = "TER";				//валюта
								tempTRrw.CurDebVal = TRrw.DebVal;		//в столбики Поступления AZN терминал
								tempTRrw.CurCredVal = TRrw.CredVal;		//в столбики Расходы AZN терминал
								tempTRrw.DebVal = TRrw.DebVal;
								tempTRrw.CredVal = TRrw.CredVal;
								if ((RepSpec.ArtMode == 1) and (TRr.IntYc == IVYc) and nonblank(TRrw.DebVal)) then begin
									MatRowPut(tempTRr2,l,tempTRrw);
									l = l + 1;
								end else begin
									MatRowPut(tempTRr,j,tempTRrw);
									j = j + 1;
								end;
								tempTRrw.ReconDate = "";
								tempTRrw.Curncy = "";
								tempTRrw.CurDebVal = blankval;
								tempTRrw.CurCredVal = blankval;
								tempTRrw.DebVal = blankval;
								tempTRrw.CredVal = blankval;
								tempTRrw.Comment = "";
								tempTRrw.ExtraComment = "";
							end;
						end;
					end;
				end;
			end;
		end;
		rwcnt = MatRowCnt(tempTRr);
		for (i=0;i<rwcnt;i=i+1) begin
			MatRowGet(tempTRr,i,tempTRrw);
			tempTRrw.Curncy = left(tempTRrw.Curncy,3);
			MatRowPut(tempTRr,i,tempTRrw);
		end;
		if (RepSpec.ArtMode == 1) then begin
			rwcnt2 = MatRowCnt(tempTRr2);
			for (i=0;i<rwcnt2;i=i+1) begin
				MatRowGet(tempTRr2,i,tempTRrw);
				tempTRrw.Curncy = left(tempTRrw.Curncy,3);
				MatRowPut(tempTRr2,i,tempTRrw);
			end;
			rwcnt2 = MatRowCnt(tempTRr2);
			for (j=0;j<rwcnt2-1;j=j+1) begin
				for (i=0;i<rwcnt2-1;i=i+1) begin
					MatRowGet(tempTRr2,i,tempTRrw);
					MatRowGet(tempTRr2,i+1,tempTRrw2);
					if (tempTRrw.ReconDate > tempTRrw2.ReconDate) then begin
						MatRowPut(tempTRr2,i,tempTRrw2);
						MatRowPut(tempTRr2,i+1,tempTRrw);
					end;
				end;
			end;
			for (i=0;i<rwcnt2;i=i+1) begin
				MatRowGet(tempTRr2,i,tempTRrw);
				switch (tempTRrw.Curncy) begin
					case "AZN":
						tempTRrw.CredVal2 = tempTRrw.CurDebVal;
					case "EUR":
						tempTRrw.DebVal2 = tempTRrw.CurDebVal;
					case "USD":
						tempTRrw.Qty = tempTRrw.CurDebVal;
					case "TER":
						tempTRrw.NomVal = tempTRrw.CurDebVal;
				end;
				MatRowPut(tempTRr2,i,tempTRrw);
			end;
			for (j=0;j<rwcnt2-1;j=j+1) begin
				MatRowGet(tempTRr2,j,tempTRrw);
				for (i=j + 1;i<rwcnt2;i=i+1) begin
					MatRowGet(tempTRr2,i,tempTRrw2);
					if (tempTRrw.ReconDate == tempTRrw2.ReconDate) then begin
						tempTRrw.CredVal2 = tempTRrw.CredVal2 + tempTRrw2.CredVal2;
						tempTRrw.DebVal2 = tempTRrw.DebVal2 + tempTRrw2.DebVal2;
						tempTRrw.Qty = tempTRrw.Qty + tempTRrw2.Qty;
						tempTRrw.NomVal = tempTRrw.NomVal + tempTRrw2.NomVal;
						tempTRrw.DebVal = tempTRrw.DebVal + tempTRrw2.DebVal;
						MatRowPut(tempTRr2,j,tempTRrw);
						MatRowDelete(tempTRr2,i);
						i = i - 1;
						rwcnt2 = rwcnt2 - 1;
					end;
				end;
			end;
			rwcnt = MatRowCnt(tempTRr);
			for (i=0;i<rwcnt2;i=i+1) begin
				MatRowGet(tempTRr2,i,tempTRrw);
				tempTRrw3.DebVal = tempTRrw.DebVal;
				tempTRrw3.DebVal2 = tempTRrw.DebVal2;
				tempTRrw3.Qty = tempTRrw.Qty;
				tempTRrw3.CredVal2 = tempTRrw.CredVal2;
				tempTRrw3.NomVal = tempTRrw.NomVal;
				tempTRrw3.Comment = USetStr(35027);
				tempTRrw3.ReconDate = tempTRrw.ReconDate;
				tempTRrw3.Curncy = "IVV";
				MatRowPut(tempTRr,rwcnt + i,tempTRrw3);
			end;
		end;
		
		
		rwcnt = MatRowCnt(tempTRr);
		for (j=0;j<rwcnt-1;j=j+1) begin
			for (i=0;i<rwcnt-1;i=i+1) begin
				MatRowGet(tempTRr,i,tempTRrw);
				MatRowGet(tempTRr,i+1,tempTRrw2);
				if (tempTRrw.ReconDate > tempTRrw2.ReconDate) then begin
					MatRowPut(tempTRr,i,tempTRrw2);
					MatRowPut(tempTRr,i+1,tempTRrw);
				end;
			end;
		end;
		
		AZNTermDeb = 0;
		AZNTermCred = 0;
		AZNDeb = 0;
		AZNCred = 0;
		EURDeb = 0;
		EURCred = 0;
		USDDeb = 0;
		USDCred = 0;
		BaseDeb = 0;
		BaseCred = 0;
		rwcnt = MatRowCnt(tempTRr);
		for (i=0;i<rwcnt;i=i+1) begin
			MatRowGet(tempTRr,i,tempTRrw);
			if (tempTRrw.ReconDate <> tempDate) then begin
				Black_Divider(0,1);
				StartFormat(15);
					OutString(tab1,0,tempTRrw.ReconDate,false);
				tempDate = tempTRrw.ReconDate;
				firstprint = true;
			end;
			if (firstprint) then begin firstprint = false; end else begin
				Gray_Divider(0,1);
				StartFormat(15);
					OutString(tab1,0,"",false);
			end;
			switch (tempTRrw.Curncy) begin
				case "AZN":
					OutString(tab2,0,"",false);
					OutString(tab3,0,tempTRrw.CurDebVal,false);
					AZNDeb = AZNDeb + tempTRrw.CurDebVal;
					OutString(tab4,0,"",false);
					OutString(tab5,0,"",false);
					OutString(tab6,0,tempTRrw.DebVal,false);
					OutString(tab7,0,"",false);
					OutString(tab8,0,tempTRrw.CurCredVal,false);
					OutString(tab9,0,"",false);
					OutString(tab10,0,"",false);
					AZNCred = AZNCred + tempTRrw.CurCredVal;
					OutString(tab11,0,tempTRrw.CredVal,false);
				case "EUR":
					OutString(tab2,0,"",false);
					OutString(tab3,0,"",false);
					OutString(tab4,0,tempTRrw.CurDebVal,false);
					EURDeb = EURDeb + tempTRrw.CurDebVal;
					OutString(tab5,0,"",false);
					OutString(tab6,0,tempTRrw.DebVal,false);
					OutString(tab7,0,"",false);
					OutString(tab8,0,"",false);
					OutString(tab9,0,tempTRrw.CurCredVal,false);
					EURCred = EURCred + tempTRrw.CurCredVal;
					OutString(tab10,0,"",false);
					OutString(tab11,0,tempTRrw.CredVal,false);
				case "USD":
					OutString(tab2,0,"",false);
					OutString(tab3,0,"",false);
					OutString(tab4,0,"",false);
					OutString(tab5,0,tempTRrw.CurDebVal,false);
					USDDeb = USDDeb + tempTRrw.CurDebVal;
					OutString(tab6,0,tempTRrw.DebVal,false);
					OutString(tab7,0,"",false);
					OutString(tab8,0,"",false);
					OutString(tab9,0,"",false);
					OutString(tab10,0,tempTRrw.CurCredVal,false);
					USDCred = USDCred + tempTRrw.CurCredVal;
					OutString(tab11,0,tempTRrw.CredVal,false);
				case "TER":
					OutString(tab2,0,tempTRrw.CurDebVal,false);
					AZNTermDeb = AZNTermDeb + tempTRrw.CurDebVal;
					OutString(tab3,0,"",false);
					OutString(tab4,0,"",false);
					OutString(tab5,0,"",false);
					OutString(tab6,0,tempTRrw.DebVal,false);
					OutString(tab7,0,tempTRrw.CurCredVal,false);
					AZNTermCred = AZNTermCred + tempTRrw.CurCredVal;
					OutString(tab8,0,"",false);
					OutString(tab9,0,"",false);
					OutString(tab10,0,"",false);
					OutString(tab11,0,tempTRrw.CredVal,false);
				case "IVV":
					OutString(tab2,0,tempTRrw.NomVal,false);
					AZNTermDeb = AZNTermDeb + tempTRrw.NomVal;
					OutString(tab3,0,tempTRrw.CredVal2,false);
					AZNDeb = AZNDeb + tempTRrw.CredVal2;
					OutString(tab4,0,tempTRrw.DebVal2,false);
					EURDeb = EURDeb + tempTRrw.DebVal2;
					OutString(tab5,0,tempTRrw.Qty,false);
					USDDeb = USDDeb + tempTRrw.Qty;
					OutString(tab6,0,tempTRrw.DebVal,false);
					OutString(tab7,0,"",false);
					OutString(tab8,0,"",false);
					OutString(tab9,0,"",false);
					OutString(tab10,0,"",false);
					OutString(tab11,0,"",false);
			end;
			switch (FirstTransTypeInRange(tempTRrw.Comment)) begin
				case IVYc:
					OutStringID(tab12,"DblIVVc",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
				case IPYc:
					OutStringID(tab12,"DblIPVcID",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
				case CLInYc:
					OutStringID(tab12,"DblCLInID",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
				case CLOutYc:
					OutStringID(tab12,"DblCLOutID",tempTRrw.Comment,false,FirstTransInRange(tempTRrw.Comment));
				otherwise
					OutStringID(tab12,"DblTrans",tempTRrw.Comment,false,CurrentCompany);
			end;
				OutString(tab13,0,tempTRrw.ExtraComment,false);
			BaseDeb = BaseDeb + tempTRrw.DebVal;
			BaseCred = BaseCred + tempTRrw.CredVal;
			EndFormat;
		end;
		//Итого
		Black_Divider(0,1)
		StartFormat(15);
			OutString(tab1,0,USetStr(31222),false);
			OutString(tab2,0,AZNTermDeb,false);
			OutString(tab3,0,AZNDeb,false);
			OutString(tab4,0,EURDeb,false);
			OutString(tab5,0,USDDeb,false);
			OutString(tab6,0,BaseDeb,false);
			OutString(tab7,0,AZNTermCred,false);
			OutString(tab8,0,AZNCred,false);
			OutString(tab9,0,EURCred,false);
			OutString(tab10,0,USDCred,false);
			OutString(tab11,0,BaseCred,false);
		EndFormat;
		Gray_Divider(0,1)
		StartFormat(15);
		EndFormat;
		//Оборот\Расход AZN
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(31137) & " AZN:",false);
			OutString(tab3,0,BaseDeb-BaseDebErr,false);
			OutString(tab4,0,"",false);
			OutString(tab5,0,"",false);
			OutString(tab6,0,"",false);
			OutString(tab7,0,USetStr(35017) & " AZN:",false);
			OutString(tab8,0,BaseCred,false);
		EndFormat;
		StartFormat(15);
		EndFormat;
		// Табл. 2,3
		Black_Divider(tab2,tab5+20);
		Black_Divider(tab7,tab10+20);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35018),false);
			OutString(tab3,0,USetStr(35019),false);
			OutString(tab4+20,0,USetStr(35020),false);
			OutString(tab5,0,"",false);
			OutString(tab6,0,"",false);
			OutString(tab7,0,USetStr(35021),false);
			OutString(tab8,0,USetStr(35019),false);
			OutString(tab9+20,0,USetStr(35020),false);
		EndFormat;
		Black_Divider(tab2,tab5+20);
		Black_Divider(tab7,tab10+20);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35022),false);
			OutString(tab3,0,BaseDeb - AZNTermDeb,false);
			OutString(tab4+20,0,"AZN",false);
			OutString(tab6,0,"",false);
			OutString(tab5,0,"",false);
			OutString(tab7,0,USetStr(35022),false);
			OutString(tab8,0,AZNTermDeb,false);
			OutString(tab9+20,0,"AZN",false);
		EndFormat;
		Gray_Divider(tab2,tab5+20);
		Gray_Divider(tab7,tab10+20);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35017),false);
			OutString(tab3,0,BaseCred - AZNTermCred - Bal53,false);
			OutString(tab4+20,0,"AZN",false);
			OutString(tab5,0,"",false);
			OutString(tab6,0,"",false);
			OutString(tab7,0,USetStr(35017),false);
			OutString(tab8,0,AZNTermCred,false);
			OutString(tab9+20,0,"AZN",false);
		EndFormat;
		Gray_Divider(tab2,tab5+20);
		Gray_Divider(tab7,tab10+20);
		SaldoEndPeriodAZNTerm = BeginBalance51 + AZNTermDeb - AZNTermCred;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35059),false);
			OutString(tab3,0,Bal53,false);
			OutString(tab4+20,0,"AZN",false);
			OutString(tab5,0,"",false);
			OutString(tab6,0,"",false);
			OutString(tab7,0,USetStr(35025),false);
			OutString(tab8,0,SaldoEndPeriodAZNTerm,false);
			OutString(tab9+20,0,"AZN",false);
		EndFormat;
		Gray_Divider(tab2,tab5+20);
		Black_Divider(tab7,tab10+20);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35023),false);
			OutString(tab3,0,BalItem1,false);
			OutString(tab4+20,0,"AZN",false);
		EndFormat;
		Gray_Divider(tab2,tab5+20);
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35024),false);
			OutString(tab3,0,BalItem2,false);
			OutString(tab4+20,0,"AZN",false);
		EndFormat;
		Black_Divider(tab2,tab5+20);
		StartFormat(15);
		EndFormat;
	// к сдаче
		SaldoEndPeriod = BeginBalance50n51 + BaseDeb - BaseCred;
		SaldoEndPeriodUSD = BeginBalance50USD + USDDeb - USDCred;
		SaldoEndPeriodEUR = BeginBalance50EUR + EURDeb - EURCred;
		SaldoEndPeriodAZN = BeginBalance50AZN + AZNDeb - AZNCred;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35026),false);
			OutString(tab3,0,SaldoEndPeriod,false);
			OutString(tab4+20,0,"AZN",false);
		EndFormat;
		
		StartFormat(15);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35026) & " " & USetStr(35016),false);
			OutString(tab3,0,SaldoEndPeriodUSD,false);
			OutString(tab4+20,0,"USD",false);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,SaldoEndPeriodEUR,false);
			OutString(tab4+20,0,"EUR",false);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,SaldoEndPeriodAZN,false);
			OutString(tab4+20,0,"AZN",false);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,SaldoEndPeriodAZNTerm,false);
			OutString(tab4+20,0,USetStr(35013),false);
		EndFormat;
		StartFormat(15);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35057),false);
			FindNLAccBal("53",RepSpec.ObjStr,"",0,"",AddDay(RepSpec.sEndDate,1),0,0,false,"",0,"","",SaldoEndPeriod53);
			OutString(tab3,0,SaldoEndPeriod53,false);
			OutString(tab4+20,0,"AZN",false);
		EndFormat;
		StartFormat(15);
			OutString(tab1,0,"",false);
			OutString(tab2,0,USetStr(35058),false);
			OutString(tab3,0,SaldoEndPeriod + SaldoEndPeriod53,false);
			OutString(tab4+20,0,"AZN",false);
		EndFormat;
	EndJob;
	return;
end;

global procedure CheckItemHistErrorRn()
begin
	record INVc INr;
	record ItemHistVc IHr;
	boolean testf,TrHs;
	record LocationVc Locr;
	val qty;
	
	
	startreportnoheaderjob("check");
		INr.Code = "";
		while(loopmain(INr,1,true))begin
		//if(readfirstmain(INr,1,true))then begin	
			Locr.Code = "";
			while(loopmain(Locr,1,true))begin
				IHr.ArtCode = INr.Code;
				IHr.Location = Locr.Code;
				TrHs = true;
				qty = 0;
				while(loopkey("ArtCodeLoc",IHr,2,TrHs))begin
					if(IHr.ArtCode!=INr.Code or IHr.Location!=Locr.Code)then begin TrHs = false; end;

					if(TrHs and IHr.StockAffectf==1)then begin
						qty = qty + IHr.Qty;
						if(qty<0)then begin
							TrHs = false;
							startformat(15);
								outstring(0,0,IHr.ArtCode,false);
								outstring(0,0,IHr.FileName,false);
								outstring(0,0,IHr.TransNr,false);
								outstring(0,0,IHr.TransDate,false);
								outstring(0,0,IHr.SerNr,false);
							endformat;
						end;
					end;
				end;
				resetloop(IHr);
			end;
			resetloop(Locr);
		end;
	endjob;
	
return;
end;