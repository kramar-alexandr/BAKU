external function string 255 MonthName(Date);
external procedure ExtractObj(string,var Integer,var string);
external procedure CopyFile(string,string);

external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure AddImagesToXLSX(integer,string,string,string,integer);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string,boolean);
external procedure PrepToAddImgToAllSheet(integer,string);
external procedure AddImageOnCurrentSheet(integer,string,string,integer,integer,integer,integer,integer,longint,longint,longint,longint,integer,longint,longint);
external procedure EndToAddImgToAllSheet(integer,string);
external function string 10 GetStringCellNum(integer,integer);


SetLangMode(LangRussian,"RUS",0);

procedure ClearStocksStuff(var integer SQi, var vector boolean stockInArr, var array string stocks, var vector integer stockQty)
begin
integer i;
  
  SQi = 0;
  for (i=0;i<stocks.length;i=i+1) begin
    stockInArr[stocks[i]] = false;
    stockQty[stocks[i]] = 0;
    stocks[i] = "";
  end;

return;
end;

procedure ClearClassifStuff(var integer TSi, var array string typeClassif, var array string classif)
begin
integer i;
  
  TSi = 0;
  for (i=0;i<typeClassif.length;i=i+1) begin
    typeClassif[i] = "";
    classif[i] = "";
  end;

return;
end;

global 
procedure ImagesExcelRn(record RcVc RepSpec,var area areatofile)
begin
	
	array string 50 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave,pathToImg;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 6 reportName;
  array string 255 mas;
  array integer lvlArray;
  longint fromcoloff,tocoloff,fromrowoff,torowoff;
  integer fromcol,tocol,fromrow,torow;
  integer imgCounter;
	
  record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
  record DIVc DIr;
  record PLVc PLr;
  record PLDefVc PLDefr;
  record ItemStatusVc ISr;
  record INVc INr;
  record CTypeVc CTyper;
  string 100 inrcode;
  string 50 uloc,brand,brandcode,pricecur;
  integer pos,cnt,SQi,TSi,i,Ccntr,Scntr,rowcnt,mtrw,curcomp;
  boolean TrHs,testf,test2f;
  val price;
  vector boolean stockInArr;
  vector integer stockQty;
  array string 20 stocks;
  array string 100 typeClassif,classif;
  
	setexportcodepage("UTF8");
	
	reportName = "ImagesExcelRn";
	if (windowsmode==1) then begin
		//fileToSave = "tmpxlsx.xlsx";
    fileToSave = RepSpec.f6;
	end else begin
		//fileToSave = "/tmpxlsx.xlsx";
    fileToSave = "/" & RepSpec.f6;
	end;
  delete_file(fileToSave);
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	sheetNames[qtyOfSheets] = "Test";
	qtyOfSheets = qtyOfSheets + 1;
	sheetColls[0] = 0.625;
	sheetColls[1] = 21.375;
	sheetColls[2] = 10.125;
	sheetColls[3] = 26.875;
	sheetColls[4] = 13.125;
	sheetColls[5] = 20;
	sheetColls[6] = 29.5;

  fromcoloff = 457200;
  fromrowoff = 333375;
  tocoloff = 5627;
  torowoff = 51820;
  fromcol = 3;
  tocol = 4;
  fromrow = 3;
  torow = 11;
	
  blockload(Compb);
	mtrw = matrowcnt(Compb);
  curcomp = CurrentCompany;
	
  numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	XmlXlsxWorkBegin(fileToSave,reportName);
	CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,1,false);
  PrepToAddImgToAllSheet(qtyOfSheets,fileToSave);
	sheetnum = 1;
	SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
  BeginSheetData(sheetnum,fileToSave);
    rownum = 1;
    BeginRow(sheetnum,fileToSave,rownum,0,3.75);
    EndRow(sheetnum,fileToSave,rownum);
    
    INr.Code = "";
    while loopmain(INr,1,true) begin
      ClearStocksStuff(SQi,stockInArr,stocks,stockQty);
      ClearClassifStuff(TSi,typeClassif,classif);
//collect stocks
			For(i=0;i<mtrw;i=i+1) begin
				setcompany(i+1,false);
        ISr.Code = INr.Code;
        TrHs = true;
        while(loopmain(ISr,1,TrHs)) begin
          testf = true;
          if (ISr.Code!=INr.Code) then begin testf = false; TrHs = false; end;
          if (nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2) then begin testf = false; end;
          if (ISr.Location==";;;") then begin testf = false; end;
          if (ISr.Instock==0) then begin testf = false; end;
          if (testf) then begin
            if !stockInArr[ISr.Location] then begin
              stockInArr[ISr.Location] = true;
              stocks[SQi] = ISr.Location;
              SQi = SQi + 1;
            end;
            stockQty[ISr.Location] = stockQty[ISr.Location] + ISr.Instock;
          end;
        end;
        resetloop(ISr);
			end; 
      resetcompany(curcomp);
      if nonblank(stocks[0]) then begin
//find brand and collect classifications
        brand = "";
        pos = 0;
        uloc = "";
        ExtractObj(INr.DispGroups,pos,uloc); 
        while (nonblank(uloc)) begin
          DIr.Code = uloc;
          readfirstmain(DIr,1,true);
          if (DIr.CType!="BRAND")then begin
            CTyper.Code = DIr.CType;
            readfirstmain(CTyper,1,true);
            typeClassif[TSi] = CTyper.Comment;
            classif[TSi] = DIr.Name;
            TSi = TSi + 1;
          end else begin
            brand = DIr.Name;
            brandcode = DIr.Code;
          end;
          ExtractObj(INr.DispGroups,pos,uloc);
        end;
        if brandcode==RepSpec.f1 or blank(RepSpec.f1) then begin
//find price
          cnt = 0;
          price = 0;
          PLr.ArtCode = INr.Code;
          PLr.PLCode = "RRP";
          while(loopmain(PLr,2,(PLr.ArtCode==INr.Code)))begin
            if(PLr.ArtCode==INr.Code)then begin
              price = price + PLr.ExVatPrice;
              cnt = cnt + 1;
              if(nonblank(PLr.CurncyCode))then begin
                pricecur = PLr.CurncyCode;
              end else begin
                PLDefr.Code = "RRP";
                readfirstmain(PLDefr,1,true);
                pricecur = PLDefr.CurncyCode;
              end;
            end;
          end;
          resetloop(PLr);
          price = price/cnt;
//path to image
          //BlockLoad(Compb);
          MatRowGet(Compb,currentcompany-1,Comprw);
          if (currentcompany==9) then begin
            inrcode = INr.AlternativeCode;
          end else begin
            inrcode = INr.Code;
          end;
          pathToImg = "";
          if fileexists("webcust/" & Comprw.ShortName & "/" & inrcode & ".jpg") then begin
            pathToImg = "webcust/" & Comprw.ShortName & "/" & inrcode & ".jpg";
          end;
          if fileexists("webcust/" & Comprw.ShortName & "/" & inrcode & ".png") then begin
            pathToImg = "webcust/" & Comprw.ShortName & "/" & inrcode & ".png";
          end;
          
          Ccntr = 0;
          Scntr = 0;
          rowcnt = 0;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 5;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.Code,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 1;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 8;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.BarCode,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 16;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"’ип класификации",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 17;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"ЉласификациЯ",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 6;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,brand,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 2;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 9;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.Name,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 2;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 6;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"ђитейл:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 4;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,price);
            style = 2;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 6;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"‘ебестоимость:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 4;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,INr.LastPurchPrice2);
            style = 2;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 6;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"‚алюта:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 7;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,pricecur,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 2;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 6;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"„ата посл. поступлениЯ:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 7;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.LastPriceChange,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 2;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            style = 3;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 2;
            qtyOfEmpStr = 3;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            colnum = 2;
            if nonblank(stocks[Scntr]) then begin
              style = 12;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"‘клад",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 13;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"Љол-во",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end else begin
              style = 3;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 2;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
            style = 2;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if nonblank(typeClassif[Ccntr]) then begin
              style = 10;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              style = 11;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              Ccntr = Ccntr + 1;
            end else begin
              style = 20;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 22;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            end;
          EndRow(sheetnum,fileToSave,rownum);
          rowcnt = rowcnt + 1;
          
          test2f = true;
          while test2f begin
            BeginRow(sheetnum,fileToSave,rownum,0,blankval);
              colnum = 2;
              if nonblank(stocks[Scntr]) then begin
                style = 14;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,stocks[Scntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                style = 15;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,stockQty[stocks[Scntr]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                Scntr = Scntr + 1;
              end else begin
                style = 3;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 2;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              end;
              style = 2;
              qtyOfEmpStr = 2;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              if nonblank(typeClassif[Ccntr]) then begin
                style = 10;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                style = 11;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                Ccntr = Ccntr + 1;
              end else begin
                style = 20;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 22;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              end;
            EndRow(sheetnum,fileToSave,rownum);
            rowcnt = rowcnt + 1;
            
            test2f = false;
            if rowcnt<11 then begin test2f = true; end;
            if nonblank(stocks[Scntr]) then begin test2f = true; end;
            if nonblank(typeClassif[Ccntr]) then begin test2f = true; end;
          end;
          imgCounter = imgCounter + 1;
          AddImageOnCurrentSheet(sheetnum,fileToSave,pathToImg,imgCounter,fromcol,tocol,fromrow,torow,fromcoloff,tocoloff,fromrowoff,torowoff,2,0,0);
          fromrow = fromrow + rowcnt;
          torow = torow + rowcnt;
        end;
      end;
    end;
    if rowcnt<>0 then begin
      BeginRow(sheetnum,fileToSave,rownum,0,blankval);
        colnum = 2;
        style = 18;
        qtyOfEmpStr = 6;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
    end;
	EndSheetData(sheetnum,fileToSave);
  MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
	EndSheet(sheetnum,fileToSave,sheetnum);
  EndToAddImgToAllSheet(qtyOfSheets,fileToSave);
	FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
	ConvertToXLSX(fileToSave,true);
	//MilliSleep(10000);
  //CopyFile(fileToSave,"webcust" & fileToSave);
  //delete_file(fileToSave);
  //addfiletoarea(fileToSave,areatofile,false);
return;
end;

global 
procedure ImagesExcel2Rn(record RcVc RepSpec,var area areatofile)
begin
	
	array string 50 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave,pathToImg;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr,maslen;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 6 reportName;
  array string 255 mas;
  array integer lvlArray;
  array longint fromcoloff,tocoloff,fromrowoff,torowoff;
  longint ext1,ext2;
  array integer fromcol,tocol,fromrow,torow;
  integer imgCounter;
	
  record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
  record DIVc DIr;
  record PLVc PLr;
  record PLDefVc PLDefr;
  record ItemStatusVc ISr;
  record INVc INr;
  record CTypeVc CTyper;
  string 100 inrcode;
  string 50 uloc,brand,brandcode,pricecur;
  integer pos,cnt,SQi,TSi,i,Ccntr,Scntr,rowcnt,j,INInRow,k;
  boolean TrHs,testf,test2f;
  val price;
  vector boolean stockInArr;
  vector integer stockQty;
  array string 100 classif;
  
  
  integer INCi,TCi;
  array string 100 typeClassif,tempINCodes,INCodes;
  array string 20 stocks;
  vector string 255 alldata;
  vector boolean TCInArr;
  
	setexportcodepage("UTF8");
	
	reportName = "ImagesExcel2Rn";
	if (windowsmode==1) then begin
    fileToSave = RepSpec.f6;
	end else begin
    fileToSave = "/" & RepSpec.f6;
	end;
  delete_file(fileToSave);
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	sheetNames[qtyOfSheets] = "Sheet 1";
	qtyOfSheets = qtyOfSheets + 1;
	sheetColls[0] = 14.28515625;
	sheetColls[1] = 17;
	sheetColls[2] = 12.42578125;
	sheetColls[3] = 14.28515625;
	sheetColls[4] = 17;
	sheetColls[5] = 12.42578125;
	sheetColls[6] = 14.28515625;
	sheetColls[7] = 17;
	sheetColls[8] = 12.42578125;
	
  fromcoloff[0] = 13138;
  fromrowoff[0] = 81400;
  fromcoloff[1] = 13138;
  fromrowoff[1] = 81400;
  fromcoloff[2] = 13138;
  fromrowoff[2] = 81400;
  
  fromcol[0] = 1;
  fromrow[0] = 0;
	fromcol[1] = 4;
  fromrow[1] = 0;
	fromcol[2] = 7;
  fromrow[2] = 0;
  
  ext1 = 1116000;
  ext2 = 1116000;
  
  INInRow = 3;
	
  INr.Code = "";
  INCi = 0;
  while loopmain(INr,1,true) begin
    tempINCodes[INCi] = INr.Code;
    INCi = INCi + 1;
    alldata[INr.Code & ":name"] = INr.Name;
    pos = 0;
    uloc = "";
    ExtractObj(INr.DispGroups,pos,uloc); 
    while (nonblank(uloc)) begin
      DIr.Code = uloc;
      readfirstmain(DIr,1,true);
      if (DIr.CType!="BRAND")then begin
        CTyper.Code = DIr.CType;
        readfirstmain(CTyper,1,true);
        if !TCInArr[CTyper.Comment] then begin
          TCInArr[CTyper.Comment] = true;
          typeClassif[TCi] = CTyper.Comment;
          TCi = TCi + 1;
        end;
        alldata[INr.Code & ":" & CTyper.Comment] = DIr.Name;
      end else begin
        alldata[INr.Code & ":brand"] = DIr.Name;
        brandcode = DIr.Code;
      end;
      ExtractObj(INr.DispGroups,pos,uloc);
    end;
    
    if brandcode==RepSpec.f1 or blank(RepSpec.f1) then begin
      ISr.Code = INr.Code;
      TrHs = true;
      while(loopmain(ISr,1,TrHs)) begin
        testf = true;
        if (ISr.Code!=INr.Code) then begin testf = false; TrHs = false; end;
        if (nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2) then begin testf = false; end;
        if (ISr.Location==";;;") then begin testf = false; end;
        if (ISr.Instock==0) then begin testf = false; end;
        if (testf) then begin
          if !stockInArr[ISr.Location] then begin
            stockInArr[ISr.Location] = true;
            stocks[SQi] = ISr.Location;
            SQi = SQi + 1;
          end;
          alldata[INr.Code & ":" & ISr.Location] = (StringToInt(alldata[INr.Code & ":" & ISr.Location]) + ISr.Instock) & "";
          alldata[INr.Code & ":allstocksqty"] = (StringToInt(alldata[INr.Code & ":allstocksqty"]) + ISr.Instock) & "";
        end;
      end;
      resetloop(ISr);
      cnt = 0;
      price = 0;
      PLr.ArtCode = INr.Code;
      PLr.PLCode = "RRP";
      while(loopmain(PLr,2,(PLr.ArtCode==INr.Code)))begin
        if(PLr.ArtCode==INr.Code)then begin
          price = price + PLr.ExVatPrice;
          cnt = cnt + 1;
          if(nonblank(PLr.CurncyCode))then begin
            pricecur = PLr.CurncyCode;
          end else begin
            PLDefr.Code = "RRP";
            readfirstmain(PLDefr,1,true);
            pricecur = PLDefr.CurncyCode;
          end;
        end;
      end;
      resetloop(PLr);
      alldata[INr.Code & ":retail"] = price/cnt;
      alldata[INr.Code & ":cur"] = pricecur;
      alldata[INr.Code & ":cost"] = INr.LastPurchPrice2;
      alldata[INr.Code & ":date"] = INr.LastPriceChange;
      BlockLoad(Compb);
      MatRowGet(Compb,currentcompany-1,Comprw);
      if (currentcompany==9) then begin
        inrcode = INr.AlternativeCode;
      end else begin
        inrcode = INr.Code;
      end;
      if fileexists("webcust/" & Comprw.ShortName & "/" & inrcode & ".jpg") then begin
        alldata[INr.Code & ":pathToImg"] = "webcust/" & Comprw.ShortName & "/" & inrcode & ".jpg";
      end;
      if fileexists("webcust/" & Comprw.ShortName & "/" & inrcode & ".png") then begin
        alldata[INr.Code & ":pathToImg"] = "webcust/" & Comprw.ShortName & "/" & inrcode & ".png";
      end;
    end;
  end;
  
  j = 0;
  for (i=0;i<tempINCodes.length;i=i+1) begin
    if nonblank(alldata[tempINCodes[i] & ":allstocksqty"]) then begin 
      INCodes[j] = tempINCodes[i];
      j = j + 1;
    end;
  end;
  
  numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	XmlXlsxWorkBegin(fileToSave,reportName);
	CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,1,false);
  PrepToAddImgToAllSheet(qtyOfSheets,fileToSave);
	sheetnum = 1;
	SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
  BeginSheetData(sheetnum,fileToSave);
    rownum = 1;
    i = 0;
    while (i < INCodes.length) begin
    logtext(0,"while begin");
    logtext(0,INCodes.length);
    logtext(0,i);
    logtext(0,INInRow);
      if ((INCodes.length - mod((INCodes.length - i),INInRow))/i == 1) then begin
        INInRow = INCodes.length - i;
      end;
      logtext(0,"if2");
      if (INCodes.length<INInRow) then begin
        INInRow = INCodes.length;
      end;
      BeginRow(sheetnum,fileToSave,rownum,0,60.75);
        colnum = 1;
        for (k=0;k<INInRow;k=k+1) begin
          
          style = 1;
            mas[maslen] = "<rPr><b" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t xml:space=" & Chr(34) & "preserve" & Chr(34) & ">" & INCodes[i + k] & Chr(13) & Chr(10);
            maslen = maslen + 1;
            mas[maslen] = "<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><b" & Chr(47) & "><i" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t>" & alldata[INCodes[i + k] & ":name"];
            maslen = maslen + 1;
            mas[maslen] = "<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><b" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t xml:space=" & Chr(34) & "preserve" & Chr(34) & ">" & Chr(13) & Chr(10) & "<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & ">";
            maslen = maslen + 1;
            mas[maslen] = "<rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t>Ѓренд: " & alldata[INCodes[i + k] & ":brand"] & Chr(13) & Chr(10) & "ђитейл: " & alldata[INCodes[i + k] & ":retail"] & Chr(13) & Chr(10) & "‘ебестоимость: " & alldata[INCodes[i + k] & ":cost"] & Chr(13) & Chr(10) & "‚алюта: " & alldata[INCodes[i + k] & ":cur"] & Chr(13) & Chr(10) & "„ата посл. пост.: " & alldata[INCodes[i + k] & ":date"] & "<" & Chr(47) & "t>";
            maslen = maslen + 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,",,,b" & maslen,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 2;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 5;
            mas[maslen] = "<rPr><b" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t>ЉлассификациЯ<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & ">";
            maslen = maslen + 1;
            mas[maslen] = "<charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t xml:space=" & Chr(34) & "preserve" & Chr(34) & ">";
            maslen = maslen + 1;
            for (j=0;j<typeClassif.length;j=j+1) begin
              if nonblank(alldata[INCodes[i + k] & ":" & typeClassif[j]]) then begin
                mas[maslen] = Chr(13) & Chr(10) & typeClassif[j] & ": " & alldata[INCodes[i + k] & ":" & typeClassif[j]];
                maslen = maslen + 1;
              end;
            end;
            mas[maslen] = "<" & Chr(47) & "t>";
            maslen = maslen + 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,",,,b" & maslen,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        end;
      EndRow(sheetnum,fileToSave,rownum);
      
      BeginRow(sheetnum,fileToSave,rownum,0,39.75);
        colnum = 1;
        for (k=0;k<INInRow;k=k+1) begin
          style = 3;
            mas[maslen] = "<rPr><b" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t>Ћстатки на складах<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & ">";
            maslen = maslen + 1;
            mas[maslen] = "<rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t xml:space=" & Chr(34) & "preserve" & Chr(34) & ">";
            maslen = maslen + 1;
            for (j=0;j<stocks.length;j=j+1) begin
              if nonblank(alldata[INCodes[i + k] & ":" & stocks[j]]) then begin
                mas[maslen] = Chr(13) & Chr(10) & stocks[j] & ": " & alldata[INCodes[i + k] & ":" & stocks[j]];
                maslen = maslen + 1;
              end;
            end;
            mas[maslen] = "<" & Chr(47) & "t>";
            maslen = maslen + 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,",,,b" & maslen,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 4;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum - 1) & ":" & GetStringCellNum(colnum,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          style = 6;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          imgCounter = imgCounter + 1;
          AddImageOnCurrentSheet(sheetnum,fileToSave,alldata[INCodes[i + k] & ":pathToImg"],imgCounter,fromcol[k],tocol[k],fromrow[k],torow[k],fromcoloff[k],tocoloff[k],fromrowoff[k],torowoff[k],1,ext1,ext2);
          fromrow[k] = fromrow[k] + 2;
        end;
      EndRow(sheetnum,fileToSave,rownum);
      
      i = i + INInRow;
    logtext(0,"while end");
    end;
    
    
	EndSheetData(sheetnum,fileToSave);
  MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
	EndSheet(sheetnum,fileToSave,sheetnum);
  EndToAddImgToAllSheet(qtyOfSheets,fileToSave);
	FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
	ConvertToXLSX(fileToSave,true);
	//MilliSleep(10000);
  //CopyFile(fileToSave,"webcust" & fileToSave);
  //delete_file(fileToSave);
return;
end;