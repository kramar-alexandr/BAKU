SetLangMode(LangRussian,"RUS",0);

Global updating procedure ImportPLIn()
begin
	record PLVc PLr;
	Integer i;
	array string 255 sfield;
	string 5 flag;
	record INVc INr;
	record PLDefVc PLDr;
	val price;		
	record CurncyCodeVc Curncyr;
		
		while (TestEOF()==false) begin
		  for (i=0;i<5;i=i+1) begin
        sfield[i]=ImportField;
      end;
      INr.Code = sfield[1];
      if(readfirstmain(INr,1,true))then begin
        PLDr.Code = sfield[0];
        if(readfirstmain(PLDr,1,true))then begin
          if(nonblank(sfield[2]))then begin
            price = evaltoval(sfield[2]);
            if(price>0)then begin
              recordnew(PLr);
              PLr.PLCode = PLDr.Code;
              PLr.ArtCode = INr.Code;
              PLr.Comment = INr.Name;
              PLr.ExVatPrice = price;
              Curncyr.CurncyCode = sfield[3];
              if(readfirstmain(Curncyr,1,true))then begin
              	PLr.CurncyCode = Curncyr.CurncyCode;
              end;
              if(nonblank(sfield[4]))then begin
              	PLr.SerialNr = sfield[4];
              end;
              RecordInsert(PLr,true);
            end;            
          end;
        end;
      end else begin
      	INr.AlternativeCode = sfield[1];
      	if(readfirstKey("AlternativeCode",INr,1,true))then begin
					PLDr.Code = sfield[0];
					if(readfirstmain(PLDr,1,true))then begin
						if(nonblank(sfield[2]))then begin
							price = evaltoval(sfield[2]);
							if(price>0)then begin
								recordnew(PLr);
								PLr.PLCode = PLDr.Code;
								PLr.ArtCode = INr.Code;
								PLr.Comment = INr.Name;
								PLr.ExVatPrice = price;
								Curncyr.CurncyCode = sfield[3];
								if(readfirstmain(Curncyr,1,true))then begin
									PLr.CurncyCode = Curncyr.CurncyCode;
								end;
								if(nonblank(sfield[4]))then begin
									PLr.SerialNr = sfield[4];
								end;
								RecordInsert(PLr,true);
							end;            
						end;
					end;
				end else begin
					INr.BarCode = sfield[1];
					if(readfirstKey("BarCode",INr,1,true))then begin
						PLDr.Code = sfield[0];
						if(readfirstmain(PLDr,1,true))then begin
							if(nonblank(sfield[2]))then begin
								price = evaltoval(sfield[2]);
								if(price>0)then begin
									recordnew(PLr);
									PLr.PLCode = PLDr.Code;
									PLr.ArtCode = INr.Code;
									PLr.Comment = INr.Name;
									PLr.ExVatPrice = price;
									Curncyr.CurncyCode = sfield[3];
									if(readfirstmain(Curncyr,1,true))then begin
										PLr.CurncyCode = Curncyr.CurncyCode;
									end;
									if(nonblank(sfield[4]))then begin
										PLr.SerialNr = sfield[4];
									end;
									RecordInsert(PLr,true);
								end;            
							end;
						end;
					end;
				end;
      end;
      NextImportLine(true);
		end;

 return;
end;


Global updating procedure ImportDiskTableIn()
begin
	record CUVc CUr;
	record RebVc Rebr;
	integer i;
	string 255 sfield0,sfield1;
	
		while (TestEOF()==false) begin
			sfield0 = "";
			sfield1 = "";
			sfield0=ImportField;
			sfield1=ImportField;
      CUr.Code = sfield0;
      if(readfirstmain(CUr,1,true))then begin
        Rebr.Code = sfield1;
        if(readfirstmain(Rebr,1,true))then begin
          if(CUr.RebCode!=Rebr.Code)then begin
          	CUr.RebCode = Rebr.Code;
          	recordStore(CUr,true);
          end;
        end;
      end;
      NextImportLine(true);
		end;

 return;
end;

procedure FormatString(var string field)// Edit ***** 20 June 2013 15:17:00 Larisa
begin
	string 255 tempfield,s;
	integer i,ns;
	
	tempfield = field;
	field = "";
	for (i=0;i<len(tempfield);i=i+1) begin
		s = mid(tempfield,i,1);
		ns = asc(s);
		if(ns>=32 and ns<=126)then begin
			if(ns!=34)then begin
				field = field & s;
			end;
		end;
		if(ns>=1040 and ns<=1103)then begin
			field = field & s;
		end;
	end;
	return;
end;// Edit ***** 20 June 2013 15:17:00 Larisa

procedure FormatUpperCaseCode(var string field)// Edit ***** 20 June 2013 15:17:00 Larisa
begin
	string 255 tempfield,s;
	integer i,ns;
	
	tempfield = UpperCase(field);
	field = "";
	for (i=0;i<len(tempfield);i=i+1) begin
		s = mid(tempfield,i,1);
		ns = asc(s);
		if(ns>=32 and ns<=96)then begin
			if(ns!=34 and ns!=44 and ns!=58)then begin
				if(ns==32)then begin
					field = field & chr(95);
				end else begin
					field = field & s;
				end;
			end;
		end;
		if(ns>=123 and ns<=126)then begin
			field = field & s;
		end;
		if(ns>=1040 and ns<=1071)then begin
			field = field & s;
		end;
	end;
	return;
end;// Edit ***** 20 June 2013 15:17:00 Larisa

updating procedure ReturnCodeClassification(var string classification)// Edit ***** 21 June 2013 10:39:00 Larisa
begin
	Integer cnt;
	record DIVc DIr;
	
	if(nonblank(classification))then begin
		DIr.Code = classification;
		if(ReadFirstMain(DIr,1,true)==false)then begin
			DIr.Name = classification;
			if(ReadFirstKey("Name",DIr,1,true)==false)then begin
				cnt = CountRecords("DIVc");
				RecordNew(DIr);
				LCntDIr:;
				DIr.Code = cnt+1;
				if(ReadFirstMain(DIr,1,true))then begin
					cnt = cnt + 1;
					goto LCntDIr;
				end;
				DIr.Code = cnt+1;
				DIr.Name = classification;
				classification = DIr.Code;
				RecordStore(DIr,true);
			end else begin
				classification = DIr.Code;
			end;
		end else begin
			classification = DIr.Code;
		end;
		
	end;
	return;
end;// Edit ***** 21 June 2013 10:39:00 Larisa

Global updating procedure ImportMyINIn()
begin
	record INVc INr;
	record RebVc Rebr;
	record ITVc ITr;
	integer i;
	string 255 sfield0,sfield1,sfield2,sfield3,sfield4,ressfield4,alternat,color,size;
		
	while (TestEOF()==false) begin
		sfield0 = "";
		sfield1 = "";
		sfield2 = "";
		alternat = "";
		color = "";
		size = "";
		sfield3 = "";
		sfield4 = "";
		ressfield4 = "";
		sfield0 = ImportField;
		if(nonblank(sfield0))then begin
			FormatUpperCaseCode(sfield0);
			sfield1 = ImportField;
			if(nonblank(sfield1))then begin
				FormatString(sfield1);
			end;
			sfield2 = ImportField;
			if(nonblank(sfield2))then begin
				FormatString(sfield2);
			end;
			alternat = ImportField;
			color = ImportField;
			size = ImportField;
			sfield3 = ImportField;
			if(nonblank(sfield3))then begin//validate group
				ITr.Code = sfield3;
				if(ReadFirstMain(ITr,1,true)==false)then begin
					ITr.Comment = sfield3;
					if(ReadFirstKey("Comment",ITr,1,true)==false)then begin
						sfield3 = "";
					end else begin
						sfield3 = ITr.Code;
					end;
				end else begin
					sfield3 = ITr.Code;
				end;
			end;//validate group
			sfield4 = ImportField;
			if(nonblank(sfield4))then begin
				FormatString(sfield4);
				ReturnCodeClassification(sfield4);
				UpperCase(sfield4);
			end;
			while(nonblank(sfield4))begin
				if(nonblank(ressfield4))then begin
					ressfield4 = ressfield4 & "," & sfield4;
				end else begin
					ressfield4 = ressfield4 & sfield4;
				end;
				sfield4 = ImportField;
				if(nonblank(sfield4))then begin
					FormatString(sfield4);
					ReturnCodeClassification(sfield4);
					UpperCase(sfield4);
				end;
			end;
			INr.Code = sfield0;
			if(ReadFirstMain(INr,1,true))then begin
				if(nonblank(sfield1))then begin
					INr.Name = sfield1;
				end;
				if(nonblank(sfield2))then begin
					INr.BarCode = sfield2;
				end;
				if(nonblank(alternat))then begin
					INr.AlternativeCode = alternat;
				end;
				if(nonblank(color))then begin
					INr.Colour = color;
				end;
				if(nonblank(size))then begin
					INr.Size = size;
				end;
				if(nonblank(sfield3))then begin
					INr.Group = sfield3;
				end;
				if(nonblank(ressfield4))then begin
					INr.DispGroups = ressfield4;
				end;
				recordStore(INr,True);
			end else begin
				if(nonblank(sfield1))then begin
					recordNew(INr);
					INr.Code = sfield0;
					INr.Name = sfield1;
					INr.BarCode = sfield2;
					INr.AlternativeCode = alternat;
					INr.Colour = color;
					INr.Size = size;
					INr.Group = sfield3;
					INr.DispGroups = ressfield4;
					recordStore(INr,true);
				end;//if nonblank(sfield1)
			end;//if RFM INr
		end;//if nonblank(sfield0)
		NextImportLine(true);
	end;
	return;
end;


global updating procedure AddInchesMn(record RcVc RepSpec)
begin
	record INVc INr;
	
	
	while(loopmain(INr,1,true))begin
		INr.Unittext = "˜’";
		INr.UpdateCost = 1;
		recordStore(INr,true);
	end;

return;
end;


global
updating procedure ImpCLOut()
BEGIN


    RegisterImport("ITVc2");

  RETURN;
END;


global
updating procedure ImpDocVc()
BEGIN

    RegisterImport("doc3");

  RETURN;
END;




global
updating procedure INImportCostsIn()		//Edit----------------------Dima  10.02.2015
begin
  record INVc INr;
  string 70 code;
  string 15 cost;



	while (TestEOF()==false) begin
			code = ImportField;
			cost = ImportField;
	
			if(nonblank(code) and nonblank(cost)) then begin

				INr.Code = code;				
				if (ReadFirstMain(INr,1,true)) then begin
					INr.InPrice = StringToVal(cost,M4Val);
					RecordStore(INr,true);
				end;
			end;								
				
			if (NextImportLine(true)) then begin end;
	end;		

return;
end;



global
updating procedure ImportOfRegister(record RcVc RepSpec)	//Edit----------------------Dima  28.05.2015
BEGIN
string 100 tag;
		tag = ImportField;
    RegisterImport(tag);
  RETURN;
END;



global
updating procedure ImportOfRegisterRewriting(record RcVc RepSpec)	//Edit----------------------Dima  28.05.2015
BEGIN
string 100 tag;
string 50 registerVc;
	record LocClVc LocClr,oldLocClr;
	record INVc INr;
	record CLInVc CLInr;
	record CLOutVc CLOutr;
	record IPVc IPr;
	record OPVc OPr;
	record IVVc IVr;
	record VIVc VIr;
	record POVc POr;
	record SHVc SHr;
	record PUVc PUr;
	record SDVc SDr;
	record StockMovVc StockMovr;
	record RetVc Retr;
	record RetPUVc RetPUr;
	record ORVc ORr;
	record TRVc TRr;
	record FBVc FBr;
	record ItemHistVc IHr;
	record ItemStatusVc ISr;
	record AccVc Accr;
	
	registerVc = UpperCase(RepSpec.f1);
	tag = ImportField;

	if (nonblank(registerVc))	then begin
		while (NextImportLine(false)) begin
			switch(registerVc) begin
				case "LOCCLVC": 					 	
 			  	  ImportOneRecord(LocClr,tag);
 			  	  oldLocClr.Code = LocClr.Code;
 			  	  if (ReadFirstMain(oldLocClr,1,true)) then begin  	  
							RecordUpdate(oldLocClr,LocClr,false);
						end else begin
							RecordStore(LocClr,false);
						end;
						
				case "INVC": 					 	
 			  	  ImportOneRecord(INr,tag);
 			  	  RecordStore(INr,true);
 			  	  
				case "CLINVC": 					 	
 			  	  ImportOneRecord(CLInr,tag);
 			  	  RecordStore(CLInr,true); 
 			  	  
				case "CLOUTVC": 					 	
 			  	  ImportOneRecord(CLOutr,tag);
 			  	  RecordStore(CLOutr,true); 
 			  	  
				case "IPVC": 					 	
 			  	  ImportOneRecord(IPr,tag);
 			  	  RecordStore(IPr,true); 
 			  	  
				case "OPVC": 					 	
 			  	  ImportOneRecord(OPr,tag);
 			  	  RecordStore(OPr,true); 
 			  	  
				case "IVVC": 					 	
 			  	  ImportOneRecord(IVr,tag);
 			  	  RecordStore(IVr,true); 
 			  	  
				case "VIVC": 					 	
 			  	  ImportOneRecord(VIr,tag);
 			  	  RecordStore(VIr,true); 
 			  	  
				case "POVC": 					 	
 			  	  ImportOneRecord(POr,tag);
 			  	  RecordStore(POr,true); 
 			  	  
				case "PUVC": 					 	
 			  	  ImportOneRecord(PUr,tag);
 			  	  RecordStore(PUr,true); 
 			  	  
				case "SDVC": 					 	
 			  	  ImportOneRecord(SDr,tag);
 			  	  RecordStore(SDr,true); 
 			  	  
				case "STOCKMOVVC": 					 	
 			  	  ImportOneRecord(StockMovr,tag);
 			  	  RecordStore(StockMovr,true); 
 			  	  
				case "RETVC": 					 	
 			  	  ImportOneRecord(Retr,tag);
 			  	  RecordStore(Retr,true); 
 			  	  
				case "RETPUVC": 					 	
 			  	  ImportOneRecord(RetPUr,tag);
 			  	  RecordStore(RetPUr,true);
 			  	  
				case "ORVC": 					 	
 			  	  ImportOneRecord(ORr,tag);
 			  	  RecordStore(ORr,true);
 			  	  
				case "TRVC": 					 	
 			  	  ImportOneRecord(TRr,tag);
 			  	  RecordStore(TRr,true); 
 			  	  
				case "FBVC": 					 	
 			  	  ImportOneRecord(FBr,tag);
 			  	  RecordStore(FBr,true);
 			  	  
				case "ITEMHISTVC": 					 	
 			  	  ImportOneRecord(IHr,tag);
 			  	  RecordStore(IHr,true); 
 			  	  
				case "ITEMSTATUSVC": 					 	
 			  	  ImportOneRecord(ISr,tag);
 			  	  RecordStore(ISr,true);
 			  	  
 			  case "AccVc": 					 	
 			  	  ImportOneRecord(Accr,tag);
 			  	  RecordStore(Accr,true);  			  	   			  	   			  	  			  	   			  	   			  	   			  	   			  	   			  	   			  	   			  	   			  	   			  	   			  	   			  	   			  	  			  	  
					
			end;
		end;	
  end;  

  RETURN;
END;
