//external procedure DisplayRecordDetails_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string);
//external procedure DrawPOSInterface_FAR(string,string,record POSButtonsVc,Integer,string,Integer);
remote function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external function Boolean HasVarieties();
external function Boolean HasTouchScreenLook();
external function Boolean UseTaxTemplatesforTaxCalc();

external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModSL();

external function Boolean HasApprovals();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedPricing();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasDeliveryAddress();
external function Boolean HasEInvoicing();
external function Boolean HasExtraNLComment();
external function Boolean HasHotelInterface();
external function Boolean HasJewelleryInterface();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasLoyaltyCards();
external function Boolean HasObjects();
external function Boolean HasNumberSeries();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasProjects();
external function Boolean HasPriceLists();
external function Boolean HasSerialNumbers();
external function Boolean HasSkypeConnection();
external function Boolean HasTestFeatures();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTouchScreenLook();
external function Boolean HasVarieties();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCRM();
external function Boolean HasModExp();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();

external procedure ExtractObj(string,var Integer,var string);
external procedure AddTouchScreenPasteButton(integer,integer,Integer,Integer,string,integer,string,integer);
external procedure MakeUserDefinedTile(longint);
external function real GenericFunctionButton(real,real,real,real,string,string,LongInt,string);
external function string 255 SetVATZoneLabel();
external function string 20 GetMenuCode(string);
external function Integer NumberofBarTabTiles();

external function Boolean IsEnterprise();

external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();

external function Boolean HasMultiLocations();

external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPOS();
external function Boolean HasModSO();
external function Boolean HasModRest();
external function Boolean IsSessionOpen(string,string,Date,Time);

//##ii
procedure dummy() //##ii
begin //##ii
  SetLangMode(LangFarsi,"ENG",0); //##ii LangUkrainian,"UKR" -> LangFarsi,"ENG"
  return; //##ii
end; //##ii

event DefineWindows
begin
  Real h,h1,h2,h3,h4,h5,h6,h7,hm,v,v2,v3,l,vs,vm,f,t,x;
  string 255 label;
  
  SetLangMode(LangFarsi,"ENG",0); 
  return;
end;

global
procedure DrawPOSButtons_FAR(longint ah,longint av,longint width,longint height,longint dh,longint dv,record POSButtonsVc POSBr,string ovrclass,Integer stackspace)
begin
  row POSButtonsVc POSBrw;
  record POSButtonsVc POSB2r;
  Integer i,rwcnt;
  Real h,v;
  //hs,h1,h2,h3,h4,h5,h6,h7,hm,v2,l,vs,vm,f,t,x;
  string 255 procstr;
  Integer wn;
  boolean ItemPage;
  string 60 ostr;
  Integer pos;
  string 255 stack;
  string 255 lblstr;
  string 255 tagstr;
  integer selitemline;

  h = ah;
  v = av;

  ItemPage = false;  
  if (ItemPage) then begin
    SoftEditField(h=80,v+=49, 80,"ò«·«",Normal ,"touchscreenitem",false,INSClass,M4Str,255);//????? (Item)
    //  SoftEditField(h+=140,v, 80,"Serial No.",Normal ,"touchscreenitemserialnr",false,SerialNrSClass,M4Str,255);
    //no stock updating    SoftEditField(h+=120,v, 40,"Qty",Normal ,"touchscreenitemqty",false,0,M4Str,255);
    SoftEditField(h+=120,v, 60,"ﬁÌ„ ",Normal ,"touchscreenitemprice",false,0,M4Str,255);//????
    SoftEditField(h=80,v+=20,-500,"",ViewOnly ,"touchscreenitemname",false,0,M4Str,255);
  end;
  
  //outside of screen
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpage",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpagestack",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowprinterstack",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpageprevious",false,0,M4Str,255);
  //SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenselecteditemtag",false,0,M4Str,255);
  
  wn = CurWindow;
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  
  if (stack=="") then begin
    //PutWindowString(wn,"touchscreenwindowpage",1)
    //PutWindowString(wn,"touchscreenwindowpagestack",1)
    stack = "1";
  end;
  
  pos = 0;
  ExtractObj(stack,pos,ostr);
  h = ah;
  v = v + stackspace;
  while (nonblank(ostr)) begin
    if (ovrclass<>"") then begin
      procstr = "IVCashDClass";
    end else begin
      procstr = POSBr.WindowClass;
    end;
    
    procstr = procstr & "TouchScreenStackButton";
    
    POSB2r.WindowClass = POSBr.WindowClass;
    POSB2r.POSButtonGroupCode = POSBr.POSButtonGroupCode;
    POSB2r.Page = StringToInt(ostr);
    
    if (ReadFirstMain(POSB2r,3,true)) then begin
      lblstr = POSB2r.Comment;
    end else begin
      lblstr = "’›ÕÂ" & ostr;//???????? GoogleTranslate 
    end;
    
    if (POSB2r.KeyCode!=kFunctionKeyNone) then begin
      lblstr = lblstr & "<BR>";
      switch (POSB2r.Modifiers) begin
        case kKeyModifierNone:
        case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
        case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
        case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
      end;
      lblstr = lblstr & "F" & POSB2r.KeyCode;
    end;

    ColourPushButtonTag(h,v,h + width,v + height,procstr,lblstr,2,ostr); // time color no. 2

    h = h + width + dh;
    ExtractObj(stack,pos,ostr);
  end;

  //v = v - 80;
  v = v + height + dv;
  h = ah;

  //ButtonFrame(h,v+=82,400,0,"");
  ButtonFrame(h,v+=5,800,0,"");// Edit ************************** Tuesday, 25 December 2012 10:23:15

  v = v + 10;

  rwcnt = MatRowCnt(POSBr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(POSBr,i,POSBrw);
    procstr = POSBr.WindowClass;

    if (procstr=="NPTSIVCashDClass") then begin
      procstr = "IVCashDClass";
    end;

    lblstr = POSBrw.Label;

    if (POSBrw.KeyCode<>kFunctionKeyNone) then begin
      lblstr = lblstr & "<BR>";
      switch (POSbrw.Modifiers) begin
        case kKeyModifierNone:
        case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
        case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
        case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
      end;
      lblstr = lblstr & "F" & POSBrw.KeyCode;
    end;

    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeItem:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeInstructions:
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeModifier:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeLevelTop:
        procstr = procstr & "PageTop";
        /*
        case kPOSButtonTypeLevelUp:
        procstr = procstr & "LevelUp";
        */
      case kPOSButtonTypeGotoPage:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      /*
      case kPOSButtonTypeLevelDown:
        procstr = procstr & "LevelDown";
      */
      case kPOSButtonTypeCashPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypePayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeChequePayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeCreditCardPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeCreditCardPaymentReversal:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeDebitCardPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeGiftVoucherPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeOnHotelGuestAccount:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeFinish:  
        procstr = procstr & "TouchScreenFinishButton";
        case kPOSButtonTypeVoidRow:  
        procstr = procstr & "TouchScreenVoidRow";
      case kPOSButtonTypeAmendLine:  
        procstr = procstr & "TouchScreenAmendLine";
      case kPOSButtonTypeAddOrderDiscount:  
        procstr = procstr & "TouchScreenAddOrderDiscount";
      case kPOSButtonTypeKitchenOrder:  
        procstr = procstr & "TouchScreenKitchenOrder";
      case kPOSButtonTypeLoyaltyCard:  
        procstr = procstr & "TouchScreenLoyaltyCard";
      case kPOSButtonTypeSeniorCitizenDiscount:  
        procstr = procstr & "TouchScreenSeniorCitizenCard";
      case kPOSButtonTypeSplitItem:  
        procstr = procstr & "TouchScreenSplitItem";
      case kPOSButtonTypeTransfertoSL:  
        procstr = procstr & "TouchScreenTransfertoSL";
      case kPOSButtonTypeTransfertoInvoice:  
        procstr = procstr & "TouchScreenTransfertoInvoice";
      case kPOSButtonTypeTransfertoOrder:  
        procstr = procstr & "TouchScreenTransfertoOrder";
      case kPOSButtonTypeInvalidateInvoice:  
        procstr = procstr & "TouchScreenInvalidateInvoice";
      case kPOSButtonTypeAddHeaderLine:  
        procstr = procstr & "TouchScreenHeaderLine"; 
      case kPOSButtonTypeAddHiddenLine:  
        procstr = procstr & "TouchScreenHiddenLine"; 
      case kPOSButtonTypeAddSubtotalLine:  
        procstr = procstr & "TouchScreenSubtotalLine"; 
      case kPOSButtonTypeInvoiceStatus:  
        procstr = procstr & "TouchScreenInvoiceStatus"; 
      case kPOSButtonTypeOpenNLTransaction:  
        procstr = procstr & "TouchScreenOpenNLTransaction"; 
      case kPOSButtonTypeSendToFiscalDevice:  
        procstr = procstr & "TouchScreenSendToFiscalDevice"; 
      case kPOSButtonTypePrintProformaInvoice:  
        procstr = procstr & "TouchScreenProformaInvoice"; 
      case kPOSButtonTypeConnectToPrepayment:  
        procstr = procstr & "TouchScreenConnectToPrepayment"; 
      case kPOSButtonTypeCreateCashOut:  
        procstr = procstr & "TouchScreenCreateCashout"; 
      case kPOSButtonTypeCreateCashin:  
        procstr = procstr & "TouchScreenCreateCashin"; 
      case kPOSButtonTypeCreateCreditNote:  
        procstr = procstr & "TouchScreenCreateCreditNote"; 
      case kPOSButtonTypeCreateCreditEMail:  
        procstr = procstr & "TouchScreenCreateCreditEMail"; 
      case kPOSButtonTypeCreateActivity:  
        procstr = procstr & "TouchScreenCreateActivity"; 
      case kPOSButtonTypeOpenCalendar:  
        procstr = procstr & "TouchScreenOpenCalendar"; 
      case kPOSButtonTypeChangeTerms:  
        procstr = procstr & "TouchScreenChangeTerms"; 
      case kPOSButtonTypeChangeAddress:  
        procstr = procstr & "TouchScreenChangeAddress"; 
      case kPOSButtonTypeCashupReport:  
        procstr = procstr & "TouchScreenCashupReport"; 
      case kPOSButtonTypeOpenSession:  
        procstr = procstr & "TouchScreenOpenSession"; 
      case kPOSButtonTypeCloseSession:  
        procstr = procstr & "TouchScreenCloseSession"; 
      case kPOSButtonTypePutCashFloat:  
        procstr = procstr & "TouchScreenPutCashFloat"; 
      case kPOSButtonTypeGetCashFloat:  
        procstr = procstr & "TouchScreenGetCashFloat"; 
      case kPOSButtonTypeManagerDiscountOverride:  
        procstr = procstr & "TouchScreenManagerDiscountOverride"; 
      case kPOSButtonTypeOpenTaxMatrix:  
        procstr = procstr & "TouchScreenOpenTaxMatrix"; 
      case kPOSButtonTypeReturn:  
        procstr = procstr & "TouchScreenReturn";
      case kPOSButtonTypeReturnReason:  
        procstr = procstr & "TouchScreenReturnReason"; 
        tagstr = POSBrw.Code;
      case kPOSButtonTypeReturnInvoiceNo:  
        procstr = procstr & "TouchScreenReturnInvNo";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeLookupSerialNr:  
        procstr = procstr & "TouchScreenLookupSerialNr";
      case kPOSButtonTypeMainSerialNr:  
        procstr = procstr & "TouchScreenMainSerialNr";
      case kPOSButtonTypeAppleWarrantyStatusCheck:  
        procstr = procstr & "TouchScreenAppleWarrantyStatusCheck";
      case kPOSButtonTypeAppleCreateAEOrder:  
        procstr = procstr & "TouchScreenAppleCreateAEOrder"; 
      case kPOSButtonTypeAppleCancelAEOrder:  
        procstr = procstr & "TouchScreenAppleCancelAEOrder"; 
      case kPOSButtonTypeLogin:  
        procstr = procstr & "TouchScreenButtonLogin";
      case kPOSButtonTypeDeleteItem:
        procstr = procstr & "TouchScreenDeleteItem";
      case kPOSButtonTypeLoyaltyPointsPayment:
        procstr = procstr & "TouchScreenLoyaltyPointsPayment";
      case kPOSButtonTypeLoyaltyPointsBonus:
        procstr = procstr & "TouchScreenLoyaltyPointsBonus";
      case kPOSButtonTypeGiftVoucherSales:
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeGiftReceipt:
        procstr = procstr & "TouchScreenGiftReceipt";
        case kPOSButtonTypePriceLookup:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypePOSCommand:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeCustomerSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSelectSalesman:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeBaggerSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSupervisorSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeVolumetricBarCodeScan:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSalesAssistant:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeItemSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeItemStatus:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeOpenCashDrawer:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypOpenInvoices:  
        procstr = procstr & "TouchScreenOpenInvoices";
      case kPOSButtonTypSaveInvoice:  
        procstr = procstr & "TouchScreenSaveInvoice";
      case kPOSButtonTypeBookings:  
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypePrintInvoice:  
        procstr = procstr & "TouchScreenPrint"; 
      case kPOSButtonTypePrintOrder:  
        procstr = "RestAccPrint";
      case kPOSButtonTypePrintFireOrder:  
        procstr = "RestAccPrintFireOrder";
      case kPOSButtonTypePrintCancellation:  
        procstr = "RestAccPrintCancel";
      case kPOSButtonTypePrintOrderToKitchen:  
        procstr = "RestAccPrintToKitchen";
//      case kPOSButtonTypeOpenCashDrawer:  //already above
//        procstr = "OpenCashDrawer";
      case kPOSButtonTypeCalculateTip:  
        procstr = "RestAccTip";
      case kPOSButtonTypeServiceCharge:  
        procstr = "RestAccServiceCharge";
      case kPOSButtonTypeHotelGuests:  
        procstr = "StayingTool";
      case kPOSButtonTypeSetTable:  
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSetCovers:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSetBarTabClass:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeMergeBarTabs:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSplitBarTabs:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSpecialMenu:  
        procstr = procstr & "TouchScreenSpecialMenu";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeReprintReceipt:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeXReading:
        procstr = procstr & "TouchScreenXReading";
      case kPOSButtonTypeYReading:
        procstr = procstr & "TouchScreenYReading";
      case kPOSButtonTypeAllInvoices:
        procstr = procstr & "TouchScreenAllInvoices";
      case kPOSButtonTypeSyncNow:
        procstr = procstr & "TouchScreenSyncNow";
      case kPOSButtonTypeRunReportOnServer:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
			case 100:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);// Edit ************************** Wednesday, 5 December 2012 11:43:59
        procstr = "";
      case 101:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);// Edit ************************** Wednesday, 5 December 2012 11:43:59
        procstr = "";
      case 102:
        procstr = procstr & "TouchScreenDeleteAll";// Edit ************************** Thursday, 16 May 2013 11:54:41
			case 103:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);// Edit ************************** Wednesday, 5 December 2012 11:43:59
				//CUNPTSSClassNewCustomer;
				procstr = "";
    end;
    
    if (procstr<>"") then begin
      if (tagstr<>"") then begin
        ColourPushButtonTag(h,v,h + width,v + height,procstr,lblstr,POSBrw.colnr,tagstr);
      end else begin
        ColourPushButton(h,v,h + width,v + height,procstr,lblstr,POSBrw.colnr);
      end;
    end;
    
    h = h + width + dh;
   // if (Mod(i+1,4)==0) then begin
    if (Mod(i+1,8)==0) then begin// Edit ************************** Tuesday, 25 December 2012 10:26:37
      v = v + height + dv;
      h = ah;
    end;
  end;
  
  return;
end;

global
procedure DrawPOSInterface_FAR(string bc1,string bc2,record POSButtonsVc POSBr,Integer acnt,string ovrclass,Integer stackspace)
begin
  record LocalMachineBlock LMb;
  longint h,v,i,h4;
  
  BlockLoad(LMb);
  
  h = 20; v = 26;
  
  //h2 = -150; h3 = -70;
  
  h4 = -24;
  if (LMb.WideScrollBars!=0) then begin
    h4 = -44;
  end;
  
  // DrawPOSStringList();
  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
     // DataList(420,105+60+15,h4,-10,"receipt");
      DataList(820,105+60+15,h4,-10,"receipt");// Edit ************************** Tuesday, 25 December 2012 10:17:20
      h = 8;
    case kPOSButtonsPositionRight:
      DataList(8,105+60+15,-430,-10,"receipt");
      h = -410;
  end;
  
  DataListColumn(1,6,90,AdjLeft,"artcode","òœ",M4Code);//???
  DataListColumn(1,96,-570,AdjLeft,"spec","‰«„",M4Str);//????????????
  DataListColumn(1,-550,-370,AdjRight,"SerialNr","‘„«—Â ”—Ì«·",M4Str);//GoogleTranslate
  if(true)then begin
    DataListColumn(1,-275,-210,AdjRight,"qty","„ﬁœ«—",M4Val);// Edit ************************** Thursday, 14 November 2013 15:02:22 
  end else begin
    DataListColumn(1,-275,-210,AdjRight,"qty","„ﬁœ«—",M4Val);// Edit ************************** Thursday, 14 November 2013 15:02:22 
  end;
  DataListColumn(1,-205,-150,AdjRight,"price","ﬁÌ„ ",M4Val); //????
  DataListColumn(1,-145,-90,AdjRight,"rebate"," Œ›Ì›",M4Val); // ?????? (Customer discount)
  DataListColumn(1,-85,-26,AdjRight,"rowsum","Ã„⁄",M4Val); //?????
  DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar. 
  
  DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
  
  DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
  DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
  DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
  DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
  DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
  
  // DrawPOSData();
  
  if (acnt>0) then begin
    DrawPOSButtons_FAR(h,v,98,55,2,5,POSBr,ovrclass,stackspace);
  end else begin
    RecordClear(POSBr);
    DrawPOSButtons_FAR(h,v,98,55,2,5,POSBr,ovrclass,stackspace);
  end;
  
  //selitemline = StringToInt(GetWindowString(wn,"touchscreenselecteditemtag"));
  //SetSelectedListLine(wn,selitemline);
  
  return;
end;

global
procedure DisplayRecordDetails_FAR(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                               string loyaltycardnr,Integer ShowBaggerSupervisor,string bagger,string supervisor,string disccardnr,val discfwdbal,
                               string sessiondesc,Boolean showlc,string OfficialNum)
begin
  real h,h2,h3,v;
  string 255 tstr;

  h = ah;
  h2 = h + 150;
  h3 = h + 240;
  v = av;

  StaticText(h,v,Left(compname,20),false);

  StaticText(h2,v,td,false);
  StaticText(h3,v,Left(tt,5),false);
  StaticText(h,v+=20,nr,false);
  if (HasLocalization("PRT")) then begin  //!!TRANSLATE
    tstr = "»œÊ‰ —”„Ì:" & OfficialNum; //!!TRANSLATE
    StaticText(h,v+=20,tstr,false);
  end;
  StaticText(h2,v,"’‰œÊﬁ" & lmc,false);
  StaticText(h3,v,sm,false);

  tstr = "„‘ —Ì";//??????
  tstr = tstr & custcode;
  StaticText(h,v+=20,tstr,false);
  StaticText(h2,v,Left(custname,35),false);

  if (showlc) then begin
    tstr = "ò«—  ·ÊÌ«· Ì";//????????????? ?????
    tstr = tstr & loyaltycardnr;
    StaticText(h,v+=20,tstr,false);
  end else begin
    v = v + 20;
  end;

  if (ShowBaggerSupervisor!=0) then begin
    tstr = "»” Â »‰œÌ";//Googletranslate ?????????
    tstr = tstr & bagger;
    StaticText(h2,v,tstr,false);
    v = v + 20;
  end;
  
  if (nonblank(disccardnr)) then begin
    tstr = "ò«—   Œ›Ì›";//???????. ????. GoogleTranslate 
    tstr = tstr & disccardnr;
    StaticText(h2,v,tstr,false);
    tstr = " ⁄«œ·" & discfwdbal;//?????? GoogleTranslate
    StaticText(h2,v+=20,tstr,false);
  end;
  if (nonblank(sessiondesc)) then begin
    StaticText(h,v+=20,sessiondesc,false);
  end;
  return;
end;

window IVDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")//RUS -> ENG
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs;
  string 255 label,tstr;// Edit ************************** Tuesday, 4 December 2012 10:28:40
  WindowBegin("’Ê— Õ”«»",IVDClass,CGview,-); //Invoice
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
if (HasTouchScreenLook==false) then begin
  ActiveFieldOnNew("CustCode");  
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"?????",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"??????",Normal,CustCode,false,CUSClass);
  EditField(225,v,95,"?????",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  EnterSkip(PayDeal);
  EditField(h=225,v=vm,-40,"????.",Normal,Addr0,false,0);
  EditField(h+165,vm=(v+=20),135,"??.?????",Normal,OfficialSerNr,false,LegalInvNrSClass);
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  TileButton(1,"?????");
  TileButton(2,"??????");
  Tile(1,100,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v,25,"??????? ??????",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h3,v,80,"????????",Normal,SalesMan,false,UserSClass);
  EditField(h1,v+=vs,-20,"???????????",Normal,InvComment,false,0);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);

  EditField(-150,-21,95,"?????",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"?????",0,ArtCode,false,INSClass);
  if (HasVarieties) then begin
  MatCol(t,94,"???-??",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"???-??",0,Quant,true,0); 
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"?????",0,ArtCode,false,INSClass);
  if (HasVarieties) then begin
  MatCol(t,94,"???-??",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"???-??",0,Quant,true,0); 
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"??????????? ??/?",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeInterest,32,"????",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"????????? ??????",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0); 
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"????? ??????????",true);
  MatCol(t,170,"",0,CUPNr,true,ARPay2SClass);
  MatCol(t,-300,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the VAT sum, Recipe holds the date of prepaym. 
  MatCol(t,-100,"",0,Sum,true,0);  
  MatText(t=kInvoiceRowTypeLoan,32,"????",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"% ?????",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeVoid,28,"????????",false);
  MatColTL(t,65,"???????",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"?????",0,ArtCode,false,INSClass);
  if (HasVarieties) then begin
  MatCol(t,150,"?-??",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"?-??",0,Quant,true,0); 
  end;
  MatCol(t,190,"????",0,Price,true,0);
  MatCol(t,250,"????????",0,Spec,false,0);
  MatCol(t,-195,"???. ?",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"?????",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"?????",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"?????",0,-1,ViewOnly,0,Sum,true,0);
  //  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"??? ?????? ? ??? ??????????? ?? ????????? ?? ??????",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"?????",0,ArtCode,false,INSClass);
  MatCol(t,91,"???",0,Quant,true,0); 
  MatText(t=kInvoiceRowTypeRetention,32,"?????????",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"SalesAcc",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"?????",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"??",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"?????",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"???",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"?????",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=kInvoiceRowTypeCashPayment,32,"?????.",true);
  MatCol(t,94,"?????",0,Sum,true,0);
  MatCol(t,198,"??????",0,CurncyCode,true,CurncyCodeSClass); 
  MatCol(t,250,"????.",0,Spec,false,0); 
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"?????",0,Sum,true,0);
  MatCol(t,108,"?????",0,Points,true,0);
  MatCol(t,148,"??????",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"????.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"?????",0,Points,true,0);
  MatCol(t,141,"????.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,58,"?????",0,Sum,true,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"???????????",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"?????????",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"????????.",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"????????.",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"????????? ?????",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"???????????? ?????",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"????????",true);
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,INSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"???.",0,Spec,false,0);
  MatCol(t,-235,"???? ?????????",0,SalesAcc,false,0);
  MatCol(t,-135,"?????",0,Sum,true,0);
  MatCol(t,-30,"???",0,VATCode,false,0);

  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0); 
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */  
  //t = 21 kInvoiceRowTypeChequePayment  
  Flip(1);
  //  MatCol(t=kInvoiceRowTypeNormal,194,"Description",0,Spec,false,0);
  MatCol(t=kInvoiceRowTypeNormal,144,"????????",0,Spec,false,0);
  MatCol(t,-235,"????",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"?????",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"????????",0,Spec,false,0);
  MatCol(t,-235,"????",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"?????",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"????????",0,Spec,false,0);
  MatCol(t,-235,"????",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"?????",0,Sum,true,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  SpecialMenu("?????? ??????",'I',0,"ItemStatusIVDsm");
  SpecialMenu("???????? ??????? ??????",' ',0,"PasteRetItemIVDsm");
  SpecialMenu("???????? ?????? ?? ???????????",'B',6,"PasteStoclMovToIVsm");
  
end else begin

  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v;
  record IVVc IVr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;

  BlockLoad(LMb);    
    wn = CurWindow;
    GetScreenSize(wn,tp,lt,bm,rt);
    switch (GuiType) begin
      case kGuiCocoa:      
        bm = bm - 80;
      case kGuiGDI:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiWPF:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
    end;
    
    page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    if (page<1) then begin
      page = 1;
    end;
    ReadPOSButtons("IVDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr,acnt);
    SetWRect(lt,tp,rt,bm); 
    BrowseButtons(false);
    Sizeable(-1,-1,0,0);
    BrowseButtons(false);
    DynamicWindow;
    UseView(IVVc);
    ActiveFieldOnNew("ivcashcommand");
    ActiveFieldOnOK("ivcashcommand");
    ToolBar;
//    PushButton(-340,5,-340 + 34,5+18,ToolPasteSpec,"v");
    EndToolBar;
    
    v = 20;
    h = -300; h2 = -150; h3 = -70; h4 = -10;
    
    wn = CurWindow;
    if (wn>0) then begin
      switch (GetWindowClass(wn)) begin
        case "IVDClass":
          GetWindowRecord(wn,IVr);
      end;
    end;
    td = IVr.TransDate;
    if (blankdate(td)) then begin td = CurrentDate; end;
    tt = IVr.TransTime;
    if (blanktime(tt)) then begin tt = CurrentTime; end;
    lmc = IVr.MachineName;
    if (blanktime(lmc)) then begin lmc = LMb.LocalMachineCode; end;
    sm = IVr.SalesMan;
    if (blanktime(sm)) then begin sm = CurrentUser; end;
    nr = "’Ê— Õ”«»";
    if (IVr.SerNr>0) then begin
      nr = nr & IVr.SerNr;
    end;
        
    if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin// Edit ************************** Thursday, 14 November 2013 14:37:42
      sessdesc = "Ã·”Â »«“ «” "; //?????? ???????
    end else begin
      sessdesc = "*** Ã·”Â »” Â «”  ***";    //?????? ??????? GoogleTranslate
    end;// Edit ************************** Thursday, 14 November 2013 14:37:40
      sessdesc = " Œ›Ì› „‘ —Ì " & IVr.RebCode;
      
    DisplayRecordDetails_FAR(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","","",blankval,sessdesc,true,IVr.OfficialSerNr);
    
    if (bm<650) then begin
      SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(360,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
    end else begin
      SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(360,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
    end;
		
		
		
    HalPushButton(20,350,180,680,"IVDClassUpdateWebBrowser","„‘«ÂœÂ ¬Ì „");//???????? ???????? ??????
    SoftEditFieldTLX(20,380,650,"",M4Str,ViewOnly,100,10,patM4black,"CustomerDisplayData_Line3",false,0);
   	WebPage(20,400,700,-80,"$subset","");
    //WebPage(20,700,390,-80,"$HWStore","");
    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        SoftEditField(110,-22,200,"ò«·«/›—„«‰"  ,Normal ,"ivcashcommand",false,INSClass,M4Str,255);//?????/???????
      case kPOSButtonsPositionRight:
        SoftEditField(-260,-22,200,"ò«·«/›—„«‰"  ,Normal ,"ivcashcommand",false,INSClass,M4Str,255);//?????/???????
    end;
		EditField(360,116,-10,"‰Ÿ—« ",Normal,InvComment,false,0);//???????????
    
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);        
    DrawPOSInterface_FAR(bc1,bc2,POSBr,acnt,"",100);
    BottomBar;
    SpecialMenu("«÷«›Â ò—œ‰ »«“ê‘ ",' ',0,"PasteRetItemIVDsm");//???????? ??????? ??????
    SpecialMenu("«ﬁ·«„ —» «“ Õ—ò ",'B',6,"PasteStoclMovToIVsm");
end;
  EndWindow;
end;