external procedure ExtractObj(string,var Integer,var string);external function val AbsoluteVal(val);external function roundmode SetRoundModeD(Integer);external function Boolean SetInSet2(string,string);external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);global //Edit***************************Sasha2,12:58 22.03.2016 {function string 255 NewM4PadString(string instr,Integer padlen,string padchar,Boolean padleft)BEGIN  string 255 tstr,t2;  Integer i;  Integer toff;    toff = 0;  for (i = 1; i<=padlen ;i=i+1) begin tstr = tstr & padchar; end;  if (padleft) then begin    tstr = tstr & instr;    tstr = Right(tstr,(len(tstr)-len(instr)));      end else begin    t2 = tstr;    tstr = instr;    tstr = tstr & t2;    tstr = Left(tstr,padlen);  end;    NewM4PadString = tstr;  RETURN;END; //Edit***************************Sasha2,12:58 22.03.2016 }global //Edit***************************Sasha2,12:57 22.03.2016 {procedure GruppoCoinStocKCountMn(record RcVc RepSpec)begin  record CoinSettingsBlock CoinSb;  record ItemStatusVc ISr;  record LocationVc Locr;  record INVc INr;  record PLVc PLr;  record SysFormatBlock SysFormatRec;  string 255 filename;  area ames;  string 20 curloc,datestring,barcode,price,qty;  integer pos,storenumber; //storenumber!!!!!!!!!Необходимое для выгрузки значение Store-number. Предполагается,                           //что этот Store-number(StoreID) будет занесен в карточку склада.  boolean TrHs,testf,initfile;  LongInt reccnt;  string 5 nextline;        BlockLoad(SysFormatRec);    BlockLoad(CoinSb);    datestring = DateToString(CurrentDate,"YYYYMMDD");    filename = "PST" & CoinSb.ClientCode & "_" & datestring & ".TXT";  	CreateFile(filename);  	CloseFile;        nextline = chr(13) & chr(10);    reccnt = 0;    pos = 0;    storenumber = CoinSb.ClientCode; //Locr. Нужно обязательно указать Store-number(StoreID)    if (storenumber<=0 or len(storenumber)!=4) then begin      TrHs = false;      goto LStocKCountGC;    end;    AddTextToArea("**INIT**STOCOUNT" & datestring & storenumber & nextline, ames);    ExtractObjWithSeparator(",",CoinSb.Locations,true,pos,curloc);    while (NonBlank(curloc)) begin      testf = false;      Locr.Code = curloc;      testf = ReadFirstMain(Locr,1,true);      if (testf) then begin        TrHs = true;        ISr.Location = Locr.Code;                while (LoopKey("Location",ISr,1,TrHs)) begin          if (ISr.Location!=Locr.Code) then begin TrHs=false; end;          if (TrHs) then begin            INr.Code = ISr.Code;            ReadFirstMain(INr,1,true);            if (len(INr.BarCode)==13) then begin              barcode = INr.BarCode;            end else begin              barcode = NewM4PadString(ISr.Code,13,"0",false);            end;            qty = "+" & NewM4PadString(ValToString(ISr.Instock,M45Val,"",SysFormatRec.decimalPt,1),6,"0",true);            PLr.PLCode = "RRP";            PLr.ArtCode = ISr.Code;            ReadFirstMain(PLr,2,true);            price = ValToString(Round(PLr.ExVatPrice,SetRoundModeD(2)),M423Val,"","",0);            price = "+" & NewM4PadString(price,10,"0",true);            AddTextToArea("STOCOUNT" & storenumber & "I" & datestring & barcode & qty & price & nextline, ames);            reccnt = reccnt + 1;            end;        end;      end;      ExtractObjWithSeparator(",",CoinSb.Locations,true,pos,curloc)    end;    LStocKCountGC:;      	 	   AddTextToArea("**FINE**STOCOUNT" & datestring & storenumber & NewM4PadString(reccnt,7,"0",true), ames);	   WriteAreaToFile(ames,filename,0);	   return;end; //Edit***************************Sasha2,12:58 22.03.2016 }global procedure GruppoCoinSalesMn(record RcVc RepSpec)	//Edit----------------------Dima  21.03.2016begin  record CoinSettingsBlock CoinSb;  record INVc INr;  record IVVc IVr;  row IVVc IVrw;	string 20 storeID,vendtran,transdateStr,quant,pricevalue,discountCode,discountvalue;	string 10 operatorID,terminalID,transNr,countStr,typeOfRegistration;	string 255 rowdata;	date transdate;	boolean TrHs,testf;	integer count,sign,i,qty;	longint price,discount;	string 255 filename,itemcode;	area ames;	string 5 nextline;		BlockLoad(CoinSb);	transdate = RepSpec.d1;	if (BlankDate(transdate)) then begin		transdate = CurrentDate;	end;	transdateStr = 	DateToString(transdate,"YYYYMMDD");	filename = "PSL" & CoinSb.ClientCode & "_" & transdateStr & ".TXT";	CreateFile(filename);	CloseFile;		nextline = chr(13) & chr(10);	vendtran = "VENDTRAN";	storeID = CoinSb.ClientCode;	operatorID = "0001"; //IVr.SalesMan field is longer then 4 chars. so we fill it with "0001" always.	terminalID = "01"; //POS-terminal number	typeOfRegistration = "LL"; //first char for ArtCode, second for price	//L means that value was looked up from the DB	//and D - that value was entered manually		//Header	AddTextToArea("**INIT**" & vendtran & transdateStr & storeID & nextline, ames);		//Sales/returns transaction	TrHs = true;	IVr.InvDate = transdate;	While(LoopKey("InvDate",IVr,1,TrHs)) begin		sign = 1;		testf = true;		if (IVr.InvDate>transdate) then begin TrHs = false; testf = false; end;		if ( SetInSet2(IVr.Location,CoinSb.Locations)==false) then begin testf = false; end;		if (testf) then begin			if(IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales)then begin sign=-1; end;			for(i=0;i<MatRowCnt(IVr);i=i+1) begin				MatRowGet(IVr,i,IVrw);				if (IVrw.stp==kInvoiceRowTypeNormal) then begin					rowdata = vendtran;					if (IVrw.Quant*sign>0) then begin						rowdata = rowdata & "7";  //sales					end else begin						rowdata = rowdata & "4";	//returns					end;					INr.Code = IVrw.ArtCode;					if (ReadFirstMain(INr,1,true) and NonBlank(INr.BarCode) and len(INr.BarCode)==13) then begin					  itemcode = INr.BarCode;					end else begin					  itemcode = "0000000000000";					end;					rowdata = rowdata & transdateStr & storeID & itemcode;					qty = AbsoluteVal(IVrw.Quant); //cut decimals;					quant = "+" & Right("000000" & qty,6);						price = AbsoluteVal(IVrw.Price * IVrw.Quant * 100);					pricevalue = 	"+" & Right("0000000000" & price,10);					discount = price - AbsoluteVal(IVrw.Sum)*100;					discountvalue = "+" & Right("00000000" & discount,8);					discountCode = "  "; //two spaces					if (nonblank(IVrw.vRebate)) then begin discountCode = "93"; end;					transNr = IVr.SerNr;					rowdata = rowdata & quant & Left(IVr.CurncyCode,3) & pricevalue & discountCode & discountvalue;					rowdata = rowdata & operatorID & terminalID & Right(transNr,4) & typeOfRegistration;					AddTextToArea(rowdata & nextline, ames);					count = count + 1;				end;				end;  			end;	end;		//Trailer record	countStr = Right("0000000" & count,7);	AddTextToArea("**FINE**" & vendtran & transdateStr & storeID & countStr, ames);	WriteAreaToFile(ames,"CoinOut/" & filename,0);			//createfile("sss.txt");	//openexportfile("sss.txt",false);		//startformat(15);	//	outstring(0,0,vendtran & transdateStr,false);	//EndFormat;	//CloseFile;  return;end;global //Edit***************************Sasha2,12:57 22.03.2016 {procedure GruppoCoinConfArrivalMn(date indate)begin  record CoinSettingsBlock CoinSb;  string 255 filename,rowdata;  area ames;  string 20 curloc,datestring,barcode,price,qty;  integer pos,storenumber; //storenumber!!!!!!!!!Необходимое для выгрузки значение Store-number. Предполагается,                           //что этот Store-number(StoreID) будет занесен в карточку склада.  boolean TrHs,testf,initfile;  LongInt reccnt;  string 5 nextline;  date arriveDate;        BlockLoad(CoinSb);    arriveDate = DateToString(indate,"YYYYMMDD");    datestring = DateToString(CurrentDate,"YYYYMMDD");    filename = "AR1" & CoinSb.ClientCode & "_" & datestring & ".TXT";  	CreateFile(filename);  	CloseFile;        /*nextline = chr(13) & chr(10);    reccnt = 0;    pos = 0;    storenumber = CoinSb.ClientCode;    if (storenumber<=0 or len(storenumber)!=4) then begin      TrHs = false;      goto LGruppoCoinConfArrival;    end;    AddTextToArea("**INIT**ARRICONF" & datestring & storenumber & nextline, ames);    rowdata = "ARRICONF" & storenumber & arriveDate*/    AddTextToArea(rowdata & nextline, ames);    LGruppoCoinConfArrival:;      	 	   AddTextToArea("**FINE**ARRICONF" & datestring & storenumber & NewM4PadString(reccnt,7,"0",true), ames);	   WriteAreaToFile(ames,filename,0);	   return;end; //Edit***************************Sasha2,12:58 22.03.2016 }global //Edit***************************Sasha2,12:11 29.06.2016procedure GruppoCoinManualMn(record RcVc RepSpec) begindate sd,ed;	sd = RepSpec.sStartDate;	ed = RepSpec.sEndDate;  if (RepSpec.flags[1]==1) then begin  	  	if(nonblank(RepSpec.d1))then begin			GruppoCoinSalesMn(RepSpec);    end else begin    	RepSpec.d1 = sd;    	while(RepSpec.d1<=ed)begin				if(nonblankdate(RepSpec.d1))then begin					GruppoCoinSalesMn(RepSpec);				end;				RepSpec.d1 = addday(RepSpec.d1,1);			end;    end;  end;  millisleep(200);  if (RepSpec.flags[2]==1) then begin    GruppoCoinStocKCountMn(RepSpec);  end;    /*CreateFile("out1/HansaTest.txt");	CloseFile;*/  return;end;procedure SetHeaderCoinPackList(var record CoinPackListVc CoinPackListr,string storeID,string storeID2,string transpBill,                                string transpBillDate,string deliverer,string recipient,string importer,                                string oviVATNum,string goodsCollAddr)begin      CoinPackListr.StoreID = storeID;    CoinPackListr.StoreID2 = storeID2;    CoinPackListr.TransportBill = transpBill;    CoinPackListr.TransportBillDate = transpBillDate;    CoinPackListr.Deliverer = deliverer;    CoinPackListr.Recipient = recipient;    CoinPackListr.Importer = importer;    CoinPackListr.OviesseVATnum = oviVATNum;    CoinPackListr.GoodsCollAddress = goodsCollAddr;      return;end;global //Edit***************************Sasha2,16:31 01.07.2016 {updating procedure GruppoCoinParsePackList(string path,string filename) begin  record CoinPackListVc CoinPackListr;  area inData,acarriage,extractedData,areaaa;  string 5 nextline;  string 15 storeID,storeID2,transpBill,transpBillDate;  string 100 deliverer,recipient,importer,oviVATNum,goodsCollAddr;  LongInt j,i,inDataLen,extrDataLen,prevpos,pos;  boolean headerf;        nextline = chr(13) & chr(10);        AddFileToArea(path & filename,inData,false);    inDataLen = GetAreaLength(inData);    if (inDataLen>0) then begin       prevpos = 0;      for (j=0;j<inDataLen;j=j+1) begin        if (Asc(GetStringFromArea(inData,j,1))==10) then begin          SetAreaZeroSize(extractedData);          GetAreaFromArea(inData,prevpos,j+1-prevpos,extractedData);          prevpos = j + 1;          i = 0;          /*SetAreaZeroSize(areaaa);          AddTextToArea(prevpos & "!!!!" & GetStringFromArea(extractedData,i,4), areaaa);          WriteAreaToFile(areaaa,"parsed.txt",1);*/          extrDataLen = GetAreaLength(extractedData)/2;          if (extrDataLen>0) then begin            switch (GetStringFromArea(extractedData,i,2)) begin              case "TS":                i = i + 2;                headerf = true;                storeID = GetStringFromArea(extractedData,i,4);                i = i + 4;                storeID2 = GetStringFromArea(extractedData,i,4);                i = i + 4;                transpBill = GetStringFromArea(extractedData,i,9);                i = i + 9;                transpBillDate = GetStringFromArea(extractedData,i,8);                i = i + 8;                //skip row number                i = i + 5;                deliverer = GetStringFromArea(extractedData,i,70);                i = i + 70;                recipient = GetStringFromArea(extractedData,i,70);                i = i + 70;                importer = GetStringFromArea(extractedData,i,70);                i = i + 70;                oviVATNum = GetStringFromArea(extractedData,i,11);                i = i + 11;                goodsCollAddr = GetStringFromArea(extractedData,i,95);                i = i + 95;              case "DT":                if (headerf) then begin                  RECORDNEW(CoinPackListr);                  CoinPackListr.RecordType = "DT";                  CoinPackListr.ImpDate = CurrentDate;                  CoinPackListr.ImpTime = CurrentTime;                  CoinPackListr.SerNr = NextSerNr("CoinPackListVc",CoinPackListr.ImpDate,-1,false,"");                  CoinPackListr.FileName = filename;                  SetHeaderCoinPackList(CoinPackListr,storeID,storeID2,transpBill,transpBillDate,deliverer,recipient,importer,oviVATNum,goodsCollAddr);                  i = i + 2 + 4 + 4 + 9 + 8;                  if ((i + 5)<=extrDataLen) then begin                    CoinPackListr.RowNumber = GetStringFromArea(extractedData,i,5);                    i = i + 5;                  end;                  if ((i + 13)<=extrDataLen) then begin                    CoinPackListr.PalletCode = GetStringFromArea(extractedData,i,13);                    i = i + 13;                    end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.DistribNum = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.PackGroupNum = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.NumOfPackages = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.SKUNumber = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 51)<=extrDataLen) then begin                    CoinPackListr.ItemDescription = GetStringFromArea(extractedData,i,51);                    i = i + 51;                  end;                  if ((i + 78)<=extrDataLen) then begin                    CoinPackListr.ItemComposition = GetStringFromArea(extractedData,i,78);                    i = i + 78;                  end;                  if ((i + 10)<=extrDataLen) then begin                    CoinPackListr.GenderDescription = GetStringFromArea(extractedData,i,10);                    i = i + 10;                  end;                  if ((i + 10)<=extrDataLen) then begin                    CoinPackListr.Fabric = GetStringFromArea(extractedData,i,10);                    i = i + 10;                  end;                  if ((i + 3)<=extrDataLen) then begin                    CoinPackListr.CountryOfOrigin = GetStringFromArea(extractedData,i,3);                    i = i + 3;                  end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.CustomsCode = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.Quantity = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 11)<=extrDataLen) then begin                    CoinPackListr.GlobGrossWeight = GetStringFromArea(extractedData,i,11);                    i = i + 11;                  end;                  if ((i + 11)<=extrDataLen) then begin                    CoinPackListr.GlobNetWeight = GetStringFromArea(extractedData,i,11);                    i = i + 11;                  end;                  if ((i + 11)<=extrDataLen) then begin                    CoinPackListr.UnitCostPrice = GetStringFromArea(extractedData,i,11);                    i = i + 11;                  end;                  if ((i + 1)<=extrDataLen) then begin                    CoinPackListr.ExtraUE = GetStringFromArea(extractedData,i,1);                    i = i + 1;                  end;                  if ((i + 9)<=extrDataLen) then begin                    CoinPackListr.ItalCustCode = GetStringFromArea(extractedData,i,9);                    i = i + 9;                  end;                  if ((i + 11)<=extrDataLen) then begin                    CoinPackListr.UnitGrossWeight = GetStringFromArea(extractedData,i,11);                    i = i + 11;                  end;                  if ((i + 3)<=extrDataLen) then begin                    CoinPackListr.CostCurCode = GetStringFromArea(extractedData,i,3);                    i = i + 3;                  end;                  if ((i + 10)<=extrDataLen) then begin                    CoinPackListr.InvoiceNum = GetStringFromArea(extractedData,i,10);                    i = i + 10;                  end;                  if ((i + 8)<=extrDataLen) then begin                    CoinPackListr.InvoiceDate = GetStringFromArea(extractedData,i,8);                    i = i + 8;                  end;                  if ((i + 13)<=extrDataLen) then begin                    CoinPackListr.EAN = GetStringFromArea(extractedData,i,13);                    i = i + 13;                  end;                  LogText(0, "i before:" & i & " len" & extrDataLen);                  if ((i + 13)<=extrDataLen) then begin //can repeat up to 12 times?                    CoinPackListr.OtherPalletCodes = GetStringFromArea(extractedData,i,13);                    i = i + 13;                  end;                  LogText(0, "i after:" & i);                  if (CoinPackListr.SerNr>0) then begin                    if (RECORDSTORE(CoinPackListr,false)==false) then begin                      LogText(0,"Packlist " & FileName & " was no saved");                     end;                  end else begin                    LogText(0,"Packlist " & FileName & " got no SerNr");                    end;                end;              case "PK":                if (headerf) then begin                  RECORDNEW(CoinPackListr);                  CoinPackListr.RecordType = "PK";                  CoinPackListr.ImpDate = CurrentDate;                  CoinPackListr.ImpTime = CurrentTime;                  CoinPackListr.SerNr = NextSerNr("CoinPackListVc",CoinPackListr.ImpDate,-1,false,"");                  CoinPackListr.FileName = filename;                  SetHeaderCoinPackList(CoinPackListr,storeID,storeID2,transpBill,transpBillDate,deliverer,recipient,importer,oviVATNum,goodsCollAddr);                  i = i + 2 + 4 + 4 + 9 + 8;                  CoinPackListr.RowNumber = GetStringFromArea(extractedData,i,5);                  i = i + 5;                  CoinPackListr.PackGroupNum = GetStringFromArea(extractedData,i,9);                  i = i + 9;                  CoinPackListr.EAN = GetStringFromArea(extractedData,i,13);                  i = i + 13;                  if (CoinPackListr.SerNr>0) then begin                    if (RECORDSTORE(CoinPackListr,false)==false) then begin                      LogText(0,"Packlist " & FileName & " was no saved");                     end;                  end else begin                    LogText(0,"Packlist " & FileName & " got no SerNr");                    end;                end;            end;          end;          j = j + i;        end;      end;    end;    //Delete_File(filepath);    LGruppoCoinParsePackList:;      return;end; //Edit***************************Sasha2,16:31 01.07.2016 }global //Edit***************************Sasha2,16:31 01.07.2016 {updating procedure GruppoCoinSearchInputFiles(record RcVc RepSpec) begin  string 255 path,filename;  Integer i,numoffiles;        path = "in\\";    numoffiles = CountFilesInDir(path);    for (i=0;i<numoffiles;i=i+1) begin      filename = GetFileNameInDir(path,i);      if (left(filename,3)=="DDT") then begin         GruppoCoinParsePackList(path,filename);      end;    end;    return;end; //Edit***************************Sasha2,16:31 01.07.2016 }global //Edit***************************Sasha2,14:21 04.07.2016updating procedure GruppoCoinDeletePackListsMn(record RcVc RepSpec) begin  record CoinPackListVc CoinPackListr;    CoinPackListr.SerNr = -1;  while (LoopMain(CoinPackListr,1,true)) begin    RecordDelete(CoinPackListr);    StepBack(CoinPackListr);  end;  return;end;