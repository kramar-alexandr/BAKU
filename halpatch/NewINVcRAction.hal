external function LongInt nINVcRecordCheck(var record INVc,record INVc,LongInt,LongInt,integer);
remote updating procedure CheckAndCreateClassification(var string,string,boolean);// Edit ************************** Wednesday, 14 August 2013 10:30:58

external procedure ExtractObj(string,var Integer,var string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote function string 20 ReturnFieldDIType(string,boolean); //Edit***************************Sasha2,10:55 08.12.2015
remote function boolean SkipCheckDIType(string); //Edit***************************Sasha2,16:35 25.12.2015



//Edit***************************Sasha2,18:12 07.12.2015 {
procedure HandleTypeField(string fieldname,string fieldcontent,string comptostring,var String outdispstr, var String outtypesstr) 
begin
  string 20 curtype;
  
    curtype = ReturnFieldDIType(fieldname,false);
    if (NonBlank(curtype) and SetInSet(curtype,comptostring)) then begin
      //if (fieldname!="SerNrf") then begin
      if (SkipCheckDIType(ReturnFieldDIType(fieldname,false))==false) then begin
        if (Blank(outdispstr)) then begin
          outdispstr = fieldcontent;
        end else begin
          outdispstr = outdispstr & "," & fieldcontent;
        end;
      end;
      outtypesstr = outtypesstr & curtype & ",";
    end;
      
  return;
end; //Edit***************************Sasha2,18:12 07.12.2015 }

//Edit***************************Sasha2,12:12 18.12.2015 {
function string 10 PrepareDICode(string indisp)
begin
  string 10 res,newdisp;
  integer i,lenth;
  string 1 c;
  
    res = "";
    newdisp = left(indisp,10);
    lenth = len(newdisp); 
    if (lenth>0) then begin
      for (i=0;i<lenth;i=i+1) begin
        c= Mid(newdisp,i,1);
        if (c==" " or c=="." or c==",") then begin
          res = res & "_";
        end else begin
          res = res & c;
        end;
      end;
      res = UpperCase(res);
    end;
    
  PrepareDICode = res;
  return;
end; //Edit***************************Sasha2,12:12 18.12.2015 }

updating//Edit***************************Sasha2,16:17 09.12.2015 {
function boolean DIsWithTypeExistsOrCreateSpecific(string indisps,var string outdisps,string type,var string mes)
begin
  boolean res,testf,testf1,TrHs,foundf;
  integer pos,i,lenth;
  string 20 classname;
  string 10 newdisp,suffix;
  record DIVc DIr;
  string 255 prepdisps;
  string 1 c;
  LongInt j;
  
    res = true;
    if (blank(type)) then begin
      res = false;
      mes = " No correlation between field and field type.";
      goto LDIsWithTypeExistsOrCreateSpecific;
    end;
    
    lenth = len(indisps); //deleting control symbols
    if (lenth>0) then begin
      for (i=0;i<lenth;i=i+1) begin
        c= Mid(indisps,i,1);
        if (Asc(c)>31) then begin
          prepdisps = prepdisps & c;
        end;
      end;
    end;
    
    outdisps = "";
    mes = "";
    pos = 0;
    ExtractObjWithSeparator(",",prepdisps,true,pos,classname);
		while (nonblank(classname)) begin
		
			lenth = len(classname);
      testf = true;
      i=0;
      while(testf and i<lenth) begin //cuts whitespaces at the beginning
      	if(mid(classname,i,1)!=" ")then begin
      		testf = false;
      	end;
      	i=i+1;
      end;
      classname = mid(classname,i-1,lenth-i+1);
      
      lenth = len(classname);
      testf = true;
      i=lenth;
      while(testf and i>0) begin //cuts whitespaces in the end
      	if(mid(classname,i,1)!=" ")then begin
      		testf = false;
      	end;
      	i=i-1;
      end;
      classname = mid(classname,0,i+1); 
      
      if(nonblank(classname))then begin
        DIr.Code = classname;
        DIr.CType = type;
        if (!readfirstkey("CType",DIr,2,true)) then begin
          DIr.Name = classname;
          TrHs = true;
          foundf = false;
          while (LoopKey("DIName",DIr,1,TrHs)) begin
            if (DIr.Name!=classname) then begin TrHs=false; end;
            if (foundf==false and DIr.CType==type and DIr.Name==classname) then begin
              foundf = true;
              TrHs = false;
            end;
          end; RESETLOOP(DIr);
          if (!foundf) then begin
            testf = false;
            testf1 = false;
            suffix = "";
            switch (type) begin
              case "COLL_W":
                testf1 = true;
              case "COLL_J":
                testf1 = true;
              case "COLL_A":
                testf1 = true;
              case "WEIGHT": //supposed to be digital
                suffix = "WM";
                testf = true;
              case "D_CARAT": //supposed to be digital
                suffix = "DC";
                testf = true;
              case "CENT_ST": //supposed to be digital
                suffix = "CST";
                testf = true;
              case "CARAT": //supposed to be digital
                suffix = "CRT";
                testf = true;
              case "R_SIZE": //supposed to be digital
                suffix = "RS";
                testf = true;
              otherwise
                res = false;
                mes = USetStr(8182) & " " & USetStr(9588);
                goto LDIsWithTypeExistsOrCreateSpecific;
            end;
            if (testf) then begin
              newdisp = PrepareDICode(classname);
              if (NonBlank(newdisp)) then begin
                if (Left(newdisp,len(suffix))!=suffix) then begin
                  newdisp = left(suffix & newdisp,10);
                end;
                DIr.Code = newdisp;
                DIr.CType = type;
                if (Readfirstkey("CType",DIr,2,true)==false) then begin
                  DIr.Code = newdisp;
                  DIr.Name = classname;
                  DIr.CType = type;
                  if (RECORDSTORE(DIr,true)==false) then begin
                    res = false;
                    mes = " Can not store " & newdisp & " with type " & type & ".";
                    goto LDIsWithTypeExistsOrCreateSpecific;
                  end;
                end;
              end else begin
                res = false;
                mes = " New classification code is empty.";
                goto LDIsWithTypeExistsOrCreateSpecific;
              end;
            end;
            if (testf1) then begin
              newdisp = PrepareDICode(classname);
              if (NonBlank(newdisp)) then begin
                j = 1;
                newdisp = left(newdisp,len(newdisp) - len(j)) & j;
                DIr.Code = newdisp;
                DIr.CType = type;
                TrHs = Readfirstkey("CType",DIr,2,true);
                while (TrHs) begin
                  j = j + 1;
                  newdisp = left(newdisp,len(newdisp) - len(j)) & j;
                  DIr.Code = newdisp;
                  DIr.CType = type;
                  TrHs = Readfirstkey("CType",DIr,2,true);
                end;
                if (TrHs==false) then begin
                	recordnew(DIr);
                  DIr.Code = newdisp;
                  DIr.Name = classname;
                  DIr.CType = type;
                  if (RECORDSTORE(DIr,true)==false) then begin
                    res = false;
                    mes = " Can not store " & newdisp & "with type " & type & ".";
                    goto LDIsWithTypeExistsOrCreateSpecific;
                  end;
                end;
              end else begin
                res = false;
                mes = " New classification code is empty.";
                goto LDIsWithTypeExistsOrCreateSpecific;
              end;
            end;
          end;
          
        end;

        if (Blank(outdisps)) then begin
          outdisps = DIr.Code;
        end else begin
          outdisps = outdisps & "," & DIr.Code;
        end;
      end;
		  ExtractObjWithSeparator(",",prepdisps,true,pos,classname);
		end;
  
LDIsWithTypeExistsOrCreateSpecific:;  
    DIsWithTypeExistsOrCreateSpecific = res;
  return;
end; //Edit***************************Sasha2,16:17 09.12.2015 }

procedure CalcINPrice(var record INVc INr)
begin
val fr,to1,to2,br1,br2;

	GetFullCurncyRate(INr.LastPurchCurncyCode,CurrentDate,fr,to1,to2,br1,br2);
	if(fr==0 or to1==0)then begin
		fr=1; to1=1;
	end;
	
	INr.InPrice = INr.LastPurchPrice2/fr*to1;
	
end;

global procedure NormalizeCodeName(var string name)
begin
string 200 newclassname,c;
integer i,lenth,zercnt;
  
  lenth = len(name);
  for(i=0;i<lenth;i=i+1)begin
  	if((asc(mid(name,i,1))>32 and asc(mid(name,i,1))<127) or (asc(mid(name,i,1))>1039 and asc(mid(name,i,1))<1111))then begin
  		if((mid(name,i,1)!="\"") and (mid(name,i,1)!=",")and (mid(name,i,1)!=" "))then begin
  		newclassname = newclassname & mid(name,i,1);
  		end;
  	end;
  end;
  name = newclassname;
return;
end;


global
function LongInt NewINVcRecordRemoveTest(var record NewINVc newINr,record NewINVc newIN2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (newINr.OKFlag==1) then begin
    res = 0;
    messagebox(0,USetStr(1520));
  end;
  NewINVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt NewINVcRecordDefaults(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ItemSettingBlock ISb;
  Boolean lightFlag;
  record VATCodeBlock VATb;
  row VATCodeBlock VATrw;
  integer mtrw,i;
  
  blockload(VATb);
  if(matrowcnt(VATb)>0)then begin
  	matrowget(VATb,0,VATrw);
  end;
  
  BlockLoad(ISb);
  if (SingleUserMode) then begin
    newINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 
  end else begin
    newINr.SerNr = -1;
  end;
  newINr.TransDate = currentdate;
  newINr.VATCode = VATrw.VATCode;
  newINr.SalesMan = CurrentUser;
  newINr.Group = ISb.DefIGroup;
  newINr.WarrantyLength = ISb.WarrantyLength;
  newINr.Unittext = ISb.Unittext;
  newINr.SerNrf = ISb.SerNrf;
  newINr.UPrice1 = blankval;
  newINr.MinLevel = blankval;
  newINr.Bonus = blankval;
  newINr.InPrice = blankval;
  newINr.ExtraCost = blankval;
  newINr.PriceFactor = blankval;
  newINr.UnitCoefficient = blankval;
  newINr.Width = blankval;
  newINr.Height = blankval;
  newINr.Depth = blankval;
  newINr.AlcPrc = blankval;
  newINr.LastPriceChange = CurrentDate;
  newINr.LastBasePriceChange = CurrentDate;
  newINr.Terminated = 0;
  newINr.ItemMaterial = 0;
  newINr.Perceptions = ISb.Perceptions;
   
	newINr.ItemType = ISb.DefItemType;
	newINr.UpdateCost = ISb.UpdateCost;
	newINr.SRUpdateCost = ISb.SRUpdateCost;
  newINr.colnr = 20;
  NewINVcRecordDefaults = res; 
  RETURN;
END;


global
updating function LongInt NewINVcRecordSave(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SRBlock SRb;
  string 255 lastitemnr,curitemnr;
  LongInt lastinnr,curinnr;

  
  
  NewINVcRecordSave = res; 
  return;
end;

global
function LongInt NewINVcRecordUpdate(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  
  NewINVcRecordUpdate = res; 
  RETURN;
END;

//Edit***************************Sasha2,9:23 10.03.2016 {
procedure FullFillINVc(var record INVc INr,record NewINVc newINr,row NewINVc newINrw,string group,string type)
begin
  
      if (NonBlank(group)) then begin
				INr.Group = group;
			end;
  	  if(nonblank(newINr.Name))then begin INr.Name=newINr.Name;  end; if(nonblank(newINrw.Name))then begin INr.Name=newINrw.Name;  end;
  		if(nonblank(newINr.Unittext))then begin INr.Unittext=newINr.Unittext;  end; if(nonblank(newINrw.Unittext))then begin INr.Unittext=newINrw.Unittext;  end;
  		//if(nonblank(newINr.MinLevel))then begin INr.MinLevel=newINr.MinLevel;  end; if(nonblank(newINrw.MinLevel))then begin INr.MinLevel=newINrw.MinLevel;  end;
  		if(nonblank(newINr.Objects))then begin INr.Objects=newINr.Objects;  end; if(nonblank(newINrw.Objects))then begin INr.Objects=newINrw.Objects;  end;
  		//if(nonblank(newINr.SalesAcc))then begin INr.SalesAcc=newINr.SalesAcc;  end; if(nonblank(newINrw.SalesAcc))then begin INr.SalesAcc=newINrw.SalesAcc;  end;
  		if(newINr.UPrice1>0)then begin INr.UPrice1=newINr.UPrice1;  end; if(newINrw.UPrice1>0)then begin INr.UPrice1=newINrw.UPrice1;  end;
  		if(newINr.ItemType>-1)then begin INr.ItemType=newINr.ItemType; end;//end; if(nonblank(newINrw.ItemType))then begin INr.ItemType=newINrw.ItemType;  end;
  		if(nonblank(newINr.Group))then begin INr.Group=newINr.Group;  end; if(nonblank(newINrw.Group))then begin INr.Group=newINrw.Group;  end;
  		//if(nonblank(newINr.InPrice))then begin INr.InPrice=newINr.InPrice;  end; if(nonblank(newINrw.InPrice))then begin INr.InPrice=newINrw.InPrice;  end;
  		//if(nonblank(newINr.InvCode))then begin INr.InvCode=newINr.InvCode;  end; if(nonblank(newINrw.InvCode))then begin INr.InvCode=newINrw.InvCode;  end;
  		//if(nonblank(newINr.ExtraCost))then begin INr.ExtraCost=newINr.ExtraCost;  end; if(nonblank(newINrw.ExtraCost))then begin INr.ExtraCost=newINrw.ExtraCost;  end;
  		if(newINr.SerNrf>=0)then begin INr.SerNrf=newINr.SerNrf;  end; if(newINrw.SerNrf>newINr.SerNrf)then begin INr.SerNrf=newINrw.SerNrf;  end;
  		//if(nonblank(newINr.Department))then begin INr.Department=newINr.Department;  end; if(nonblank(newINrw.Department))then begin INr.Department=newINrw.Department;  end;
  		//if(nonblank(newINr.Weight))then begin INr.Weight=newINr.Weight;  end; if(nonblank(newINrw.Weight))then begin INr.Weight=newINrw.Weight;  end;
  		//if(nonblank(newINr.Volume))then begin INr.Volume=newINr.Volume;  end; if(nonblank(newINrw.Volume))then begin INr.Volume=newINrw.Volume;  end;
  		//if(nonblank(newINr.EUCodex))then begin INr.EUCodex=newINr.EUCodex;  end; if(nonblank(newINrw.EUCodex))then begin INr.EUCodex=newINrw.EUCodex;  end;
  		//if(nonblank(newINr.InCurncyCode))then begin INr.InCurncyCode=newINr.InCurncyCode;  end; if(nonblank(newINrw.InCurncyCode))then begin INr.InCurncyCode=newINrw.InCurncyCode;  end;
  		//if(nonblank(newINr.Bonus))then begin INr.Bonus=newINr.Bonus;  end; if(nonblank(newINrw.Bonus))then begin INr.Bonus=newINrw.Bonus;  end;
  		//if(nonblank(newINr.Recepy))then begin INr.Recepy=newINr.Recepy;  end; if(nonblank(newINrw.Recepy))then begin INr.Recepy=newINrw.Recepy;  end;
  		//if(nonblank(newINr.Markup))then begin INr.Markup=newINr.Markup;  end; if(nonblank(newINrw.Markup))then begin INr.Markup=newINrw.Markup;  end;
  		if(nonblank(newINr.BarCode))then begin INr.BarCode=newINr.BarCode;  end; if(nonblank(newINrw.BarCode))then begin INr.BarCode=newINrw.BarCode;  end;
  		//if(nonblank(newINr.UpdateCost))then begin INr.UpdateCost=newINr.UpdateCost;  end; if(nonblank(newINrw.UpdateCost))then begin INr.UpdateCost=newINrw.UpdateCost;  end;
  		//if(nonblank(newINr.LastPriceChange))then begin INr.LastPriceChange=newINr.LastPriceChange;  end; if(nonblank(newINrw.LastPriceChange))then begin INr.LastPriceChange=newINrw.LastPriceChange;  end;
  		//if(nonblank(newINr.CalcPrice))then begin INr.CalcPrice=newINr.CalcPrice;  end; if(nonblank(newINrw.CalcPrice))then begin INr.CalcPrice=newINrw.CalcPrice;  end;
  		if(nonblank(newINr.VATCode))then begin INr.VATCode=newINr.VATCode;  end; if(nonblank(newINrw.VATCode))then begin INr.VATCode=newINrw.VATCode;  end;
  		//if(nonblank(newINr.PriceFactor))then begin INr.PriceFactor=newINr.PriceFactor;  end; if(nonblank(newINrw.PriceFactor))then begin INr.PriceFactor=newINrw.PriceFactor;  end;
  		//if(newINr.Terminated>0)then begin INr.Terminated=newINr.Terminated;  end; if(newINrw.Terminated>0)then begin INr.Terminated=newINrw.Terminated;  end;
  		//if(nonblank(newINr.AvgMarkup))then begin INr.AvgMarkup=newINr.AvgMarkup;  end; if(nonblank(newINrw.AvgMarkup))then begin INr.AvgMarkup=newINrw.AvgMarkup;  end;
  		if(nonblank(newINr.LastPurchCurncyCode))then begin INr.LastPurchCurncyCode=newINr.LastPurchCurncyCode;  end; if(nonblank(newINrw.LastPurchCurncyCode))then begin INr.LastPurchCurncyCode=newINrw.LastPurchCurncyCode;  end;
  		if(newINrw.LastPurchPrice2>0)then begin INr.LastPurchPrice2=newINrw.LastPurchPrice2; CalcINPrice(INr); end;
  		//if(nonblank(newINr.WeighedAvPrice))then begin INr.WeighedAvPrice=newINr.WeighedAvPrice;  end; if(nonblank(newINrw.WeighedAvPrice))then begin INr.WeighedAvPrice=newINrw.WeighedAvPrice;  end;
  		//if(nonblank(newINr.Conversion1))then begin INr.Conversion1=newINr.Conversion1;  end; if(nonblank(newINrw.Conversion1))then begin INr.Conversion1=newINrw.Conversion1;  end;
  		//if(nonblank(newINr.Conversion2))then begin INr.Conversion2=newINr.Conversion2;  end; if(nonblank(newINrw.Conversion2))then begin INr.Conversion2=newINrw.Conversion2;  end;
  		//if(nonblank(newINr.WarrantyLength))then begin INr.WarrantyLength=newINr.WarrantyLength;  end; if(nonblank(newINrw.WarrantyLength))then begin INr.WarrantyLength=newINrw.WarrantyLength;  end;
  		//if(nonblank(newINr.InvRecepy))then begin INr.InvRecepy=newINr.InvRecepy;  end; if(nonblank(newINrw.InvRecepy))then begin INr.InvRecepy=newINrw.InvRecepy;  end;
  		//if(nonblank(newINr.EUSalesAcc))then begin INr.EUSalesAcc=newINr.EUSalesAcc;  end; if(nonblank(newINrw.EUSalesAcc))then begin INr.EUSalesAcc=newINrw.EUSalesAcc;  end;
  		//if(nonblank(newINr.ExpSalesAcc))then begin INr.ExpSalesAcc=newINr.ExpSalesAcc;  end; if(nonblank(newINrw.ExpSalesAcc))then begin INr.ExpSalesAcc=newINrw.ExpSalesAcc;  end;
  		//if(nonblank(newINr.VATCodeEU))then begin INr.VATCodeEU=newINr.VATCodeEU;  end; if(nonblank(newINrw.VATCodeEU))then begin INr.VATCodeEU=newINrw.VATCodeEU;  end;
  		//if(nonblank(newINr.VATCodeExp))then begin INr.VATCodeExp=newINr.VATCodeExp;  end; if(nonblank(newINrw.VATCodeExp))then begin INr.VATCodeExp=newINrw.VATCodeExp;  end;
  		//if(nonblank(newINr.ChangePrice))then begin INr.ChangePrice=newINr.ChangePrice;  end; if(nonblank(newINrw.ChangePrice))then begin INr.ChangePrice=newINrw.ChangePrice;  end;
  		//if(nonblank(newINr.RebCode))then begin INr.RebCode=newINr.RebCode;  end; if(nonblank(newINrw.RebCode))then begin INr.RebCode=newINrw.RebCode;  end;
  		//if(nonblank(newINr.ExplodeRec))then begin INr.ExplodeRec=newINr.ExplodeRec;  end; if(nonblank(newINrw.ExplodeRec))then begin INr.ExplodeRec=newINrw.ExplodeRec;  end;
  		//if(nonblank(newINr.Unittext2))then begin INr.Unittext2=newINr.Unittext2;  end; if(nonblank(newINrw.Unittext2))then begin INr.Unittext2=newINrw.Unittext2;  end;
  		//if(nonblank(newINr.UnitCoefficient))then begin INr.UnitCoefficient=newINr.UnitCoefficient;  end; if(nonblank(newINrw.UnitCoefficient))then begin INr.UnitCoefficient=newINrw.UnitCoefficient;  end;
  		//if(nonblank(newINr.WarnText1))then begin INr.WarnText1=newINr.WarnText1;  end; if(nonblank(newINrw.WarnText1))then begin INr.WarnText1=newINrw.WarnText1;  end;
  		//if(nonblank(newINr.VARList))then begin INr.VARList=newINr.VARList;  end; if(nonblank(newINrw.VARList))then begin INr.VARList=newINrw.VARList;  end;
  		//if(nonblank(newINr.ItemMaterial))then begin INr.ItemMaterial=newINr.ItemMaterial;  end; if(nonblank(newINrw.ItemMaterial))then begin INr.ItemMaterial=newINrw.ItemMaterial;  end;
  		//if(nonblank(newINr.AlcPrc))then begin INr.AlcPrc=newINr.AlcPrc;  end; if(nonblank(newINrw.AlcPrc))then begin INr.AlcPrc=newINrw.AlcPrc;  end;
  		//if(nonblank(newINr.DefaultSource))then begin INr.DefaultSource=newINr.DefaultSource;  end; if(nonblank(newINrw.DefaultSource))then begin INr.DefaultSource=newINrw.DefaultSource;  end;
  		if(nonblank(newINr.AlternativeCode))then begin INr.AlternativeCode=newINr.AlternativeCode;  end; if(nonblank(newINrw.AlternativeCode))then begin INr.AlternativeCode=newINrw.AlternativeCode;  end;
  		//if(nonblank(newINr.CostAcc))then begin INr.CostAcc=newINr.CostAcc;  end; if(nonblank(newINrw.CostAcc))then begin INr.CostAcc=newINrw.CostAcc;  end;
  		//if(nonblank(newINr.DefLocation))then begin INr.DefLocation=newINr.DefLocation;  end; if(nonblank(newINrw.DefLocation))then begin INr.DefLocation=newINrw.DefLocation;  end;
  		//if(nonblank(newINr.LastBasePriceChange))then begin INr.LastBasePriceChange=newINr.LastBasePriceChange;  end; if(nonblank(newINrw.LastBasePriceChange))then begin INr.LastBasePriceChange=newINrw.LastBasePriceChange;  end;
  		//if(nonblank(newINr.MaxLevel))then begin INr.MaxLevel=newINr.MaxLevel;  end; if(nonblank(newINrw.MaxLevel))then begin INr.MaxLevel=newINrw.MaxLevel;  end;
  		//if(nonblank(newINr.LastPurchPrice2))then begin INr.LastPurchPrice2=newINr.LastPurchPrice2;  end; if(nonblank(newINrw.LastPurchPrice2))then begin INr.LastPurchPrice2=newINrw.LastPurchPrice2;  end;
  		//if(nonblank(newINr.Width))then begin INr.Width=newINr.Width;  end; if(nonblank(newINrw.Width))then begin INr.Width=newINrw.Width;  end;
  		//if(nonblank(newINr.Height))then begin INr.Height=newINr.Height;  end; if(nonblank(newINrw.Height))then begin INr.Height=newINrw.Height;  end;
  		//if(nonblank(newINr.Depth))then begin INr.Depth=newINr.Depth;  end; if(nonblank(newINrw.Depth))then begin INr.Depth=newINrw.Depth;  end;
  		//if(nonblank(newINr.ContractItem))then begin INr.ContractItem=newINr.ContractItem;  end; if(nonblank(newINrw.ContractItem))then begin INr.ContractItem=newINrw.ContractItem;  end;
  		//if(nonblank(newINr.Internal))then begin INr.Internal=newINr.Internal;  end; if(nonblank(newINrw.Internal))then begin INr.Internal=newINrw.Internal;  end;
  		//if(nonblank(newINr.InclItemFreight))then begin INr.InclItemFreight=newINr.InclItemFreight;  end; if(nonblank(newINrw.InclItemFreight))then begin INr.InclItemFreight=newINrw.InclItemFreight;  end;
  		//if(nonblank(newINr.FixedFreight))then begin INr.FixedFreight=newINr.FixedFreight;  end; if(nonblank(newINrw.FixedFreight))then begin INr.FixedFreight=newINrw.FixedFreight;  end;
  		if(nonblank(newINr.DispGroups))then begin INr.DispGroups=newINr.DispGroups;  end; 
  		if(nonblank(newINrw.DispGroups))then begin INr.DispGroups=newINrw.DispGroups;  end;		
  		if(nonblank(type))then begin INr.MainDisp=type;  end;	
  		//if(nonblank(newINr.HazLevCode))then begin INr.HazLevCode=newINr.HazLevCode;  end; if(nonblank(newINrw.HazLevCode))then begin INr.HazLevCode=newINrw.HazLevCode;  end;
  		//if(nonblank(newINr.Density))then begin INr.Density=newINr.Density;  end; if(nonblank(newINrw.Density))then begin INr.Density=newINrw.Density;  end;
  		//if(nonblank(newINr.xClassification))then begin INr.xClassification=newINr.xClassification;  end; if(nonblank(newINrw.xClassification))then begin INr.xClassification=newINrw.xClassification;  end;
  		//if(nonblank(newINr.CredSalesAcc))then begin INr.CredSalesAcc=newINr.CredSalesAcc;  end; if(nonblank(newINrw.CredSalesAcc))then begin INr.CredSalesAcc=newINrw.CredSalesAcc;  end;
  		//if(nonblank(newINr.CredEUSalesAcc))then begin INr.CredEUSalesAcc=newINr.CredEUSalesAcc;  end; if(nonblank(newINrw.CredEUSalesAcc))then begin INr.CredEUSalesAcc=newINrw.CredEUSalesAcc;  end;
  		//if(nonblank(newINr.CredExpSalesAcc))then begin INr.CredExpSalesAcc=newINr.CredExpSalesAcc;  end; if(nonblank(newINrw.CredExpSalesAcc))then begin INr.CredExpSalesAcc=newINrw.CredExpSalesAcc;  end;
  		//if(nonblank(newINr.CredVATCode))then begin INr.CredVATCode=newINr.CredVATCode;  end; if(nonblank(newINrw.CredVATCode))then begin INr.CredVATCode=newINrw.CredVATCode;  end;
  		//if(nonblank(newINr.CredVATCodeEU))then begin INr.CredVATCodeEU=newINr.CredVATCodeEU;  end; if(nonblank(newINrw.CredVATCodeEU))then begin INr.CredVATCodeEU=newINrw.CredVATCodeEU;  end;
  		//if(nonblank(newINr.CredVATCodeExp))then begin INr.CredVATCodeExp=newINr.CredVATCodeExp;  end; if(nonblank(newINrw.CredVATCodeExp))then begin INr.CredVATCodeExp=newINrw.CredVATCodeExp;  end;
  		//if(nonblank(newINr.RentalItem))then begin INr.RentalItem=newINr.RentalItem;  end; if(nonblank(newINrw.RentalItem))then begin INr.RentalItem=newINrw.RentalItem;  end;
  		//if(nonblank(newINr.CompUsage))then begin INr.CompUsage=newINr.CompUsage;  end; if(nonblank(newINrw.CompUsage))then begin INr.CompUsage=newINrw.CompUsage;  end;
  		//if(nonblank(newINr.colnr))then begin INr.colnr=newINr.colnr;  end; if(nonblank(newINrw.colnr))then begin INr.colnr=newINrw.colnr;  end;
  		//if(nonblank(newINr.VARMask))then begin INr.VARMask=newINr.VARMask;  end; if(nonblank(newINrw.VARMask))then begin INr.VARMask=newINrw.VARMask;  end;
  		//if(nonblank(newINr.VARRepOrder))then begin INr.VARRepOrder=newINr.VARRepOrder;  end; if(nonblank(newINrw.VARRepOrder))then begin INr.VARRepOrder=newINrw.VARRepOrder;  end;
  		//if(nonblank(newINr.VARSubsets))then begin INr.VARSubsets=newINr.VARSubsets;  end; if(nonblank(newINrw.VARSubsets))then begin INr.VARSubsets=newINrw.VARSubsets;  end;
  		//if(nonblank(newINr.LocArea))then begin INr.LocArea=newINr.LocArea;  end; if(nonblank(newINrw.LocArea))then begin INr.LocArea=newINrw.LocArea;  end;
  		if(nonblank(newINr.EKNCode))then begin INr.EKNCode=newINr.EKNCode;  end; if(nonblank(newINrw.EKNCode))then begin INr.EKNCode=newINrw.EKNCode;  end;
  		//if(nonblank(newINr.DefPalletItem))then begin INr.DefPalletItem=newINr.DefPalletItem;  end; if(nonblank(newINrw.DefPalletItem))then begin INr.DefPalletItem=newINrw.DefPalletItem;  end;
  		//if(nonblank(newINr.QtyonPallet))then begin INr.QtyonPallet=newINr.QtyonPallet;  end; if(nonblank(newINrw.QtyonPallet))then begin INr.QtyonPallet=newINrw.QtyonPallet;  end;
  		//if(nonblank(newINr.PalletWidth))then begin INr.PalletWidth=newINr.PalletWidth;  end; if(nonblank(newINrw.PalletWidth))then begin INr.PalletWidth=newINrw.PalletWidth;  end;
  		//if(nonblank(newINr.PalletHeight))then begin INr.PalletHeight=newINr.PalletHeight;  end; if(nonblank(newINrw.PalletHeight))then begin INr.PalletHeight=newINrw.PalletHeight;  end;
  		//if(nonblank(newINr.PalletDepth))then begin INr.PalletDepth=newINr.PalletDepth;  end; if(nonblank(newINrw.PalletDepth))then begin INr.PalletDepth=newINrw.PalletDepth;  end;
  		//if(nonblank(newINr.Brand))then begin INr.Brand=newINr.Brand;  end; if(nonblank(newINrw.Brand))then begin INr.Brand=newINrw.Brand;  end;
  		//if(nonblank(newINr.BrandType))then begin INr.BrandType=newINr.BrandType;  end; if(nonblank(newINrw.BrandType))then begin INr.BrandType=newINrw.BrandType;  end;
  		//if(nonblank(newINr.PickArea))then begin INr.PickArea=newINr.PickArea;  end; if(nonblank(newINrw.PickArea))then begin INr.PickArea=newINrw.PickArea;  end;
  		//if(nonblank(newINr.SWWCode))then begin INr.SWWCode=newINr.SWWCode;  end; if(nonblank(newINrw.SWWCode))then begin INr.SWWCode=newINrw.SWWCode;  end;
  		//if(nonblank(newINr.RepaPricePerWeight))then begin INr.RepaPricePerWeight=newINr.RepaPricePerWeight;  end; if(nonblank(newINrw.RepaPricePerWeight))then begin INr.RepaPricePerWeight=newINrw.RepaPricePerWeight;  end;
  		//if(nonblank(newINr.PalletsInPickArea))then begin INr.PalletsInPickArea=newINr.PalletsInPickArea;  end; if(nonblank(newINrw.PalletsInPickArea))then begin INr.PalletsInPickArea=newINrw.PalletsInPickArea;  end;
  		//if(nonblank(newINr.DefPosWidth))then begin INr.DefPosWidth=newINr.DefPosWidth;  end; if(nonblank(newINrw.DefPosWidth))then begin INr.DefPosWidth=newINrw.DefPosWidth;  end;
  		//if(nonblank(newINr.DefPosHeight))then begin INr.DefPosHeight=newINr.DefPosHeight;  end; if(nonblank(newINrw.DefPosHeight))then begin INr.DefPosHeight=newINrw.DefPosHeight;  end;
  		//if(nonblank(newINr.DefPosDepth))then begin INr.DefPosDepth=newINr.DefPosDepth;  end; if(nonblank(newINrw.DefPosDepth))then begin INr.DefPosDepth=newINrw.DefPosDepth;  end;
  		//if(nonblank(newINr.InPriceB2))then begin INr.InPriceB2=newINr.InPriceB2;  end; if(nonblank(newINrw.InPriceB2))then begin INr.InPriceB2=newINrw.InPriceB2;  end;
  		//if(nonblank(newINr.WeighedAvPriceB2))then begin INr.WeighedAvPriceB2=newINr.WeighedAvPriceB2;  end; if(nonblank(newINrw.WeighedAvPriceB2))then begin INr.WeighedAvPriceB2=newINrw.WeighedAvPriceB2;  end;
  		//if(nonblank(newINr.EUCostAcc))then begin INr.EUCostAcc=newINr.EUCostAcc;  end; if(nonblank(newINrw.EUCostAcc))then begin INr.EUCostAcc=newINrw.EUCostAcc;  end;
  		//if(nonblank(newINr.ExpCostAcc))then begin INr.ExpCostAcc=newINr.ExpCostAcc;  end; if(nonblank(newINrw.ExpCostAcc))then begin INr.ExpCostAcc=newINrw.ExpCostAcc;  end;
  		//if(nonblank(newINr.PalletLayers))then begin INr.PalletLayers=newINr.PalletLayers;  end; if(nonblank(newINrw.PalletLayers))then begin INr.PalletLayers=newINrw.PalletLayers;  end;
  		//if(nonblank(newINr.QtyonPalletLayer))then begin INr.QtyonPalletLayer=newINr.QtyonPalletLayer;  end; if(nonblank(newINrw.QtyonPalletLayer))then begin INr.QtyonPalletLayer=newINrw.QtyonPalletLayer;  end;
  		//if(nonblank(newINr.UserStr1))then begin INr.UserStr1=newINr.UserStr1;  end; if(nonblank(newINrw.UserStr1))then begin INr.UserStr1=newINrw.UserStr1;  end;
  		//if(nonblank(newINr.UserStr2))then begin INr.UserStr2=newINr.UserStr2;  end; if(nonblank(newINrw.UserStr2))then begin INr.UserStr2=newINrw.UserStr2;  end;
  		//if(nonblank(newINr.UserStr3))then begin INr.UserStr3=newINr.UserStr3;  end; if(nonblank(newINrw.UserStr3))then begin INr.UserStr3=newINrw.UserStr3;  end;
  		//if(nonblank(newINr.UserStr4))then begin INr.UserStr4=newINr.UserStr4;  end; if(nonblank(newINrw.UserStr4))then begin INr.UserStr4=newINrw.UserStr4;  end;
  		//if(nonblank(newINr.UserStr5))then begin INr.UserStr5=newINr.UserStr5;  end; if(nonblank(newINrw.UserStr5))then begin INr.UserStr5=newINrw.UserStr5;  end;
  		//if(nonblank(newINr.UserVal1))then begin INr.UserVal1=newINr.UserVal1;  end; if(nonblank(newINrw.UserVal1))then begin INr.UserVal1=newINrw.UserVal1;  end;
  		//if(nonblank(newINr.UserVal2))then begin INr.UserVal2=newINr.UserVal2;  end; if(nonblank(newINrw.UserVal2))then begin INr.UserVal2=newINrw.UserVal2;  end;
  		//if(nonblank(newINr.UserVal3))then begin INr.UserVal3=newINr.UserVal3;  end; if(nonblank(newINrw.UserVal3))then begin INr.UserVal3=newINrw.UserVal3;  end;
  		//if(nonblank(newINr.UserDate1))then begin INr.UserDate1=newINr.UserDate1;  end; if(nonblank(newINrw.UserDate1))then begin INr.UserDate1=newINrw.UserDate1;  end;
  		//if(nonblank(newINr.UserDate2))then begin INr.UserDate2=newINr.UserDate2;  end; if(nonblank(newINrw.UserDate2))then begin INr.UserDate2=newINrw.UserDate2;  end;
  		//if(nonblank(newINr.UserDate3))then begin INr.UserDate3=newINr.UserDate3;  end; if(nonblank(newINrw.UserDate3))then begin INr.UserDate3=newINrw.UserDate3;  end;
  		//if(nonblank(newINr.RentGroup))then begin INr.RentGroup=newINr.RentGroup;  end; if(nonblank(newINrw.RentGroup))then begin INr.RentGroup=newINrw.RentGroup;  end;
  		//if(nonblank(newINr.FAGroup))then begin INr.FAGroup=newINr.FAGroup;  end; if(nonblank(newINrw.FAGroup))then begin INr.FAGroup=newINrw.FAGroup;  end;
  		//if(nonblank(newINr.NetWeight))then begin INr.NetWeight=newINr.NetWeight;  end; if(nonblank(newINrw.NetWeight))then begin INr.NetWeight=newINrw.NetWeight;  end;
  		//if(nonblank(newINr.PrimaryCostModel))then begin INr.PrimaryCostModel=newINr.PrimaryCostModel;  end; if(nonblank(newINrw.PrimaryCostModel))then begin INr.PrimaryCostModel=newINrw.PrimaryCostModel;  end;
  		//if(nonblank(newINr.QueuedCostModel))then begin INr.QueuedCostModel=newINr.QueuedCostModel;  end; if(nonblank(newINrw.QueuedCostModel))then begin INr.QueuedCostModel=newINrw.QueuedCostModel;  end;
  		//if(nonblank(newINr.CostPerc))then begin INr.CostPerc=newINr.CostPerc;  end; if(nonblank(newINrw.CostPerc))then begin INr.CostPerc=newINrw.CostPerc;  end;
  		//if(nonblank(newINr.FIFOPerSerialNr))then begin INr.FIFOPerSerialNr=newINr.FIFOPerSerialNr;  end; if(nonblank(newINrw.FIFOPerSerialNr))then begin INr.FIFOPerSerialNr=newINrw.FIFOPerSerialNr;  end;
  		//if(nonblank(newINr.FIFOPerLocation))then begin INr.FIFOPerLocation=newINr.FIFOPerLocation;  end; if(nonblank(newINrw.FIFOPerLocation))then begin INr.FIFOPerLocation=newINrw.FIFOPerLocation;  end;
  		//if(nonblank(newINr.WAPerLocation))then begin INr.WAPerLocation=newINr.WAPerLocation;  end; if(nonblank(newINrw.WAPerLocation))then begin INr.WAPerLocation=newINrw.WAPerLocation;  end;
  		//if(nonblank(newINr.CostPricePerLocation))then begin INr.CostPricePerLocation=newINr.CostPricePerLocation;  end; if(nonblank(newINrw.CostPricePerLocation))then begin INr.CostPricePerLocation=newINrw.CostPricePerLocation;  end;
  		if(nonblank(newINr.NotForSales))then begin INr.NotForSales=newINr.NotForSales;  end; if(nonblank(newINrw.NotForSales))then begin INr.NotForSales=newINrw.NotForSales;  end;
  		//if(nonblank(newINr.SRUpdateCost))then begin INr.SRUpdateCost=newINr.SRUpdateCost;  end; if(nonblank(newINrw.SRUpdateCost))then begin INr.SRUpdateCost=newINrw.SRUpdateCost;  end;
  		//if(nonblank(newINr.SuppSerialNr))then begin INr.SuppSerialNr=newINr.SuppSerialNr;  end; if(nonblank(newINrw.SuppSerialNr))then begin INr.SuppSerialNr=newINrw.SuppSerialNr;  end;
  		if(nonblank(newINr.MajStoneDet))then begin INr.MajStoneDet=newINr.MajStoneDet;  end; if(nonblank(newINrw.MajStoneDet))then begin INr.MajStoneDet=newINrw.MajStoneDet;  end;
  		if(nonblank(newINr.Colour))then begin INr.Colour=newINr.Colour;  end; if(nonblank(newINrw.Colour))then begin INr.Colour=newINrw.Colour;  end;
  		//if(nonblank(newINr.Clarity))then begin INr.Clarity=newINr.Clarity;  end; if(nonblank(newINrw.Clarity))then begin INr.Clarity=newINrw.Clarity;  end;
  		//if(nonblank(newINr.Cert))then begin INr.Cert=newINr.Cert;  end; if(nonblank(newINrw.Cert))then begin INr.Cert=newINrw.Cert;  end;
  		//if(nonblank(newINr.MinStoneDet))then begin INr.MinStoneDet=newINr.MinStoneDet;  end; if(nonblank(newINrw.MinStoneDet))then begin INr.MinStoneDet=newINrw.MinStoneDet;  end;
  		if(nonblank(newINr.Metal))then begin INr.Metal=newINr.Metal;  end; if(nonblank(newINrw.Metal))then begin INr.Metal=newINrw.Metal;  end;
  		if(nonblank(newINr.RowWeight))then begin INr.RowWeight=newINr.RowWeight;  end; if(nonblank(newINrw.RowWeight))then begin INr.RowWeight=newINrw.RowWeight;  end;
  		if(nonblank(newINr.Size))then begin INr.Size=newINr.Size;  end; if(nonblank(newINrw.Size))then begin INr.Size=newINrw.Size;  end;
  		//if(nonblank(newINr.Length))then begin INr.Length=newINr.Length;  end; if(nonblank(newINrw.Length))then begin INr.Length=newINrw.Length;  end;
  		//if(nonblank(newINr.WatchBrand))then begin INr.WatchBrand=newINr.WatchBrand;  end; if(nonblank(newINrw.WatchBrand))then begin INr.WatchBrand=newINrw.WatchBrand;  end;
  		//if(nonblank(newINr.StyleName))then begin INr.StyleName=newINr.StyleName;  end; if(nonblank(newINrw.StyleName))then begin INr.StyleName=newINrw.StyleName;  end;
  		//if(nonblank(newINr.WatchMetal))then begin INr.WatchMetal=newINr.WatchMetal;  end; if(nonblank(newINrw.WatchMetal))then begin INr.WatchMetal=newINrw.WatchMetal;  end;
  		//if(nonblank(newINr.Movement))then begin INr.Movement=newINr.Movement;  end; if(nonblank(newINrw.Movement))then begin INr.Movement=newINrw.Movement;  end;
  		//if(nonblank(newINr.BrcStr))then begin INr.BrcStr=newINr.BrcStr;  end; if(nonblank(newINrw.BrcStr))then begin INr.BrcStr=newINrw.BrcStr;  end;
  		//if(nonblank(newINr.Gender))then begin INr.Gender=newINr.Gender;  end; if(nonblank(newINrw.Gender))then begin INr.Gender=newINrw.Gender;  end;
  		//if(nonblank(newINr.Other))then begin INr.Other=newINr.Other;  end; if(nonblank(newINrw.Other))then begin INr.Other=newINrw.Other;  end;
  		//if(nonblank(newINr.Other2))then begin INr.Other2=newINr.Other2;  end; if(nonblank(newINrw.Other2))then begin INr.Other2=newINrw.Other2;  end;
  		if(nonblank(newINr.Reference))then begin INr.Reference=newINr.Reference;  end; if(nonblank(newINrw.Reference))then begin INr.Reference=newINrw.Reference;  end;
  		//if(nonblank(newINr.Perceptions))then begin INr.Perceptions=newINr.Perceptions;  end; if(nonblank(newINrw.Perceptions))then begin INr.Perceptions=newINrw.Perceptions;  end;
  		//if(nonblank(newINr.Withholdings))then begin INr.Withholdings=newINr.Withholdings;  end; if(nonblank(newINrw.Withholdings))then begin INr.Withholdings=newINrw.Withholdings;  end;
  		//if(nonblank(newINr.TaxTemplateCode))then begin INr.TaxTemplateCode=newINr.TaxTemplateCode;  end; if(nonblank(newINrw.TaxTemplateCode))then begin INr.TaxTemplateCode=newINrw.TaxTemplateCode;  end;
  		//if(nonblank(newINr.TaxTemplateCodeEU))then begin INr.TaxTemplateCodeEU=newINr.TaxTemplateCodeEU;  end; if(nonblank(newINrw.TaxTemplateCodeEU))then begin INr.TaxTemplateCodeEU=newINrw.TaxTemplateCodeEU;  end;
  		//if(nonblank(newINr.TaxTemplateCodeExp))then begin INr.TaxTemplateCodeExp=newINr.TaxTemplateCodeExp;  end; if(nonblank(newINrw.TaxTemplateCodeExp))then begin INr.TaxTemplateCodeExp=newINrw.TaxTemplateCodeExp;  end;
  		//if(nonblank(newINr.DonotRequireBatchNrOnIVCash))then begin INr.DonotRequireBatchNrOnIVCash=newINr.DonotRequireBatchNrOnIVCash;  end; if(nonblank(newINrw.DonotRequireBatchNrOnIVCash))then begin INr.DonotRequireBatchNrOnIVCash=newINrw.DonotRequireBatchNrOnIVCash;  end;
  		//if(nonblank(newINr.HotelWIPAcc))then begin INr.HotelWIPAcc=newINr.HotelWIPAcc;  end; if(nonblank(newINrw.HotelWIPAcc))then begin INr.HotelWIPAcc=newINrw.HotelWIPAcc;  end;
  		if(nonblank(newINr.CPSCode))then begin INr.CPSCode=newINr.CPSCode;  end; if(nonblank(newINrw.CPSCode))then begin INr.CPSCode=newINrw.CPSCode;  end;
  		//if(nonblank(newINr.SVOInvbleSalesAcc))then begin INr.SVOInvbleSalesAcc=newINr.SVOInvbleSalesAcc;  end; if(nonblank(newINrw.SVOInvbleSalesAcc))then begin INr.SVOInvbleSalesAcc=newINrw.SVOInvbleSalesAcc;  end;
  		//if(nonblank(newINr.SVOWarrantySalesAcc))then begin INr.SVOWarrantySalesAcc=newINr.SVOWarrantySalesAcc;  end; if(nonblank(newINrw.SVOWarrantySalesAcc))then begin INr.SVOWarrantySalesAcc=newINrw.SVOWarrantySalesAcc;  end;
  		//if(nonblank(newINr.SVOContractSalesAcc))then begin INr.SVOContractSalesAcc=newINr.SVOContractSalesAcc;  end; if(nonblank(newINrw.SVOContractSalesAcc))then begin INr.SVOContractSalesAcc=newINrw.SVOContractSalesAcc;  end;
  		//if(nonblank(newINr.SVOGoodwillSalesAcc))then begin INr.SVOGoodwillSalesAcc=newINr.SVOGoodwillSalesAcc;  end; if(nonblank(newINrw.SVOGoodwillSalesAcc))then begin INr.SVOGoodwillSalesAcc=newINrw.SVOGoodwillSalesAcc;  end;
  		//if(nonblank(newINr.SVOInvbleCostAcc))then begin INr.SVOInvbleCostAcc=newINr.SVOInvbleCostAcc;  end; if(nonblank(newINrw.SVOInvbleCostAcc))then begin INr.SVOInvbleCostAcc=newINrw.SVOInvbleCostAcc;  end;
  		//if(nonblank(newINr.SVOWarrantyCostAcc))then begin INr.SVOWarrantyCostAcc=newINr.SVOWarrantyCostAcc;  end; if(nonblank(newINrw.SVOWarrantyCostAcc))then begin INr.SVOWarrantyCostAcc=newINrw.SVOWarrantyCostAcc;  end;
  		//if(nonblank(newINr.SVOContractCostAcc))then begin INr.SVOContractCostAcc=newINr.SVOContractCostAcc;  end; if(nonblank(newINrw.SVOContractCostAcc))then begin INr.SVOContractCostAcc=newINrw.SVOContractCostAcc;  end;
  		//if(nonblank(newINr.SVOGoodwillCostAcc))then begin INr.SVOGoodwillCostAcc=newINr.SVOGoodwillCostAcc;  end; if(nonblank(newINrw.SVOGoodwillCostAcc))then begin INr.SVOGoodwillCostAcc=newINrw.SVOGoodwillCostAcc;  end;
  		
  return;
end; //Edit***************************Sasha2,9:23 10.03.2016 }

global
updating function LongInt NewINVcRecordCheck(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row NewINVc newINrw;
  record INVc INr,IN2r;
  record ITVc ITr;
  integer mtrw,i,insertmode,updatemode; //Edit***************************Sasha2,17:50 07.12.2015
  string 20 codestring;
  LongInt stat1,long41;
  string 200 rawclass,uloc,group;
  integer pos;
  record DIVc DIr;
  boolean upd;
  record DiCheckBlock DiCb; //Edit***************************Sasha2,16:52 07.12.2015
  row DiCheckBlock DiCbw; //Edit***************************Sasha2,16:52 07.12.2015
  vector string 255 diCheckTypes; //Edit***************************Sasha2,17:22 07.12.2015
  string 255 newdispstr,foundtypes,outdisps,mes; //Edit***************************Sasha2,17:37 07.12.2015
  string 20 type; //Edit***************************Sasha2,10:34 08.12.2015
  
  res = 0;
  insertmode = 1;
  updatemode = 2;
  
  
  if (newINr.OKFlag==1) then begin		//Edit----------------------Dima  09.03.2016
    
    BlockLoad(DiCb); //Edit***************************Sasha2,16:53 07.12.2015 {
    mtrw = MatRowCnt(DiCb);
    if (mtrw>0) then begin
      for (i=0;i<mtrw;i=i+1) begin
        MatRowGet(DiCb,i,DiCbw);
        if (NonBlank(DiCbw.DiCode) and NonBlank(DiCbw.DiType)) then begin
          diCheckTypes[DiCbw.DiCode] = DiCbw.DiType;
        end;
      end;
    end; //Edit***************************Sasha2,16:53 07.12.2015 }
    
    group = "";
  	if (NonBlank(newINr.Brand)) then begin
  	  DIr.Code = newINr.Brand;
  		readfirstmain(DIr,1,true);
  		ITr.Comment = DIr.Name;
  		if(readlastkey("Comment",ITr,1,true))then begin
  			group = ITr.Code;
  	  end;
  	end;
    
    mtrw = matrowcnt(newINr);
    For(i=0;i<mtrw;i=i+1) begin
  	  matrowget(newINr,i,newINrw);
  	  
  	  if(blank(newINrw.Code))then begin
  	  	RecordCheckError(1058,"",i,"Code");      
        res = -1; 
        goto LNewINVcRecordCheck;
  	  end;
	 
  	  upd = false;
  	  INr.Code = newINrw.Code;
  	  if(readfirstmain(INr,1,true))then begin
  	  	recordcopy(IN2r,INr);
  	  	upd = true;
  	  	stat1 = updatemode;
  	  	long41 = 1;
  	  	if(blank(newINr.Name) and blank(newINrw.Name))then begin
  	  		newINrw.Name = INr.Name;
  	  		matrowput(newINr,i,newINrw);
  	  		matrowget(newINr,i,newINrw);
  	  	end;
  	  end else begin
  	  	codestring = newINrw.Code;
  	  	NormalizeCodeName(codestring);
  	  	newINrw.Code = codestring;
  	  	matrowput(newINr,i,newINrw);
  	  	matrowget(newINr,i,newINrw);
  	  	recordnew(INr);
  	  	upd = false;
  	  	stat1 = insertmode;
        long41 = 1;
  	  	INr.Code = codestring;
  	  end;
  	  
  	  if(nonblank(newINr.DispGroups))then begin
  			pos = 0;
  			rawclass = newINr.DispGroups;
  			newINr.DispGroups = "";
  			ExtractObj(rawclass,pos,uloc);
  			while(nonblank(uloc)) begin
  				DIr.Code = uloc;
  				if(readfirstmain(DIr,1,true))then begin
  					newINr.DispGroups = newINr.DispGroups & DIr.Code & ",";
  				end else begin
  					DIr.Name = uloc;
  					if(readfirstkey("Name",DIr,1,true))then begin
  						newINr.DispGroups = newINr.DispGroups & DIr.Code & ",";
  					end else begin
  						newINr.DispGroups = newINr.DispGroups & uloc & ",";
  					end;
  				end;
  				ExtractObj(rawclass,pos,uloc);
  			end;
  			if(len(newINr.DispGroups)>0)then begin
  				if(mid(newINr.DispGroups,len(newINr.DispGroups)-1,1)==",")then begin
  					newINr.DispGroups = mid(newINr.DispGroups,0,len(newINr.DispGroups)-1);
  				end;			
  			end;
  		end;
  		
  		type = ""; //Edit***************************Sasha2,17:53 07.12.2015 { Special classifications for CATALOQUE
  	  if (nonblank(newINrw.Type) and len(diCheckTypes[newINrw.Type])>0) then begin 
        newdispstr = "";
        foundtypes = "";
  
  			if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Type,outdisps,ReturnFieldDIType("Type",false),mes)) then begin
          RecordCheckError(9588,". " & mes,i,"Type");      
          res = -1; 
          goto LNewINVcRecordCheck;
        end else begin
          newINrw.Type = outdisps;
        end;
        type = newINrw.Type;
        
        if (NonBlank(newINr.Brand) and SetInSet(ReturnFieldDIType("Brand",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINr.Brand,outdisps,ReturnFieldDIType("Brand",false),mes)) then begin
            RecordCheckError(9588,". " & mes,-1,"Brand"); 
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            if (newINr.Brand!=outdisps) then begin
             newINr.Brand = outdisps; 
            end;
          end;
          HandleTypeField("Brand",newINr.Brand,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Collection) and SetInSet(ReturnFieldDIType("Collection",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Collection,outdisps,ReturnFieldDIType("Collection",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Collection");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Collection = outdisps;
          end;
          HandleTypeField("Collection",newINrw.Collection,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Style) and SetInSet(ReturnFieldDIType("Style",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Style,outdisps,ReturnFieldDIType("Style",false),mes)) then begin
            RecordCheckError(9588,". " & ". " & mes,i,"Style");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Style = outdisps;
          end;
          HandleTypeField("Style",newINrw.Style,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //WatchType -> Warranty Card;
        if (NonBlank(newINrw.WatchType) and SetInSet(ReturnFieldDIType("WatchType",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.WatchType,outdisps,ReturnFieldDIType("WatchType",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"WatchType");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.WatchType = outdisps;
          end;
          HandleTypeField("WatchType",newINrw.WatchType,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.GenderSC) and SetInSet(ReturnFieldDIType("GenderSC",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.GenderSC,outdisps,ReturnFieldDIType("GenderSC",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"GenderSC");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.GenderSC = outdisps;
          end;
          HandleTypeField("GenderSC",newINrw.GenderSC,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Dial) and SetInSet(ReturnFieldDIType("Dial",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Dial,outdisps,ReturnFieldDIType("Dial",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Dial");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Dial = outdisps;
          end;
          HandleTypeField("Dial",newINrw.Dial,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Strap) and SetInSet(ReturnFieldDIType("Strap",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Strap,outdisps,ReturnFieldDIType("Strap",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Strap");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Strap = outdisps;
          end;
          HandleTypeField("Strap",newINrw.Strap,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Material) and SetInSet(ReturnFieldDIType("Material",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Material,outdisps,ReturnFieldDIType("Material",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Material");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Material = outdisps;
          end;
          HandleTypeField("Material",newINrw.Material,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //PrecStones -> Comment
        if (NonBlank(newINrw.PrecStones) and SetInSet(ReturnFieldDIType("PrecStones",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.PrecStones,outdisps,ReturnFieldDIType("PrecStones",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"PrecStones");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.PrecStones = outdisps;
          end;
          HandleTypeField("PrecStones",newINrw.PrecStones,diCheckTypes[type],newdispstr,foundtypes);
        end;
  
        if (NonBlank(newINrw.SerNrf)) then begin
          if (SetInSet(ReturnFieldDIType("SerNrf",false),diCheckTypes[type]) and newINrw.SerNrf==1) then begin
            HandleTypeField("SerNrf",newINrw.SerNrf,diCheckTypes[type],newdispstr,foundtypes);
          end else begin
            if (newINrw.SerNrf<0 or newINrw.SerNrf>1) then begin
              RecordCheckError(15093,". Should be \"1\" or \"0\" (\"Yes\" or \"No\")",i,"SerNrf");
              res = -1; 
              goto LNewINVcRecordCheck;
            end;
          end;
          
        end;
        
        if (NonBlank(newINrw.Mechanism) and SetInSet(ReturnFieldDIType("Mechanism",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Mechanism,outdisps,ReturnFieldDIType("Mechanism",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Mechanism");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Mechanism = outdisps;
          end;
          HandleTypeField("Mechanism",newINrw.Mechanism,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Function) and SetInSet(ReturnFieldDIType("Function",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Function,outdisps,ReturnFieldDIType("Function",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Function");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Function = outdisps;
          end;
          HandleTypeField("Function",newINrw.Function,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //WaterResist -> SAP
        if (NonBlank(newINrw.WaterResist) and SetInSet(ReturnFieldDIType("WaterResist",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.WaterResist,outdisps,ReturnFieldDIType("WaterResist",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"WaterResist");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.WaterResist = outdisps;
          end;
          HandleTypeField("WaterResist",newINrw.WaterResist,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Diameter) and SetInSet(ReturnFieldDIType("Diameter",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Diameter,outdisps,ReturnFieldDIType("Diameter",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Diameter");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Diameter = outdisps;
          end;
          HandleTypeField("Diameter",newINrw.Diameter,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Category) and SetInSet(ReturnFieldDIType("Category",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Category,outdisps,ReturnFieldDIType("Category",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Category");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Category = outdisps;
          end;
          HandleTypeField("Category",newINrw.Category,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Division) and SetInSet(ReturnFieldDIType("Division",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Division,outdisps,ReturnFieldDIType("Division",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Division");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Division = outdisps;
          end;
          HandleTypeField("Division",newINrw.Division,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.WeightOfMat) and SetInSet(ReturnFieldDIType("WeightOfMat",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.WeightOfMat,outdisps,ReturnFieldDIType("WeightOfMat",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"WeightOfMat");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.WeightOfMat = outdisps;
          end;
          HandleTypeField("WeightOfMat",newINrw.WeightOfMat,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //Diamonds -> Category_A
        if (NonBlank(newINrw.Diamonds) and SetInSet(ReturnFieldDIType("Diamonds",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Diamonds,outdisps,ReturnFieldDIType("Diamonds",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Diamonds");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Diamonds = outdisps;
          end;
          HandleTypeField("Diamonds",newINrw.Diamonds,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.DiamondsCarat) and SetInSet(ReturnFieldDIType("DiamondsCarat",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.DiamondsCarat,outdisps,ReturnFieldDIType("DiamondsCarat",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"DiamondsCarat");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.DiamondsCarat = outdisps;
          end;
          HandleTypeField("DiamondsCarat",newINrw.DiamondsCarat,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.SolidStones05) and SetInSet(ReturnFieldDIType("SolidStones05",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.SolidStones05,outdisps,ReturnFieldDIType("SolidStones05",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"SolidStones05");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.SolidStones05 = outdisps;
          end;
          HandleTypeField("SolidStones05",newINrw.SolidStones05,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.PrecAndSemiPrec) and SetInSet(ReturnFieldDIType("PrecAndSemiPrec",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.PrecAndSemiPrec,outdisps,ReturnFieldDIType("PrecAndSemiPrec",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"PrecAndSemiPrec");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.PrecAndSemiPrec = outdisps;
          end;
          HandleTypeField("PrecAndSemiPrec",newINrw.PrecAndSemiPrec,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.RingSizes) and SetInSet(ReturnFieldDIType("RingSizes",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.RingSizes,outdisps,ReturnFieldDIType("RingSizes",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"RingSizes");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.RingSizes = outdisps;
          end;
          HandleTypeField("RingSizes",newINrw.RingSizes,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Carat) and SetInSet(ReturnFieldDIType("Carat",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Carat,outdisps,ReturnFieldDIType("Carat",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Carat");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Carat = outdisps;
          end;
          HandleTypeField("Carat",newINrw.Carat,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.ClaritySC) and SetInSet(ReturnFieldDIType("ClaritySC",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.ClaritySC,outdisps,ReturnFieldDIType("ClaritySC",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"ClaritySC");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.ClaritySC = outdisps;
          end;
          HandleTypeField("ClaritySC",newINrw.ClaritySC,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Color) and SetInSet(ReturnFieldDIType("Color",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Color,outdisps,ReturnFieldDIType("Color",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Color");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Color = outdisps;
          end;
          HandleTypeField("Color",newINrw.Color,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.ColorOfMat) and SetInSet(ReturnFieldDIType("ColorOfMat",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.ColorOfMat,outdisps,ReturnFieldDIType("ColorOfMat",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"ColorOfMat");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.ColorOfMat = outdisps;
          end;
          HandleTypeField("ColorOfMat",newINrw.ColorOfMat,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.ShapeCut) and SetInSet(ReturnFieldDIType("ShapeCut",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.ShapeCut,outdisps,ReturnFieldDIType("ShapeCut",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"ShapeCut");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.ShapeCut = outdisps;
          end;
          HandleTypeField("ShapeCut",newINrw.ShapeCut,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Description) and SetInSet(ReturnFieldDIType("Description",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Description,outdisps,ReturnFieldDIType("Description",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Description");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Description = outdisps;
          end;
          HandleTypeField("Description",newINrw.Description,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Art) and SetInSet(ReturnFieldDIType("Art",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Art,outdisps,ReturnFieldDIType("Art",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"Art");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Art = outdisps;
          end;
          HandleTypeField("Art",newINrw.Art,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif30 -> Coll_W
        if (NonBlank(newINrw.classif30) and SetInSet(ReturnFieldDIType("classif30",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif30,outdisps,ReturnFieldDIType("classif30",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"classif30");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif30 = outdisps;
          end;
          HandleTypeField("classif30",newINrw.classif30,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif31 -> Coll_A
        if (NonBlank(newINrw.classif31) and SetInSet(ReturnFieldDIType("classif31",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif31,outdisps,ReturnFieldDIType("classif31",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"classif31");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif31 = outdisps;
          end;
          HandleTypeField("classif31",newINrw.classif31,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif32 -> Style_A
        if (NonBlank(newINrw.classif32) and SetInSet(ReturnFieldDIType("classif32",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif32,outdisps,ReturnFieldDIType("classif32",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"classif32");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif32 = outdisps;
          end;
          HandleTypeField("classif32",newINrw.classif32,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif33 -> Material_W
        if (NonBlank(newINrw.classif33) and SetInSet(ReturnFieldDIType("classif33",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif33,outdisps,ReturnFieldDIType("classif33",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"classif33");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif33 = outdisps;
          end;
          HandleTypeField("classif33",newINrw.classif33,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif34 -> Material_A
        if (NonBlank(newINrw.classif34) and SetInSet(ReturnFieldDIType("classif34",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif34,outdisps,ReturnFieldDIType("classif34",false),mes)) then begin
            RecordCheckError(9588,". " & mes,i,"classif34");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif34 = outdisps;
          end;
          HandleTypeField("classif34",newINrw.classif34,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        pos = 0;
        rawclass = diCheckTypes[type];
        ExtractObj(rawclass,pos,uloc);
        while(nonblank(uloc)) begin
          if (!SetInSet(uloc,foundtypes)) then begin
            if (uloc=="BRAND") then begin
              RecordCheckError(1854,"",-1,"Brand");  
            end else begin
              RecordCheckError(1854,"",i,ReturnFieldDIType(uloc,true));
            end;   
            res = -1; 
            goto LNewINVcRecordCheck;
          end;
          ExtractObj(rawclass,pos,uloc);
  			end;
  			newINrw.DispGroups = type & "," & newdispstr;
  			matrowput(newINr,i,newINrw);
  	  end else begin; //Edit***************************Sasha2,17:53 07.12.2015 }
    	  if(nonblank(newINrw.DispGroups))then begin
    			pos = 0;
    			rawclass = newINrw.DispGroups;
    			newINrw.DispGroups = "";
    			ExtractObj(rawclass,pos,uloc);
    			while(nonblank(uloc)) begin
    				CheckAndCreateClassification(uloc,"",false);
    				DIr.Code = uloc;
    				if(readfirstmain(DIr,1,true))then begin
    					newINrw.DispGroups = newINrw.DispGroups & DIr.Code & ",";
    				end else begin
    					DIr.Name = uloc;
    					if(readfirstkey("Name",DIr,1,true))then begin
    						newINrw.DispGroups = newINrw.DispGroups & DIr.Code & ",";
    					end else begin
    						newINrw.DispGroups = newINrw.DispGroups & uloc & ",";
    					end;
    				end;
    				ExtractObj(rawclass,pos,uloc);
    			end;
    			if(len(newINrw.DispGroups)>0)then begin
    				if(mid(newINrw.DispGroups,len(newINrw.DispGroups)-1,1)==",")then begin
    					newINrw.DispGroups = mid(newINrw.DispGroups,0,len(newINrw.DispGroups)-1);
    				end;			
    			end;
    			matrowput(newINr,i,newINrw);
    		end;
  		end;
  	  
  	  if(blank(newINrw.Name) and blank(newINr.Name))then begin
  	  	RecordCheckError(1058,"",i,"Name");      
        res = -1; 
        goto LNewINVcRecordCheck;
  	  end;
  	  if(blank(newINrw.VATCode) and blank(newINr.VATCode))then begin
  	  	RecordCheckError(1058,"",i,"VATCode");      
        res = -1; 
        goto LNewINVcRecordCheck;
  	  end;
  	  
  	  FullFillINVc(INr,newINr,newINrw,group,type);

	    res = nINVcRecordCheck(INr,IN2r,stat1,long41,i);
	    if (res!=0) then begin
        res = -1; 
        goto LNewINVcRecordCheck;
	    end;  
		end;

		For(i=0;i<mtrw;i=i+1) begin
  	  matrowget(newINr,i,newINrw);
  	  type = newINrw.Type;
  	  upd = false;
  	  INr.Code = newINrw.Code;
  	  if(readfirstmain(INr,1,true))then begin
  	  	recordcopy(IN2r,INr);
  	  	upd = true;
  	  	/*if(blank(newINr.Name) and blank(newINrw.Name))then begin
  	  		newINrw.Name = INr.Name;
  	  		matrowput(newINr,i,newINrw);
  	  	end;*/
  	  end else begin
  	  	codestring = newINrw.Code;
  	  	/*NormalizeCodeName(codestring);
  	  	newINrw.Code = codestring;
  	  	matrowput(newINr,i,newINrw);*/
  	  	recordnew(INr);
  	  	upd = false;
  	  	INr.Code = codestring;
  	  end;
  	  
  	  FullFillINVc(INr,newINr,newINrw,group,type);
  	  
			if(stat==1)then begin
				if(newINr.OKFlag==1)then begin
					if(upd)then begin
						if (recordupdate(IN2r,INr,true)!=0) then begin
						  res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end else begin
						if(recordStore(INr,true)==false)then begin
							res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end;
				end;
			end;
			if(stat==2)then begin
				if(newINr.OKFlag==1 and newIN2r.OKFlag==0)then begin
					if(upd)then begin
						if (recordupdate(IN2r,INr,true)!=0) then begin
						  res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end else begin
						if(recordStore(INr,true)==false)then begin
							res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end;
				end;
			end;
  	end;
	end; 
	
	if (newINr.SerNr==-1) then begin
    if (SingleUserMode==false) then begin
      newINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 
    end;
  end;
  
	
LNewINVcRecordCheck:;
  NewINVcRecordCheck = res;
  RETURN;
END;

