remote procedure ApproversSClassArrayOnOpen(var Array string,var Array string,var Integer,string);
external function Boolean IVDClassVoidRow(var record IVVc,Integer);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
remote function Boolean PasteCust2InInv(var record IVVc,string,Boolean,var string,var string,var string,var string,var string);
remote procedure FillPPSClass(string,string,record ExpVc,Integer,var Array string,var Array string,var Integer);
external function val ValFromString(string,string,string);
external procedure ExtractObj(string,var Integer,var string);
remote procedure UserNPTSSClassArrayOnOpen(var Array string,var Integer);
remote function Boolean RestAccVc_PasteCUCode(var record RestAccVc);
external function Boolean RestAccDClasstouchscreenitemEFAfter(Integer ,Boolean);
external function string 255 StringFromSysList(Integer,Integer);
remote procedure BaggerSClassArrayOnOpen(var Array string,var Integer);
remote procedure SupervisorSClassArrayOnOpen(var Array string,var Integer);
remote procedure FillARPay2SClass(string,string,string,Date,var Array string,var Integer);
external procedure SetPOSWindowDisplay(string,string);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
external function Boolean IVCashDClassVoidRow(var record IVCashVc,Integer);
remote function Boolean IVCashVc_PasteCustCode(var record IVCashVc,string,string,string,var Integer,var string);
external procedure PasteFromSysList(Integer ,Integer);
remote procedure RestAccClassNPTSSClassArrayOnOpen(var Array string,var Integer);
remote procedure CUNPTSSClassArrayOnOpen(record RcVc,var Array string,var Integer);
remote procedure INNPTSSClassArrayOnOpen(record RcVc,var Array string,var Integer);
remote procedure ActType3SClassArrayOnOpen(string,var Array string,var Integer);
remote procedure ReservationStatus2SClassArrayOnOpen(string,var Array string,var Integer);
external procedure ActTypeConseqSClassArrayOnOpen(string,var Array string,var Integer);
external procedure APInstSClassArrayOnOpen(LongInt,var Array string,var Integer);
external procedure ARInstSClassArrayOnOpen(LongInt,var Array string,var Integer);
external procedure ARInstallSClassArrayOnOpen(LongInt,var Array string,var Integer);
external procedure APInstallSClassArrayOnOpen(LongInt,var Array string,var Integer);
external procedure INVc_DIClassSClass(record INVc,var record RcVc);
external procedure DIClassBTSClassArrayOnOpen(integer,integer,var Array string,var Integer);
external procedure VARsubSClassArrayOnOpen(integer,integer,var Array string,var Integer);
external procedure PRClBTSClassArrayOnOpen(integer,integer,var Array string,var Integer);
remote procedure PRVc_AssPRClSClass(record PRVc,var record RcVc);
remote procedure VEBankAccSClassArrayOnOpen(string,var Array string,var Integer);
remote procedure LegalCLInNrSClassArrayOnOpen(LongInt,Date,var Array string,var Integer);
remote procedure LegalInvNrSClassArrayOnOpen(LongInt,Date,string,var Array string,var Integer,Integer,string,string);
external procedure StripEndingSpaces(var string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure ModulesSClassArrayOnOpen(var Array string,var Integer);
external procedure TTRFieldSClassArrayOnOpen(var Array string,var Integer);
remote procedure UserDefRepLinesSClassArrayOnOpen(var Array string,var Integer,string);
external function string 255 removenextlistitem(var string,string);
remote procedure XBRLElementSClassArrayOnOpen(var Array string,var Integer,Integer);

global
function Boolean ModulesSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  ModulesSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  ModulesSClassOnOpenWindow = false;
  return;
end;

global
function Boolean TTRFieldSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  TTRFieldSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  TTRFieldSClassOnOpenWindow = false;
  return;
end;

global
function Boolean AssPRClSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  record RcVc RepSpec;
  record PRVc PRr;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,PRr);
 // GetWindowRecord(wn,RepSpec);
  PRVc_AssPRClSClass(PRr,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssPRClSClassOnOpenWindow = false;
  return;
end;

global
function Boolean  PRClBTSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,fn;  
  
  mwn = MotherWindow(wn);
  switch (WindowActiveField(mwn)) begin
    case "f1": fn = 1;
    case "f2": fn = 2;
    case "f3": fn = 3;
    case "f4": fn = 4;
    case "f5": fn = 5;
    case "ObjStr": fn = 6;
    case "Stext": fn = 7;
    case "LastAcc": fn = 8;
  end;
  PRClBTSClassArrayOnOpen(mwn,fn,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  PRClBTSClassOnOpenWindow = false;
  return;
end;

global
Function Boolean CheckInJobSClassOnOpenWindow(Integer wn)
begin
  record JobVc Jobr;
  record HotelBlock HotelSettings;
  Boolean Cont;
  string 100 tstr,t2;
  
  BlockLoad(HotelSettings); Cont = true;
  Jobr.ResStatus = HotelSettings.ChInSt;
  while LoopKey("ResStatus",Jobr,1,Cont) begin
    if (Jobr.ResStatus <> HotelSettings.ChInSt) then begin
      Cont = false;
    end else begin
      tstr = Jobr.SerNr;
      M4PadString(tstr,8," ",false,t2);
      t2 = t2 & Jobr.CUName;
      SetListString(wn,1,t2,false);
    end;
  end;  
  CheckInJobSClassOnOpenWindow = false;
  return;
end;

global
Function Boolean CheckInJobSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr,t2;
  Integer np;
  Boolean nsep;
  
  mwn = MotherWindow(wn);
  tstr = GetListString(wn,SelectedListLine(wn));
  np = 0;
  tstr = left(tstr,6);
  StripEndingSpaces(tstr);
  CloseWindow(wn);
  PasteString(mwn,tstr);
  CheckInJobSClassOnOKWindow = false;
  return;
end;

global
function Boolean LegalInvNrSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  Integer mwn;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record StockMovVc StockMovr;
  record ORVc ORr;
  record SHVc SHr;
  record RetVc Retr;
  record RetPUVc RetPUr;
  Integer doctype;

  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="IVVc") then begin
    GetWindowRecord(mwn,IVr);
    LegalInvNrSClassArrayOnOpen(IVr.SerNr,IVr.InvDate,IVr.CustCode,astr,acnt,IVr.InvType,IVr.TerminalID,IVr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;
  if (GetWindowFileName(mwn)=="IVCashVc") then begin
    GetWindowRecord(mwn,IVCashr);
    LegalInvNrSClassArrayOnOpen(IVCashr.SerNr,IVCashr.InvDate,IVCashr.CustCode,astr,acnt,10,IVCashr.TerminalID,IVCashr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;
  if (GetWindowFileName(mwn)=="StockMovVc") then begin
    GetWindowRecord(mwn,StockMovr);
    LegalInvNrSClassArrayOnOpen(StockMovr.SerNr,StockMovr.TransDate,"",astr,acnt,11,StockMovr.TerminalID,StockMovr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;  
  if (GetWindowFileName(mwn)=="ORVc") then begin
    GetWindowRecord(mwn,ORr);
    LegalInvNrSClassArrayOnOpen(ORr.SerNr,ORr.OrdDate,ORr.CustCode,astr,acnt,12,ORr.TerminalID,ORr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;
  if (GetWindowFileName(mwn)=="RetVc") then begin
    GetWindowRecord(mwn,Retr);
    LegalInvNrSClassArrayOnOpen(Retr.SerNr,Retr.TransDate,Retr.CustCode,astr,acnt,13,Retr.TerminalID,Retr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end; 
  if (GetWindowFileName(mwn)=="RetPUVc") then begin
    GetWindowRecord(mwn,RetPUr);
    LegalInvNrSClassArrayOnOpen(RetPUr.SerNr,RetPUr.TransDate,RetPUr.VECode,astr,acnt,13,RetPUr.TerminalID,RetPUr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;
  if (GetWindowFileName(mwn)=="SHVc") then begin
    GetWindowRecord(mwn,SHr);
    LegalInvNrSClassArrayOnOpen(SHr.SerNr,SHr.ShipDate,SHr.CustCode,astr,acnt,14,SHr.TerminalID,SHr.BranchID);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end; 
  LegalInvNrSClassOnOpenWindow = false;
  return;
end;

global
function Boolean LegalCLInNrSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  Integer mwn;
  record CLInVc CLInr;
  
  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="CLInVc") then begin
    GetWindowRecord(mwn,CLInr);
    LegalCLInNrSClassArrayOnOpen(CLInr.SerNr,CLInr.TransDate,astr,acnt);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;
  LegalCLInNrSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VEBankAccSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,rownr;
  Integer mwn;
  record VIVc VIr;
  record OPVc OPr;
  row OPVc OPrw;
  string 255 vecode;
  
  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "VIVc":
      GetWindowRecord(mwn,VIr);
      vecode = VIr.VECode;
    case "OPVc":
      GetWindowRecord(mwn,OPr);
      rownr = WindowActiveRow(mwn);
      if (rownr<MatRowCnt(OPr)) then begin
        MatRowGet(OPr,rownr,OPrw);
        vecode = OPrw.VECode;
      end;
  end;
  if (nonblank(vecode)) then begin
    VEBankAccSClassArrayOnOpen(vecode,astr,acnt);
    for (i=0;i<acnt;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;
  VEBankAccSClassOnOpenWindow = false;
  return;
end;

global
function Boolean Companies2SClassOnOpenWindow(Integer wn)
begin
  record CompaniesBlock Compb;
  row CompaniesBlock Compbrw;
  Integer i,rwcnt;
  string 255 tstr;

  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Compb,i,Compbrw);  
    M4PadString(Compbrw.CompCode,10," ",false,tstr);
    tstr = tstr & Compbrw.CompName;
    SetListString(wn,1,tstr,false);
  end;
  Companies2SClassOnOpenWindow = false;
  return;
end;

global
function Boolean DaughterCompSClassOnOpenWindow(Integer wn)
begin
  record DaughterCompBlock DCb;
  row DaughterCompBlock DCrw;
  Integer i,rwcnt;
  string 255 tstr;

  BlockLoad(DCb);
  rwcnt = MatRowCnt(DCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DCb,i,DCrw);  
    M4PadString(DCrw.CompCode,10," ",false,tstr);
    tstr = tstr & DCrw.CompName;
    SetListString(wn,1,tstr,false);
  end;
  DaughterCompSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VARsubSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,fn;
  
  mwn = MotherWindow(wn);
  switch (WindowActiveField(mwn)) begin
    case "f1": fn = 1;
    case "f2": fn = 2;
    case "f3": fn = 3;
    case "f4": fn = 4;
    case "f5": fn = 5;
  end;
  VARsubSClassArrayOnOpen(mwn,fn,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  VARsubSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VARINSClassOnOpenWindow(Integer wn)
begin
  Integer mwn,ar;

  mwn = MotherWindow(wn);
  ar = WindowActiveRow(mwn);
  switch (GetWindowFileName(mwn)) begin
    case "TRVc":
//      GetWindowRecord(mwn,TRr);
  end;
  VARINSClassOnOpenWindow = false;
  return;
end;

global
function Boolean DIClassBTSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,fn;  
  
  mwn = MotherWindow(wn);
  switch (WindowActiveField(mwn)) begin
    case "f1": fn = 1;
    case "f2": fn = 2;
    case "f3": fn = 3;
    case "f4": fn = 4;
    case "f5": fn = 5;
    case "ObjStr": fn = 6;
    case "Stext": fn = 7;
    case "LastAcc": fn = 8;
  end;
  DIClassBTSClassArrayOnOpen(mwn,fn,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  DIClassBTSClassOnOpenWindow = false;
  return;
end;

global
function Boolean DIClassSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  record RcVc RepSpec;
  record INVc INr;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,INr);
  INVc_DIClassSClass(INr,RepSpec);
  PutWindowRecord(wn,RepSpec);
  DIClassSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ARInstSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,rownr,mwn;
  record IPVc IPr;
  row IPVc IPrw;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IPr);
  rownr = WindowActiveRow(mwn);
  if (rownr<MatRowCnt(IPr)) then begin
    MatRowGet(IPr,rownr,IPrw);
  end;
  ARInstSClassArrayOnOpen(IPrw.InvoiceNr,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  ARInstSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ARInstallSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,rownr,mwn;
  record IPVc IPr;
  row IPVc IPrw;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IPr);
  rownr = WindowActiveRow(mwn);
  if (rownr<MatRowCnt(IPr)) then begin
    MatRowGet(IPr,rownr,IPrw);
  end;
  ARInstallSClassArrayOnOpen(IPrw.InvoiceNr,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  ARInstallSClassOnOpenWindow = false;
  return;
end;

global
function Boolean APInstSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,rownr,mwn;
  record OPVc OPr;
  row OPVc OPrw;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,OPr);
  rownr = WindowActiveRow(mwn);
  if (rownr<MatRowCnt(OPr)) then begin
    MatRowGet(OPr,rownr,OPrw);
  end;
  APInstSClassArrayOnOpen(OPrw.VISerNr,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  APInstSClassOnOpenWindow = false;
  return;
end;

global
function Boolean APInstallSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,rownr,mwn;
  record OPVc OPr;
  row OPVc OPrw;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,OPr);
  rownr = WindowActiveRow(mwn);
  if (rownr<MatRowCnt(OPr)) then begin
    MatRowGet(OPr,rownr,OPrw);
  end;
  APInstallSClassArrayOnOpen(OPrw.VISerNr,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  APInstallSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ActTypeConseqSClassOnOpenWindow(Integer wn)
begin
  record ActVc Actr;
  Integer mwn;
  Array string 255 astr;
  Integer acnt,i;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,Actr);
  ActTypeConseqSClassArrayOnOpen(Actr.ActType,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  return;
end;

global
function Boolean ReservationStatus2SClassOnOpenWindow(Integer wn)
begin
  record JobVc Jobr;
  Integer mwn;
  Array string 255 astr;
  Integer acnt,i;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "JobVc": 
      GetWindowRecord(mwn,Jobr);
      ReservationStatus2SClassArrayOnOpen(Jobr.ResStatus,astr,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  return;
end;

global
function Boolean ActType3SClassOnOpenWindow(Integer wn)
begin
  record ActVc Actr;
  Integer mwn;
  Array string 255 astr;
  Integer acnt,i;

  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,Actr);
    ActType3SClassArrayOnOpen(Actr.ActType,astr,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  return;
end;

global
function Boolean UserDefRepLinesSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,rownr,mwn;
  record XBRLSettingsVc XBRLSr;
  row XBRLSettingsVc XBRLSrw;
  string 20 shortname;
  
  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="XBRLSettingsVc") then begin
    GetWindowRecord(mwn,XBRLSr);
    rownr = WindowActiveRow(mwn);
    if (rownr<MatRowCnt(XBRLSr)) then begin
      MatRowGet(XBRLSr,rownr,XBRLSrw);
      shortname = XBRLSrw.UserDefRep;
    end;
  end;
  
  UserDefRepLinesSClassArrayOnOpen(astr,acnt,shortname);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  
  return;
end;

global
function Boolean UserDefRepLinesSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  
  mwn = MotherWindow(wn);
  if (SelectedListLine(wn)!=-1) then begin
    tstr = GetListString(wn,SelectedListLine(wn));
    tstr = removenextlistitem(tstr,chr(9));
    CloseWindow(wn);
    PasteString(mwn,tstr);
  end;
  
  UserDefRepLinesSClassOnOKWindow = false;
  return;
end;

global
function Boolean XBRLElementSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn;
  record XBRLSettingsVc XBRLSr;
  Integer ReportType;
  
  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="XBRLSettingsVc") then begin
    GetWindowRecord(mwn,XBRLSr);
    ReportType = XBRLSr.ReportType;
  end;
  
  XBRLElementSClassArrayOnOpen(astr,acnt,ReportType);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  
  return;
end;

global
function Boolean XBRLElementSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  
  mwn = MotherWindow(wn);
  if (SelectedListLine(wn)!=-1) then begin
    tstr = GetListString(wn,SelectedListLine(wn));
    tstr = removenextlistitem(tstr,chr(9));
    CloseWindow(wn);
    PasteString(mwn,tstr);
  end;
  
  XBRLElementSClassOnOKWindow = false;
  return;
end;

global
function Boolean INNPTSSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  transaction record RcVc gNPTSRepSpec;
  
  INNPTSSClassArrayOnOpen(gNPTSRepSpec,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;  
  INNPTSSClassOnOpenWindow = false;
  return;
end;

global
function Boolean INNPTSSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  record IVCashVc IVCashr;
  record IVVc IVr;
    
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      if (StringFromSysList(wn,-1)!=USetStr(19390)) and (StringFromSysList(wn,-1)!=USetStr(24160)) then begin
        WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);    
        PasteFromSysList(wn,-2);
        KeyPadEnter(mwn);
      end;
    case "IVDClass":
      if (StringFromSysList(wn,-1)!=USetStr(19390)) and (StringFromSysList(wn,-1)!=USetStr(24160)) then begin
        WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",false);    
        PasteFromSysList(wn,-2);
        KeyPadEnter(mwn);
      end;
    case "RestAccDClass":
      if (StringFromSysList(wn,-1)!=USetStr(19390)) and (StringFromSysList(wn,-1)!=USetStr(24160)) then begin
        PutWindowString(mwn,"touchscreenitem",StringFromSysList(wn,-2));
        PutWindowString(mwn,"touchscreenitemqty",1.00);
        DeselectWindow(mwn,false);
        RestAccDClasstouchscreenitemEFAfter(mwn,true);
      end;
  end;
  INNPTSSClassOnOKWindow = false;
  return;
end;

global
function Boolean INNPTSSClassListClick(Integer wn,Integer rownr)
begin
  INNPTSSClassOnOKWindow(wn);
  INNPTSSClassListClick = true;
  return;
end;

global
function Boolean CUNPTSSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  transaction record RcVc gNPTSRepSpec;
  
  CUNPTSSClassArrayOnOpen(gNPTSRepSpec,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;  
  CUNPTSSClassOnOpenWindow = false;
  return;
end;

global
function Boolean RestAccClassNPTSSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  RestAccClassNPTSSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;  
  RestAccClassNPTSSClassOnOpenWindow = false;
  return;
end;

global
function Boolean CUNPTSSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  record IVCashVc IVCashr;
  record IVCashVc IVCash2r;
  Integer err,i,slen;
  string 255 warning;
  record LocalMachineBlock LMb;
  record RestAccVc RestAccr;
  record RestAccVc RestAcc2r;
  record IVVc IVr;
  record IVVc IV2r;
  string 255 errstr,prepstr,invdatewarn,transdatewarn;
    
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
//      PasteFromSysList(wn,-2);
//      KeyPadEnter(mwn);
      if (StringFromSysList(wn,-1)!=USetStr(19391)) then begin
        tstr = GetListString(wn,SelectedListLine(wn));
        slen = len(tstr);
        for (i=1;i<slen;i=i+1) begin
          if (Mid(tstr,i,1)==" ") then begin
            goto L20NPTSIVCash;
          end;
        end;
L20NPTSIVCash:;
        if (slen>1) then begin
          tstr = Left(tstr,i);
        end;
        GetWindowRecord(mwn,IVCashr);
        if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
          GetPrevWindowRecord(mwn,IVCash2r);
          BlockLoad(LMb);
          IVCash2r.CustCode = IVCashr.CustCode;
          IVCashr.CustCode = tstr;
          if (IVCashVc_PasteCustCode(IVCashr,IVCash2r.CustCode,LMb.DefLocation,LMb.PLCode,err,warning)) then begin
            if (nonblank(warning)) then begin
              MessageBox(0,warning);
            end;
            if (err!=0) then begin
              MessageBox(0,err);
            end;
          end;
          PutWindowRecord(mwn,IVCashr);
          ReRunWindowDef(mwn);
          WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
        end;
        CloseWindow(wn);
      end;
    case "IVDClass":
//      PasteFromSysList(wn,-2);
//      KeyPadEnter(mwn);
      if (StringFromSysList(wn,-1)!=USetStr(19391)) then begin
        tstr = GetListString(wn,SelectedListLine(wn));
        slen = len(tstr);
        for (i=1;i<slen;i=i+1) begin
          if (Mid(tstr,i,1)==" ") then begin
            goto L20IV;
          end;
        end;
L20IV:;
        if (slen>1) then begin
          tstr = Left(tstr,i);
        end;
        GetWindowRecord(mwn,IVr);
        if (IVr.OKFlag==0) and (IVr.Invalid==0) then begin
          GetPrevWindowRecord(mwn,IV2r);
          BlockLoad(LMb);
          IV2r.CustCode = IVr.CustCode;
          IVr.CustCode = tstr;
          if (PasteCust2InInv(IVr,IV2r.CustCode,true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
            if (nonblank(warning)) then begin
              MessageBox(0,warning);
            end;
            if (err!=0) then begin
              MessageBox(0,err);
            end;
          end;
          PutWindowRecord(mwn,IVr);
          ReRunWindowDef(mwn);
          IVDClass_RefreshStringList(mwn,IVr);
          WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",false);
        end;
        CloseWindow(wn);
        IVDClass_RefreshStringList(mwn,IVr);
      end;
    case "RestAccDClass":
      if (StringFromSysList(wn,-1)!=USetStr(19391)) then begin
//      PasteFromSysList(wn,-2);
//      KeyPadEnter(mwn);
        tstr = GetListString(wn,SelectedListLine(wn));
        slen = len(tstr);
        for (i=1;i<slen;i=i+1) begin
          if (Mid(tstr,i,1)==" ") then begin
            goto L20RestAcc;
          end;
        end;
L20RestAcc:;
        if (slen>1) then begin
          tstr = Left(tstr,i);
        end;
        GetWindowRecord(mwn,RestAccr);
        if (RestAccr.Closed==0) then begin
          RestAccr.CUCode = tstr;
          if (RestAccVc_PasteCUCode(RestAccr)) then begin
          end;
          PutWindowRecord(mwn,RestAccr);
          ReRunWindowDef(mwn);
        end;
        CloseWindow(wn);
      end;
  end;
  CUNPTSSClassOnOKWindow = false;
  return;
end;

global
function Boolean CUNPTS2SClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  record IVCashVc IVCashr;
  record IVCashVc IVCash2r;
  Integer err,i,slen;
  string 255 warning;
  record LocalMachineBlock LMb;
  record RestAccVc RestAccr;
  record RestAccVc RestAcc2r;
  record CUVc CUr;
    
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
//      PasteFromSysList(wn,-2);
//      KeyPadEnter(mwn);
      if (ReadMarkedRecord(wn,CUr)) begin
        GetWindowRecord(mwn,IVCashr);
        if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
          GetPrevWindowRecord(mwn,IVCash2r);
          BlockLoad(LMb);
          IVCash2r.CustCode = IVCashr.CustCode;
          IVCashr.CustCode = CUr.Code;
          if (IVCashVc_PasteCustCode(IVCashr,IVCash2r.CustCode,LMb.DefLocation,LMb.PLCode,err,warning)) then begin
            if (nonblank(warning)) then begin
              MessageBox(0,warning);
            end;
            if (err!=0) then begin
              MessageBox(0,err);
            end;
          end;
          PutWindowRecord(mwn,IVCashr);
          ReRunWindowDef(mwn);
          WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
        end;
        CloseWindow(wn);
      end;
    case "RestAccDClass":
      if (StringFromSysList(wn,-1)!=USetStr(19391)) then begin
//      PasteFromSysList(wn,-2);
//      KeyPadEnter(mwn);
        tstr = GetListString(wn,SelectedListLine(wn));
        slen = len(tstr);
        for (i=1;i<slen;i=i+1) begin
          if (Mid(tstr,i,1)==" ") then begin
            goto L20RestAcc;
          end;
        end;
L20RestAcc:;
        if (slen>1) then begin
          tstr = Left(tstr,i);
        end;
        GetWindowRecord(mwn,RestAccr);
        if (RestAccr.Closed==0) then begin
          RestAccr.CUCode = tstr;
          if (RestAccVc_PasteCUCode(RestAccr)) then begin
          end;
          PutWindowRecord(mwn,RestAccr);
          ReRunWindowDef(mwn);
        end;
        CloseWindow(wn);
      end;
  end;
  CUNPTS2SClassOnOKWindow = false;
  return;
end;

global
function Boolean CUNPTSSClassListClick(Integer wn,Integer rownr)
begin
  CUNPTSSClassOnOKWindow(wn);
  CUNPTSSClassListClick = true;
  return;
end;

global
function Boolean RestAccClassNPTSSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  RestAccClassNPTSSClassOnOKWindow = false;
  return;
end;

global
function Boolean UserNPTSSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  UserNPTSSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;  
  UserNPTSSClassOnOpenWindow = false;
  return;
end;

global
function Boolean UserNPTSSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  UserNPTSSClassOnOKWindow = false;
  return;
end;

/*
global
function Boolean UserNPTSSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  record IVCashVc IVCashr;
  record IVCashVc IVCash2r;
  Integer err,i,slen;
  string 255 warning;
  record LocalMachineBlock LMb;
  record RestAccVc RestAccr;
  record RestAccVc RestAcc2r;
    
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      tstr = GetListString(wn,SelectedListLine(wn));
      slen = len(tstr);
      for (i=1;i<slen;i=i+1) begin
        if (Mid(tstr,i,1)==" ") then begin
          goto L20NPTSIVCash;
        end;
      end;
L20NPTSIVCash:;
      if (slen>1) then begin
        tstr = Left(tstr,i);
      end;
      GetWindowRecord(mwn,IVCashr);
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        GetPrevWindowRecord(mwn,IVCash2r);
        BlockLoad(LMb);
        IVCashr.SalesMan = tstr;
        PutWindowRecord(mwn,IVCashr);
        ReRunWindowDef(mwn);
      end;
      CloseWindow(wn);
    case "RestAccDClass":
//      PasteFromSysList(wn,-2);
//      KeyPadEnter(mwn);
      tstr = GetListString(wn,SelectedListLine(wn));
      slen = len(tstr);
      for (i=1;i<slen;i=i+1) begin
        if (Mid(tstr,i,1)==" ") then begin
          goto L20RestAcc;
        end;
      end;
L20RestAcc:;
      if (slen>1) then begin
        tstr = Left(tstr,i);
      end;
      GetWindowRecord(mwn,RestAccr);
      if (RestAccr.Closed==0) then begin
        RestAccr.Cashier = tstr;
        PutWindowRecord(mwn,RestAccr);
        ReRunWindowDef(mwn);
      end;
      CloseWindow(wn);
  end;
  UserNPTSSClassOnOKWindow = false;
  return;
end;
*/
global
function Boolean VoidNPTSSClassOnOpenWindow(Integer wn)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  row IVCashVc IVCash2rw;
  Integer i,rwcnt,j,mwn;
  Boolean testf;
  
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      GetWindowRecord(mwn,IVCashr);
      rwcnt = MatRowCnt(IVCashr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        testf = true;
        switch (IVCashrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            goto LkInvoiceRowTypeNormal;
          case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;
            for (j=0;j<rwcnt;j=j+1) begin
              MatRowGet(IVCashr,j,IVCash2rw);
              switch (IVCash2rw.stp) begin
                case kInvoiceRowTypeVoid:
                  if (IVCash2rw.VoidedRowNr==i) then begin
                    testf = false;
                    j = rwcnt;
                  end;
              end;
            end;
          otherwise
            testf = false;
        end;
        if (testf) then begin
          SetListStringAndTag(wn,len(IVCashrw.ArtCode),IVCashrw.ArtCode & "     " & IVCashrw.Spec,i);    
        end;
      end;
  end;
  VoidNPTSSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VoidNPTSSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr,t2;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record IVVc IVr;
  row IVVc IVrw;
  LongInt l;
  Integer rownr;
    
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      l = SelectedListLine(wn);
      rownr = StringToInt(GetListTag(wn,l));
      if (rownr>=0) then begin
        GetWindowRecord(mwn,IVCashr);    
        if (rownr<MatRowCnt(IVCashr)) then begin
          if (IVCashDClassVoidRow(IVCashr,rownr)) then begin
            PutWindowRecord(mwn,IVCashr);    
            MatRowGet(IVCashr,rownr,IVCashrw);
            IVCashDClass_RefreshStringList(mwn,IVCashr);
            tstr = ValToString(-IVCashrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
            M4PadString(ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
            tstr = tstr & t2;  
            SetPOSWindowDisplay(IVCashrw.ArtCode & " " & IVCashrw.Spec,tstr);
            DeselectWindow(mwn,false);
            WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
            CloseWindow(wn);
          end;
        end;
      end;
    case "IVDClass":
      l = SelectedListLine(wn);
      rownr = StringToInt(GetListTag(wn,l));
      if (rownr>=0) then begin
        GetWindowRecord(mwn,IVr);    
        if (rownr<MatRowCnt(IVr)) then begin
          if (IVDClassVoidRow(IVr,rownr)) then begin
            PutWindowRecord(mwn,IVr);    
            MatRowGet(IVr,rownr,IVrw);
            IVDClass_RefreshStringList(mwn,IVr);
            tstr = ValToString(-IVrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
            M4PadString(ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
            tstr = tstr & t2;  
            SetPOSWindowDisplay(IVrw.ArtCode & " " & IVrw.Spec,tstr);
            DeselectWindow(mwn,false);
            WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",false);
            CloseWindow(wn);
          end;
        end;
      end;
  end;
  VoidNPTSSClassOnOKWindow = false;
  return;
end;

procedure IVVc_ARPay2SClass(string index,string sorting,Integer mwn,var Array string astr,var Integer acnt)
begin
  record IVVc IVr;
  
  GetWindowRecord(mwn,IVr);
  FillARPay2SClass(index,sorting,IVr.CustCode,IVr.TransDate,astr,acnt);
  return;
end;

procedure ARPay2SClassOnOpen(string index,string sorting,Integer wn)
begin
  Integer mwn;
  Array string 255 astr;
  Integer acnt,i;

  mwn = MotherWindow(wn);
  if (ProgramType==typTravellingSalesman) then begin
    mwn = MotherWindow(mwn);
  end;
  switch (GetWindowFileName(mwn)) begin
    case "IVVc": IVVc_ARPay2SClass(index,sorting,mwn,astr,acnt);
    case "RcVc": 
      switch (GetWindowClass(mwn)) begin
        case "ConnectToPrepaymentNPTSSClass":
          IVVc_ARPay2SClass(index,sorting,MotherWindow(mwn),astr,acnt);
      end;
  end;
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);
  end;      
  return;
end;

global
function Boolean ARPay2SClassOnOpenWindow(Integer wn)
begin
  ARPay2SClassOnOpen("CustCode","",wn);
  ARPay2SClassOnOpenWindow = false;
  return;
end;

global
procedure ARPay2SClassSortCUPNr()
begin
  ClearStringList(CurWindow);
  ARPay2SClassOnOpen("CUPNr",GetWindowString(CurWindow,"ARPay2SClassSorting"),CurWindow);
  UpdateNamedWindow("ARPay2SClass");
  if (GetWindowString(CurWindow,"ARPay2SClassSorting")=="reverse") then begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","");  
  end else begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","reverse");  
  end;
  return;
end;

global
procedure ARPay2SClassSortOrderNr()
begin
  ClearStringList(CurWindow);
  ARPay2SClassOnOpen("OrderNr",GetWindowString(CurWindow,"ARPay2SClassSorting"),CurWindow);
  UpdateNamedWindow("ARPay2SClass");
  if (GetWindowString(CurWindow,"ARPay2SClassSorting")=="reverse") then begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","");  
  end else begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","reverse");  
  end;
  return;
end;

global
procedure ARPay2SClassSortPayDate()
begin
  ClearStringList(CurWindow);
  ARPay2SClassOnOpen("PayDate",GetWindowString(CurWindow,"ARPay2SClassSorting"),CurWindow);
  UpdateNamedWindow("ARPay2SClass");
  if (GetWindowString(CurWindow,"ARPay2SClassSorting")=="reverse") then begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","");  
  end else begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","reverse");  
  end;
  return;
end;

/*
global
procedure ARPay2SClassSortCustCode()
begin
  ClearStringList(CurWindow);
  ARPay2SClassOnOpen("CustCode",GetWindowString(CurWindow,"ARPay2SClassSorting"),CurWindow);
  UpdateNamedWindow("ARPay2SClass");
  if (GetWindowString(CurWindow,"ARPay2SClassSorting")=="reverse") then begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","");  
  end else begin
    PutWindowString(CurWindow,"ARPay2SClassSorting","reverse");  
  end;
  return;
end;
*/

global
procedure ARPay2SClassOpenARPayClass()
begin
  Integer wn,mwn,nwn;
  record ARPayVc ARPayr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  CloseWindow(wn);      
  nwn = OpenWindow("ARPaySClass",0,mwn,"","",ARPayr);
  return;
end;

global
function Boolean ARPay2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ARPay2SClassOnOKWindow = false;
  return;
end;

procedure ExpVc_PPSClass(string index,string sorting,Integer mwn,var Array string astr,var Array string atag,var Integer acnt)
begin
  record ExpVc Expr;
  
  GetWindowRecord(mwn,Expr);
  FillPPSClass(index,sorting,Expr,WindowActiveRow(mwn),astr,atag,acnt);
  return;
end;

procedure PPSClassOnOpen(string index,string sorting,Integer wn)
begin
  Integer mwn;
  Array string 255 astr,atag;
  Integer acnt,i;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "ExpVc": ExpVc_PPSClass(index,sorting,mwn,astr,atag,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
    SetListStringAndTag(wn,len(astr[i]),astr[i],atag[i]);
  end;      
  return;
end;

global
function Boolean PPSClassOnOpenWindow(Integer wn)
begin
  PPSClassOnOpen("OSPerson","",wn);
  PPSClassOnOpenWindow = false;
  return;
end;

global
procedure PPSClassSortOSFlag()
begin
  ClearStringList(CurWindow);
  PPSClassOnOpen("OSPerson",GetWindowString(CurWindow,"PPSClassSorting"),CurWindow);
  UpdateNamedWindow("PPSClass");
  if (GetWindowString(CurWindow,"PPSClassSorting")=="reverse") then begin
    PutWindowString(CurWindow,"PPSClassSorting","");  
  end else begin
    PutWindowString(CurWindow,"PPSClassSorting","reverse");  
  end;
  return;
end;

global
function Boolean PPSClassOnOKWindow(Integer wn)
begin
  Integer mwn,rownr,pos;
  string 255 ppnr,tstr,tag;
  record ExpVc Expr;
  row ExpVc Exprw;
  row ExpVc Exp2rw;
  Integer j,jrwcnt;
  val ppsum;
  
  ppnr = StringFromSysList(wn,-2);
  tag = GetListTag(wn,SelectedListLine(wn));

  mwn = MotherWindow(wn);
  CloseWindow(wn);
  if (GetWindowFileName(mwn)=="ExpVc") begin
    GetWindowRecord(mwn,Expr);
    rownr = WindowActiveRow(mwn);
    if (rownr<MatRowCnt(Expr)) then begin
      MatRowGet(Expr,rownr,Exprw);
      Exprw.PPNr = StringToLongInt(ppnr);
      ExtractObj(tag,pos,tstr);
      Exprw.PPRow = StringToLongInt(tstr);
      ExtractObj(tag,pos,tstr);
      Exprw.Sum = ValFromString(tstr,".","");
      jrwcnt = MatRowCnt(Expr);
      for (j=0;j<jrwcnt;j=j+1) begin
        MatRowGet(Expr,j,Exp2rw);
        switch (Exp2rw.stp) begin
          case kExpenseRowTypePersonnelPayment:
            if (Exp2rw.PPNr==Exprw.PPNr) and (Exp2rw.PPRow==Exprw.PPRow) and (j!=rownr) then begin
              ppsum = ppsum + Exp2rw.Sum; 
            end;
        end;
      end;
      if ((Exprw.Sum+ppsum)>Expr.PayVal) then begin
        Exprw.Sum = Expr.PayVal - ppsum;
      end;
      MatRowPut(Expr,rownr,Exprw);
      PutWindowRecord(mwn,Expr);
    end;
  end;

  PPSClassOnOKWindow = false;
  return;
end;

global
function Boolean BaggerSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  BaggerSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  BaggerSClassOnOpenWindow = false;
  return;
end;

global
function Boolean SupervisorSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  SupervisorSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  SupervisorSClassOnOpenWindow = false;
  return;
end;

procedure AddLangMode(Integer wn,string text,string tag)
begin
  SetListStringAndTag(wn,0,tag & chr(9) & "     " & text,tag);
  return;
end;

procedure AddLangModeIfExists(Integer wn,string text,string tag)
begin
  string 255 tstr;
  tstr = ResourceFolder & "/hob/su" & LowerCase(tag) & ".hob";
  if (FileExists(tstr)) then begin
    AddLangMode(wn,text,tag);
  end;
  return;
end;

global
function Boolean LangModeSClassOnOpenWindow(Integer wn)
begin
  AddLangMode(wn,StringFromSet(80,LangAngolanPortuguese),"ANG");
  AddLangMode(wn,StringFromSet(80,LangArabic),"ARB");
  AddLangMode(wn,StringFromSet(80,LangBrazilian),"BRA");
  AddLangMode(wn,StringFromSet(80,LangCroatian),"CRO");
  AddLangMode(wn,StringFromSet(80,LangCzech),"CZE");
  AddLangMode(wn,StringFromSet(80,LangDanish),"DAN");
  AddLangMode(wn,StringFromSet(80,LangEnglish),"AUS");
  AddLangMode(wn,StringFromSet(80,LangEnglish),"SAF");
  AddLangMode(wn,StringFromSet(80,LangEnglish),"ENG");
  AddLangMode(wn,StringFromSet(80,LangEnglish),"USA");
  AddLangMode(wn,StringFromSet(80,LangEstonian),"EST");
  AddLangMode(wn,StringFromSet(80,LangFinnish),"FIN");
  AddLangMode(wn,StringFromSet(80,LangFrench),"FRA");
  AddLangMode(wn,StringFromSet(80,LangGerman),"GER");
  AddLangMode(wn,StringFromSet(80,LangHungarian),"HUN");
  AddLangMode(wn,StringFromSet(80,LangIcelandic),"ICE");
  AddLangMode(wn,StringFromSet(80,LangItalian),"ITA");
  AddLangMode(wn,StringFromSet(80,LangLatvian),"LAT");
  AddLangMode(wn,StringFromSet(80,LangLithuanian),"LIT");
  AddLangMode(wn,StringFromSet(80,LangNorwegian),"NOR");
  AddLangMode(wn,StringFromSet(80,LangPolish),"POL");
  AddLangMode(wn,StringFromSet(80,LangPortuguese),"POR");
  AddLangMode(wn,StringFromSet(80,LangRomanian),"ROM");
  AddLangMode(wn,StringFromSet(80,LangRussian),"RUS");
  AddLangMode(wn,StringFromSet(80,LangSerbian),"SER");
  AddLangMode(wn,StringFromSet(80,LangSlovak),"SVK");
  AddLangMode(wn,StringFromSet(80,LangSlovenian),"SLO");
  AddLangMode(wn,StringFromSet(80,LangSpanish),"ESP");
  AddLangMode(wn,StringFromSet(80,LangSwedish),"SWE");
  AddLangMode(wn,StringFromSet(80,LangTurkish),"TUR");
  AddLangMode(wn,StringFromSet(80,LangUkrainian),"UKR");
  AddLangMode(wn,StringFromSet(80,LangVietnamese),"VIE");
  LangModeSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ClientLangModeTClassOnOpenWindow(Integer wn)
begin
  AddLangModeIfExists(wn,StringFromSet(80,LangAngolanPortuguese),"ANG");
  AddLangModeIfExists(wn,StringFromSet(80,LangArabic),"ARB");
  AddLangModeIfExists(wn,StringFromSet(80,LangBrazilian),"BRA");
  AddLangModeIfExists(wn,StringFromSet(80,LangCroatian),"CRO");
  AddLangModeIfExists(wn,StringFromSet(80,LangCzech),"CZE");
  AddLangModeIfExists(wn,StringFromSet(80,LangDanish),"DAN");
  AddLangModeIfExists(wn,StringFromSet(80,LangEnglish),"AUS");
  AddLangModeIfExists(wn,StringFromSet(80,LangEnglish),"SAF");
  AddLangModeIfExists(wn,StringFromSet(80,LangEnglish),"ENG");
  AddLangModeIfExists(wn,StringFromSet(80,LangEnglish),"USA");
  AddLangModeIfExists(wn,StringFromSet(80,LangEstonian),"EST");
  AddLangModeIfExists(wn,StringFromSet(80,LangFinnish),"FIN");
  AddLangModeIfExists(wn,StringFromSet(80,LangFrench),"FRA");
  AddLangModeIfExists(wn,StringFromSet(80,LangGerman),"GER");
  AddLangModeIfExists(wn,StringFromSet(80,LangHungarian),"HUN");
  AddLangModeIfExists(wn,StringFromSet(80,LangIcelandic),"ICE");
  AddLangModeIfExists(wn,StringFromSet(80,LangItalian),"ITA");
  AddLangModeIfExists(wn,StringFromSet(80,LangLatvian),"LAT");
  AddLangModeIfExists(wn,StringFromSet(80,LangLithuanian),"LIT");
  AddLangModeIfExists(wn,StringFromSet(80,LangNorwegian),"NOR");
  AddLangModeIfExists(wn,StringFromSet(80,LangPolish),"POL");
  AddLangModeIfExists(wn,StringFromSet(80,LangPortuguese),"POR");
  AddLangModeIfExists(wn,StringFromSet(80,LangRomanian),"ROM");
  AddLangModeIfExists(wn,StringFromSet(80,LangRussian),"RUS");
  AddLangModeIfExists(wn,StringFromSet(80,LangSerbian),"SER");
  AddLangModeIfExists(wn,StringFromSet(80,LangSlovak),"SVK");
  AddLangModeIfExists(wn,StringFromSet(80,LangSlovenian),"SLO");
  AddLangModeIfExists(wn,StringFromSet(80,LangSpanish),"ESP");
  AddLangModeIfExists(wn,StringFromSet(80,LangSwedish),"SWE");
  AddLangModeIfExists(wn,StringFromSet(80,LangTurkish),"TUR");
  AddLangModeIfExists(wn,StringFromSet(80,LangUkrainian),"UKR");
  AddLangModeIfExists(wn,StringFromSet(80,LangVietnamese),"VIE");
  ClientLangModeTClassOnOpenWindow = false;
  return;
end;

global
function Boolean SpecialMenuFunSClassOnOpenWindow(Integer wn)
begin
  
  SetListStringAndTag(wn,0,StringFromStringSet(493,"OpenPOSSessionsm"),"OpenPOSSessionsm");
  SetListStringAndTag(wn,1,StringFromStringSet(493,"ClosePOSSessionsm"),"ClosePOSSessionsm");
  SetListStringAndTag(wn,2,StringFromStringSet(493,"POSMoneyInsm"),"POSMoneyInsm");
  SetListStringAndTag(wn,2,StringFromStringSet(493,"POSMoneyOutsm"),"POSMoneyOutsm");
  SetListStringAndTag(wn,2,StringFromStringSet(493,"IVCashCashupRnsm"),"IVCashCashupRnsm");
  
  return;
end;

global
function Boolean SynkAutoSerFileNameSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;

  SetListStringAndTag(wn,0,USetStr(24600),"IVCashVc");
  SetListStringAndTag(wn,0,USetStr(24601),"GiftReceiptVc");
  SetListStringAndTag(wn,0,USetStr(24602),"CouponVc");
  SetListStringAndTag(wn,0,USetStr(24603),"POSEventVc");
  SetListStringAndTag(wn,0,USetStr(24604),"POSBalanceVc");
  SetListStringAndTag(wn,0,USetStr(24605),"CashVc");
  SetListStringAndTag(wn,0,USetStr(24606),"GCVc");
//  SetListStringAndTag(wn,0,USetStr(24607),"GCSVc");
//  SetListStringAndTag(wn,0,USetStr(24608),"GCRVc");

  SynkAutoSerFileNameSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ApproversSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Array string 255 astr2;
  Integer i,acnt,mwn;
  record RcVc RepSpec;
  string 255 tstr;
  
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,RepSpec);
    switch (WindowActiveField(mwn)) begin
      case "f2":
        tstr = RepSpec.f11;
      otherwise
        tstr = RepSpec.f12;
    end;
  end;
  ApproversSClassArrayOnOpen(astr,astr2,acnt,tstr);
  for (i=0;i<acnt;i=i+1) begin
    AddListRow(wn,"Approvers",1,astr[i],0);
    AddListData(wn,"Approvers","UserCode",astr[i]);
    AddListData(wn,"Approvers","UserName",astr2[i]);
//    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  ApproversSClassOnOpenWindow = false;
  return;
end;

procedure SelectApproverWClassSpecPasteNameSerNr(Integer wn,var string psname)
begin
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  if (nonblank(RepSpec.f12)) then begin
    psname = "ApproversSClass";
  end else begin
    psname = "UserSClass";
  end;
  return;
end;

global
function string 40 SelectApproverWClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "f1": SelectApproverWClassSpecPasteNameSerNr(wn,psname);
  end;
  SelectApproverWClassSpecPasteName = psname;
  return;
end;
