external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote function string 255 UpWindDI_IN2SClass(string,Integer);
remote function string 255 GetSelDI_IN2SClass(string,LongInt,var Array string,var Integer);
remote procedure IN2SClassOnOKWindowDo(string,var Array string,var Integer);
external procedure OrderStockRClassRD(var record RcVc);
external procedure RecSumup(record RecVc);
external procedure FindMotherWindowLocation(Integer,var string,var Date);
external procedure INrsRClassReportDef(var record RcVc);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
remote procedure CntDiTypesForIn(string,var Array string,var Integer,var Integer); //Edit***************************Sasha2,11:35 03.11.2015
external procedure ExtractObj(string,var Integer,var string); //Edit***************************Sasha2,11:36 03.11.2015
remote function boolean CompanyIsJWLikeCompany(Integer); //Edit***************************Sasha2,17:46 14.06.2016

global //Edit***************************Sasha2,16:45 14.06.2016 {
function string 20 ReturnFieldDITypeNotJW(string fieldname)
begin
  string 20 res;
  
    switch (fieldname) begin
      case "BrandSC": res = "BRAND";
      case "classif30": res = "MODEL";
      case "Category": res = "CATEGORY";
      case "classif31": res = "TYPE";
      case "Collection": res = "COLLECTION";
      case "Metal": res = "METAL";
      case "WeightOfMat": res = "WEIGHT";
      case "Carat": res = "CARAT";
      otherwise res = "";
    end;
    
    ReturnFieldDITypeNotJW = res;
  return;
end;//Edit***************************Sasha2,16:45 14.06.2016 }

global //Edit***************************Sasha2,15:46 07.12.2015 {
function string 20 ReturnFieldDIType(string fieldname,boolean reversef)
begin
  string 20 res;
  
    if (reversef==false) then begin
      switch (fieldname) begin
        case "Type": res = "TYPE";
        case "Brand": res = "BRAND";
        case "Collection": res = "COLL_J"; //"COLLECTION"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "classif30": res = "COLL_W"; //"COLLECTION"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "classif31": res = "COLL_A"; //"COLLECTION"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "Style": res = "STYLE_J";
        case "classif32": res = "STYLE_A";
        case "WatchType": res = "WARCARD";
        case "GenderSC": res = "GENDER";
        case "Dial": res = "DIAL";
        case "Strap": res = "STRAP";
        case "Material": res = "MATERIAL_J";
        case "classif33": res = "MATERIAL_W";
        case "classif34": res = "MATERIAL_A";
        case "PrecStones": res = "COMMENT";
        case "SerNrf": res = "SERIALYES";
        case "Mechanism": res = "MECHANISM";
        case "Function": res = "FUNCTIONS";
        case "WaterResist": res = "SAP";
        case "Diameter": res = "DIAMETER";
        case "Category": res = "CATEGORY_J";
        case "Division": res = "DIVISION";
        case "WeightOfMat": res = "WEIGHT"; //"WEIGHT"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "Diamonds": res = "CATEGORY_A"; 
        case "DiamondsCarat": res = "D_CARAT"; //"D_CARAT"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "SolidStones05": res = "CENT_ST"; //"CENT_ST"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "PrecAndSemiPrec": res = "PRECIOUS";
        case "RingSizes": res = "R_SIZE"; //"R_SIZE"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "Carat": res = "CARAT"; //"Carat"  is a switch case in DIsWithTypeExistsOrCreateSpecific function!!!
        case "ClaritySC": res = "CLARITY";
        case "Color": res = "C_S";
        case "ColorOfMat": res = "C_M";
        case "ShapeCut": res = "SHAPE_CUT";
        case "Description": res = "DESCRIPT";
        case "Art": res = "ART";
        otherwise res = "";
      end;
    end else begin
      switch (fieldname) begin
        case "TYPE": res = "Type";
        case "BRAND": res = "Brand";
        case "COLL_J": res = "Collection";
        case "COLL_W": res = "classif30";
        case "COLL_A": res = "classif31";
        case "STYLE_J": res = "Style";
        case "STYLE_A": res = "classif32";
        case "WARCARD": res = "WatchType";
        case "GENDER": res = "GenderSC";
        case "DIAL": res = "Dial";
        case "STRAP": res = "Strap";
        case "MATERIAL_J": res = "Material";
        case "COMMENT": res = "PrecStones";
        case "SERIALYES": res = "SerNrf";
        case "MECHANISM": res = "Mechanism";
        case "FUNCTIONS": res = "Function";
        case "SAP": res = "WaterResist";
        case "DIAMETER": res = "Diameter";
        case "CATEGORY_J": res = "Category";
        case "DIVISION": res = "Division";
        case "WEIGHT": res = "WeightOfMat";
        case "CATEGORY_A": res = "Diamonds";
        case "D_CARAT": res = "DiamondsCarat";
        case "CENT_ST": res = "SolidStones05";
        case "PRECIOUS": res = "PrecAndSemiPrec";
        case "R_SIZE": res = "RingSizes";
        case "CARAT": res = "Carat";
        case "CLARITY": res = "ClaritySC";
        case "C_S": res = "Color";
        case "C_M": res = "ColorOfMat";
        case "SHAPE_CUT": res = "ShapeCut";
        case "DESCRIPT": res = "Description";
        case "ART": res = "Art";
        otherwise res = "";
      end;
    end;
    
    ReturnFieldDIType = res;
  return;
end; //Edit***************************Sasha2,15:46 07.12.2015 }

global //Edit***************************Sasha2,15:46 07.12.2015 {
function boolean SkipCheckDIType(string type)
begin
  boolean res;
    
    res = false;
    switch (type) begin
      case "SERIALYES": res = true;
    end;

    SkipCheckDIType = res;
  return;
end; //Edit***************************Sasha2,15:46 07.12.2015 }

procedure CalcVolume(val w,val h,val d,var val vol) 
BEGIN
  vol = blankval;
  if (w!=0) then begin
    if (h!=0) then begin
      vol = w*h;
    end else begin
      if (d!=0) then begin
        vol = w;
      end else begin
        goto LCalcVolume;
      end;
    end;
  end else begin
    if (h!=0) then begin
      if (d!=0) then begin
        vol = h;
      end else begin
        goto LCalcVolume;
      end;
    end else begin
      goto LCalcVolume;
    end;
  end;
  if (d!=0) then begin
    vol = vol*d;
  end;
  if (vol==0) then begin vol = blankval; end;
LCalcVolume:;
  RETURN;
END;

function val CalcWeight(string unit,val volume)
BEGIN
  val weight;
  record UnitVc UNr;

  weight = blankval;
  UNr.Code = unit;
  if (ReadFirstMain(UNr,1,true)) then begin
    if (UNr.VolWeighFact!=0) then begin
      weight = volume*UNr.VolWeighFact;
    end;
  end;
  if (weight==0) then begin weight = blankval; end;
  CalcWeight = weight;
  RETURN;
END;

procedure CalcINFields(record INVc INp)
BEGIN
  val v,d,w;
  
  v = INp.Volume;
  d = INp.Density;
  if ((INp.Width!=0) and (INp.Height!=0) and (INp.Depth!=0)) then begin
    CalcVolume(INp.Width,INp.Height,INp.Depth,v);
  end;
  if (INp.NetWeight==0) then begin
    INp.NetWeight = CalcWeight(INp.Unittext,v);
  end;
  if ((INp.NetWeight==0) and (v==0)) then begin
    d = INp.NetWeight/v;
  end;  
  INp.Volume = v;
  INp.Density = d;
  RETURN;
END;

function Boolean INDClassWidthEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    DeselectWindow(wn,false);
    GetWindowRecord(wn,INr);
    CalcINFields(INr);    
    PutWindowRecord(wn,INr);        
  end;
  INDClassWidthEFAfter = res;
  RETURN;
END;

function Boolean INDClassHeightEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    DeselectWindow(wn,false);
    GetWindowRecord(wn,INr);
    CalcINFields(INr);    
    PutWindowRecord(wn,INr);        
  end;
  INDClassHeightEFAfter = res;
  RETURN;
END;

function Boolean INDClassDepthEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    DeselectWindow(wn,false);
    GetWindowRecord(wn,INr);
    CalcINFields(INr);    
    PutWindowRecord(wn,INr);        
  end;
  INDClassDepthEFAfter = res;
  RETURN;
END;

function Boolean INDClassDensityEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    DeselectWindow(wn,false);
    GetWindowRecord(wn,INr);
    if ((INr.Volume!=0) and (INr.Density!=0)) then begin
      INr.NetWeight = INr.Volume*INr.Density;
    end;
    PutWindowRecord(wn,INr);        
  end;
  INDClassDensityEFAfter = res;
  RETURN;
END;

function Boolean INDClassNetWeightEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record INVc INr;
  val d;
  
  if (changed!=0) then begin
    res = true;
    DeselectWindow(wn,false);
    GetWindowRecord(wn,INr);
    d = INr.Density;
    if ((INr.Volume!=0) and (INr.NetWeight!=0)) then begin
      d = INr.NetWeight/INr.Volume;
    end;
    INr.Density = d;
    PutWindowRecord(wn,INr);        
  end;
  INDClassNetWeightEFAfter = res;
  RETURN;
END;

function Boolean INDClassVARMaskEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record INVc INr;
  record VARMasksVc VARMr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    VARMr.Code = INr.VARMask;
    if (ReadFirstMain(VARMr,1,true)) then begin
      INr.VARMask = VARMr.Masks;
      PutWindowRecord(wn,INr);        
    end;
  end;
  INDClassVARMaskEFAfter = res;
  return;
end;

global
function Boolean INDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Width": res = INDClassWidthEFAfter(wn,changed);
    case "Height": res = INDClassHeightEFAfter(wn,changed);
    case "Depth": res = INDClassDepthEFAfter(wn,changed);
    case "Density": res = INDClassDensityEFAfter(wn,changed);
    case "NetWeight": res = INDClassNetWeightEFAfter(wn,changed);
    case "VARMask": res = INDClassVARMaskEFAfter(wn,changed!=0);
  end;
  INDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean INDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  GetWindowRecord(wn,INr);
  SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0); // To work with NextRecord etc.
  INDClassBeforeEditField = res;
  RETURN;
END;

//special menus

global
procedure INStatusINDsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    wn = CurWindow;
    GetWindowRecord(wn,INr);
    RepSpec.Media = mtScreen;
    RepSpec.f1 = INr.Code;
    RepSpec.repname = "INInfoRn";
    RunReport(RepSpec,0);
  end else begin
    MessageBox(22099,"");
  end;
  RETURN;
END;

global
procedure INStatusINLsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn,i;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    if (i==1) then begin
      RepSpec.f1 = INr.Code;
    end;
    i = i + 1;
  end;  
  if (nonblank(RepSpec.f1)) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
  end;
  RepSpec.f1 = RepSpec.f1 & INr.Code;  
  RepSpec.Media = mtScreen;
  RepSpec.repname = "INInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure INStatusINSsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn,i;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    if (i==1) then begin
      RepSpec.f1 = INr.Code;
    end;
    i = i + 1;
  end;  
  if (nonblank(RepSpec.f1)) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
  end;
  RepSpec.f1 = RepSpec.f1 & INr.Code;  
  RepSpec.Media = mtScreen;
  RepSpec.repname = "INInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure PIFromINDsm()
BEGIN
  record INVc INr;
  record PIVc PIr;
  row PIVc PIrw;
  row INVc INrw;
  Integer wn,nwn;
  Integer i,rwcnt,pi;
  
  wn = CurWindow;
  GetWindowRecord(wn,INr);
  RecordNew(PIr);
  
  PIr.ItemCode = INr.Code;
  PIr.Comment = INr.Name;
  PIr.PurPrice = INr.InPrice;
  PIr.PIFactor = blankval;
  PIr.NormPOQty = 1;
  PIr.MinPOQty = 1;
  rwcnt = MatRowCnt(INr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INr,i,INrw);
    if (blank(INrw.LangCode)) then begin
      PIrw.Text = INrw.Text;
      MatRowPut(PIr,pi,PIrw);
      pi = pi + 1;
    end;
  end;
  nwn = OpenWindow("PIDClass",1,0,"","",PIr);
//      EFGoto(nwn,oldfn,true);
  RETURN;
END;

global
procedure RecFromINDsm()
BEGIN
  record INVc INr;
  record RecVc Recr;
  row RecVc Recrw;
  Integer wn,nwn;
  Integer i,rwcnt;
  
  wn = CurWindow;
  GetWindowRecord(wn,INr);
  RecordNew(Recr);
  Recr.Code = INr.Code;
  if (ReadFirstMain(Recr,1,true)==false) then begin
    Recr.Code = INr.Code;
    Recr.Comment = INr.Name;
    Recr.NormProdQty = 1;
    Recr.StdBatch = 1;
    Recr.NumProd = 1;
    Recrw.Item = INr.Code;    
    Recrw.Comment = INr.Name;
    Recrw.ItemCost = INr.InPrice;    
    Recrw.OutQty = 1;
    MatRowPut(Recr,0,Recrw);
    RecSumup(Recr);        
    nwn = OpenWindow("RecDClass",1,0,"","",Recr);
    INr.Recepy = Recr.Code;
    PutWindowRecord(wn,INr);
  end;
  RETURN;
END;

global
procedure INHistINDsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    wn = CurWindow;
    GetWindowRecord(wn,INr);
    ReportDefaults(RepSpec,"INrsRClass");  
    INrsRClassReportDef(RepSpec); 
    RepSpec.Media = mtScreen;
    RepSpec.f1 = INr.Code;
    RepSpec.repname = "INrsRn";
    RepSpec.flags[14] = 1;
    RepSpec.flags[20] = 1;
    RepSpec.ArtMode = 1;
    RunReport(RepSpec,0);
  end else begin
    MessageBox(22099,"");
  end;
  RETURN;
END;

global
procedure INHistINLsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,INr)) then begin
    ReportDefaults(RepSpec,"INrsRClass"); 
    INrsRClassReportDef(RepSpec); 
    RepSpec.Media = mtScreen;
    RepSpec.f1 = INr.Code;
    RepSpec.repname = "INrsRn";
    RepSpec.flags[14] = 1;
    RepSpec.flags[20] = 1;
    RepSpec.ArtMode = 1;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
procedure ItemStatusINLsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  if (ReadMarkedRecord(wn,INr)) then begin
    SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
  end;
  RETURN;
END;

global
function Boolean INLClassSwitchRow(Integer wn,Integer rownr)
BEGIN
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  INLClassSwitchRow = true;
  RETURN;
END;

global
function Boolean INSClassSwitchRow(Integer wn,Integer rownr)
BEGIN
  record INVc INr;
  val t,tproc,unitprdisc;
  string 20 location;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      FindMotherWindowLocation(wn,location,td);
      SendArtStat(INr.Code,location,INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  INSClassSwitchRow = true;
  RETURN;
END;

global
function Boolean IN2SClassSwitchRow(Integer wn,Integer rownr)
BEGIN
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;
	
  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  IN2SClassSwitchRow = true;
  RETURN;
END;

global
function Boolean IN3SClassSwitchRow(Integer wn,Integer rownr)
begin
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  IN3SClassSwitchRow = true;
  return;
end;

global
function Boolean IN2SClassOnOpenWindow(Integer wn)
BEGIN
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  
  l = SelectedListLine(wn);
  subset = GetSelDI_IN2SClass(GetWindowSubset(wn),l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  IN2SClassOnOpenWindow = true;
  RETURN;
END;

global
function Boolean INDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ItemSettingBlock ItemRec;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    switch (fieldname) begin
      case "Code": res = false;
      case "UPrice1":
        BlockLoad(ItemRec);
        if (ItemRec.NoBasePriceChange!=0) then begin res = false; end;
      case "WeighedAvPrice":
        if (UserCanAction("AllowINWeighedAvChange",true)==false) then begin 
          res = false;
        end;
      case "WeighedAvPriceB2":
        if (UserCanAction("AllowINWeighedAvChange",true)==false) then begin 
          res = false;
        end;
      case "CostPerc":
        if (UserCanAction("AllowINCostModelChange",true)==false) then begin
          res = false;
        end;
    end;
  end;
  INDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean INDClassItemTypeButtonAfter(Integer wn,Boolean changedf)
begin        
  record INVc INr;  
  record STVc STr;  
  Boolean res;

  DeselectWindow(wn,false);
  if (WindowState(wn)==1) then begin goto LINDClassItemTypeButtonAfter; end;//Rs_insert
  GetWindowRecord(wn,INr);

  STr.ArtCode = INr.Code;
  if (ReadFirstMain(STr,1,true)) then begin
    MessageBox(1257,"");
    goto LINDClassItemTypeButtonAfter;
  end;

/*  
moved to record check
  IHr.ArtCode = INr.Code;
  if (ReadFirstKey("ArtCode",IHr,1,true)) begin
    MessageBox(1257,"");
    goto LINDClassItemTypeButtonAfter;
  end;
*/  
LINDClassItemTypeButtonAfter:;
  INDClassItemTypeButtonAfter = res;  
  return;
end;

global
function Boolean INDClassSerNrfButtonAfter(Integer wn,Boolean changedf)
begin        
  record INVc INr;  
  record STVc STr;  
  record ItemHistVc IHr;  
  Boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,INr);
  STr.ArtCode = INr.Code;
  if (ReadFirstMain(STr,1,true)) then begin
    MessageBox(1257,"");
    goto LINDClassSerNrfButtonAfter;
  end;
/*moved to rcheck  
  IHr.ArtCode = INr.Code;
  if (ReadFirstKey("ArtCode",IHr,1,true)) begin
    MessageBox(1257,"");
    goto LINDClassSerNrfButtonAfter;
  end;
*/  
LINDClassSerNrfButtonAfter:;
  INDClassSerNrfButtonAfter = res;  
  return;
end;

global
procedure INSearchLsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("SearchItemRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchItemRClass");
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchItemRn";
  RepSpec.critname = "SearchItemRClass";
  RepSpec.Media = 6;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  RETURN;
END;

global
function string 40 INDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record INVc INr;
  record ITVc ITr;
  Integer rownr;
  boolean sp;
  
  sp=false;
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DispGroups":
      GetWindowRecord(wn,INr);
      if (nonblank(INr.Group)) then begin
        ITr.Code = INr.Group;
        if (ReadFirstMain(ITr,1,true)) then begin
          if (nonblank(ITr.ClassType)) then begin
            sp = true;
          end;
        end;
      end;
      if (sp) then begin
        psname = "DIClassSClass";
      end else begin
        //psname = "DISClass";
        psname = "DIWithTypesSClass";
      end;
  end;
  INDClassSpecPasteName = psname;
  return;
end;

global
procedure INSearchSsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("SearchItemRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchItemRClass");
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchItemRn";
  RepSpec.critname = "SearchItemRClass";
  RepSpec.Media = 6;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  RETURN;
END;

global
procedure ArtStatIClassSL()
begin
  Integer wn;
  record RcVc RepSpec,curRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,curRepSpec);

  ReportDefaults(RepSpec,"INRClass");
  RepSpec.repname = "InvValRn";
  RepSpec.Media = mtScreen;
  RepSpec.f1 = curRepSpec.f1;
  RepSpec.f2 = curRepSpec.f6;
  RepSpec.ArtMode = 2;
  RepSpec.flags[14] = 1;
  RepSpec.flags[10] = 1;
  RunReport(RepSpec,0);
  return;
end;

global
procedure ArtStatIClassOS()
begin
  Integer wn;
  record RcVc RepSpec,curRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,curRepSpec);

  ReportDefaults(RepSpec,"OrderStockRClass");  
  OrderStockRClassRD(RepSpec);
  RepSpec.repname = "OrderStockRn";
  RepSpec.Media = mtScreen;
  RepSpec.LastAcc = curRepSpec.f1;
  RepSpec.f5 = curRepSpec.f6;
  RepSpec.flags[10] = 1;
  RepSpec.flags[15] = 2;
  RepSpec.ArtMode = 2;
  RepSpec.flags[4] = 0;
  RepSpec.flags[6] = 0;
  RepSpec.f7 = StringFromSet(433,kOrderTypeNormal);
  RunReport(RepSpec,0);
  return;
end;

global
procedure ArtStatIClassPOS()
begin
  Integer wn;
  record RcVc RepSpec,curRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,curRepSpec);

  ReportDefaults(RepSpec,"POOrdStockRClass");
  RepSpec.repname = "POOrdStockRn";
  RepSpec.Media = mtScreen;
  RepSpec.LastAcc = curRepSpec.f1;
  RepSpec.TransStr = curRepSpec.f6;
  RepSpec.flags[0] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 0;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[10] = 1;
  RepSpec.ArtMode = 2;
  RepSpec.f7 = StringFromSet(433,kOrderTypeNormal);
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure LocItemStatDsm()
Begin
  record INVc INr;
  Record RcVc RepSpec;
  GetWindowRecord(CurWindow,INr);
  RepSpec.f1 = INr.Code;
  RepSpec.long1 = 6;
  RepSpec.flags[12] = 1;
  RepSpec.flags[15] = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ItemLocationStatusRn";
  RunReport(RepSpec,0);
  return;
End;

global
function Boolean IN2SClassOnOKWindow(Integer wn)
begin  
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
    
  l = SelectedListLine(wn);
  subset = GetSelDI_IN2SClass(GetWindowSubset(wn),l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  //messagebox(0,subset);
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  IN2SClassOnOKWindow = true;
  return;
end;

global
procedure IN2SClassTop()
begin
  Integer wn;
  string 255 subset;
  LongInt l;
  Array string 255 adi;
  Integer i,acnt;
  
  wn = CurWindow;
  subset = UpWindDI_IN2SClass(GetWindowSubset(wn),0);
  subset = GetSelDI_IN2SClass(subset,l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
procedure IN2SClassBack()
begin
  Integer wn;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  LongInt l;
  
  wn = CurWindow;
  subset = UpWindDI_IN2SClass(GetWindowSubset(wn),1);
  subset = GetSelDI_IN2SClass(subset,l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
procedure AltItemINSsm()
begin
  Integer wn,mwn,i;
  record INVc INr;
  record AltINVc AltINr;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    i = i + 1;
  end;
  if (i==2) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    wn = OpenWindow("AltINSClass",0,mwn,INr.Code,"",AltINr);
  end else begin
    MessageBox(26210,"");
  end;
  
  return;
end;

global
procedure CrossItemINSsm()
begin
  Integer wn,mwn,i;
  record INVc INr;
  record CrossINVc CrossINr;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    i = i + 1;
  end;
  if (i==2) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    wn = OpenWindow("CrossINSClass",0,mwn,INr.Code,"",CrossINr);
  end else begin
    MessageBox(26210,"");
  end;
  
  return;
end;

global
function Boolean INDClassPrimaryCostModelButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (!UserCanAction("AllowINCostModelChange",true)) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassPrimaryCostModelButtonAction = res;
  return;
end;

global
function Boolean INDClassQueuedCostModelButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (!UserCanAction("AllowINCostModelChange",true)) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassQueuedCostModelButtonAction = res;
  return;
end;

global
function Boolean INDClassFIFOPerSerialNrButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (!UserCanAction("AllowINCostModelChange",true)) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassFIFOPerSerialNrButtonAction = res;
  return;
end;

global
function Boolean INDClassFIFOPerLocationButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (!UserCanAction("AllowINCostModelChange",true)) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassFIFOPerLocationButtonAction = res;
  return;
end;

global
function Boolean INDClassWAPerLocationButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (!UserCanAction("AllowINCostModelChange",true)) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassWAPerLocationButtonAction = res;
  return;
end;

global
procedure ItemStatusAltINDsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,INr);
  RepSpec.Media = mtScreen;
  RepSpec.f1 = INr.Code;
  RepSpec.repname = "AlternativeINInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure ItemStatusAltINLsm()
BEGIN
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  wn = CurWindow;
  if (ReadMarkedRecord(wn,INr)) then begin
    if (nonblank(INr.AlternativeCode)) then begin
      RepSpec.Media = mtScreen;
      RepSpec.f1 = INr.Code;
      RepSpec.repname = "AlternativeINInfoRn";
      RunReport(RepSpec,0);
    end else begin
      MessageBox(1058," Alternative Code");
    end;
  end;
  RETURN;
END;



global
function Boolean DI2SClassOnOpenWindow(Integer wn)
BEGIN
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  
  SetWindowSubset(wn,"BRAND");
 
  DI2SClassOnOpenWindow = true;
  RETURN;
END;

global
function Boolean DI3SClassOnOpenWindow(Integer wn)
BEGIN
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  
  SetWindowSubset(wn,"MODEL");
 
  DI3SClassOnOpenWindow = true;
  RETURN;
END;

global //Edit***************************Sasha2,16:28 04.11.2015 {
function Boolean DI4SClassOnOpenWindow(Integer wn)
BEGIN
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  
  SetWindowSubset(wn,"TYPE");
 
  DI4SClassOnOpenWindow = true;
  RETURN;
END; //Edit***************************Sasha2,16:29 04.11.2015 }

global //Edit***************************Sasha2,15:02 03.11.2015 {
function Boolean DIWithTypesSClassOnOpenWindow(integer wn)
begin
  record RcVc RepSpec;
  record INVc INr;
  record DIVc Dir;
  string 10 curdi;
  Integer i,rwcnt,pos,pos1,mwn,itemscnt;
  record DiCheckBlock DiCb;
  row DiCheckBlock DiCbw;
  Array string 10 types;
  vector string 255 dispscodes,dispsnames;
  vector string 10 checktype;
  boolean foundf;

  switch (GetWindowFileName(wn)) begin
    case "RCVc":
      GetWindowRecord(wn, RepSpec);
    otherwise
      goto LDIWithTypesSClassOnOpenWindow;
  end;

  mwn  = MotherWindow(wn);
  if (mwn>0) then begin
    switch (GetWindowFileName(mwn)) begin
      case "INVc":
        DeselectWindow(mwn,false)
        GetWindowRecord(mwn,INr);
        pos = 0;
        ExtractObj(INr.MainDisp,pos,curdi);
        BlockLoad(DiCb);
        rwcnt = MatRowCnt(DiCb);  
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(DiCb,i,DiCbw);
          if (DiCbw.DiCode==curdi) then begin
            foundf = true;
            i = rwcnt;
          end;
        end;
        RepSpec.f1 = curdi;
        //PutWindowString(wn,"DIWithTypesItem",INr.Name);
        PutWindowString(wn,"DIWithTypesMainCode",curdi);
        Dir.Code = curdi;
        ReadFirstMain(Dir,1,true);
        PutWindowString(wn,"DIWithTypesMainName",Dir.Name);
        if (foundf) then begin
          pos1 = 0;
          ExtractObj(DiCbw.DiType,pos1,curdi);
          while (NonBlank(curdi)) begin
            if (dispscodes[curdi] != ".") then begin
              checktype[curdi] = "OK";
              dispscodes[curdi] = ".";
              types[itemscnt] = curdi;
              itemscnt = itemscnt + 1;
            end;
            ExtractObj(DiCbw.DiType,pos1,curdi);
          end;
        end;
    end;
  end;
  if (itemscnt>0) then begin
    ExtractObj(INr.DispGroups,pos,curdi);
    while (NonBlank(curdi)) begin
      Dir.Code = curdi;
      if (ReadFirstMain(Dir,1,true) and checktype[Dir.CType]=="OK") then begin
        if (dispscodes[Dir.CType]==".") then begin
          dispscodes[Dir.CType] = Dir.Code;
          dispsnames[Dir.CType] = Dir.Name;
        end else begin
          dispscodes[Dir.CType] = dispscodes[Dir.CType] & "," & Dir.Code;
          dispsnames[Dir.CType] = dispsnames[Dir.CType] & "," & Dir.Name;
        end;
      end;
      ExtractObj(INr.DispGroups,pos,curdi);
    end;
    
    for (i=0;i<itemscnt;i=i+1) begin
      if (dispscodes[types[i]]==".") then begin
        dispscodes[types[i]] = "";
      end;
      PutWindowString(wn,types[i] & i,dispscodes[types[i]]);
      PutWindowString(wn,"DIWithTypesName" & i,dispsnames[types[i]]);
    end;

  end;
  RepSpec.flags[0] = itemscnt;
  PutWindowRecord(wn, RepSpec);
  
LDIWithTypesSClassOnOpenWindow:; 

  DIWithTypesSClassOnOpenWindow = true;
  return;
end; //Edit***************************Sasha2,15:02 03.11.2015 }

global //Edit***************************Sasha2,15:31 03.11.2015 {
updating procedure ProceedDIWithTypesSClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record DiVc Dir;
  record DiCheckBlock DiCb;
  row DiCheckBlock DiCbw;
  record INVc INr;
  Integer groupscnt,i,rwcnt,pos,pos1;
  Boolean foundf;
  string 10 settype,curdisp;
  string 255 dilist;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    BlockLoad(DiCb);
    rwcnt = MatRowCnt(DiCb);  
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(DiCb,i,DiCbw);
      if (DiCbw.DiCode==RepSpec.f1) then begin
        foundf = true;
        i = rwcnt;
      end;
    end;
    
    if (foundf==false) then begin
      MessageBox(0,"Necessary SETTING is empty");
      CloseWindow(wn);
      goto LProceedDIWithTypesSClass;
    end;
    
    groupscnt = RepSpec.flags[0];
    pos = 0;
    for (i=0;i<groupscnt;i=i+1) begin
      ExtractObj(DiCbw.DiType,pos,settype);
      dilist = GetWindowString(wn,settype & i);
      if (blank(dilist) and SkipCheckDIType(settype)==false) then begin
        MessageBox(0,"Empty type in row #" & i+2);
        goto LProceedDIWithTypesSClass;
      end;
      pos1 = 0;
      ExtractObj(dilist,pos1,curdisp);
      while (NonBlank(curdisp)) begin
        Dir.Code = curdisp;
        ReadFirstMain(Dir,1,true);
        if (Dir.CType!=settype) then begin
          MessageBox(0,"Wrong type in row #" & i+2);
          goto LProceedDIWithTypesSClass;
        end else begin
          RepSpec.f1 = RepSpec.f1 & "," & Dir.Code;
        end;
        ExtractObj(dilist,pos1,curdisp);
      end;
    end;
    
    switch (GetWindowFileName(mwn)) begin
      case "INVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,INr);
        INr.DispGroups = RepSpec.f1;
        PutWindowRecord(mwn,INr);
    end;
  end;
  
  CloseWindow(wn);
  
LProceedDIWithTypesSClass:;  

  return;
end; //Edit***************************Sasha2,15:31 03.11.2015 }

global //Edit***************************Sasha2,14:52 03.11.2015 {
procedure CancelDIWithTypesSClass()
begin
  Integer mwn;
  record RcVc RepSpec;
  
  CloseWindow(CurWindow);
  return;
end; //Edit***************************Sasha2,14:52 03.11.2015 }

global //Edit***************************Sasha2,16:31 03.11.2015 {
function Boolean DIWithTypesSClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res,notfoundf;
  record RcVc RepSpec;
  record DIVc Dir;
  Integer lenf,index,i,pos;
  string 10 fname,indexnum,curcode;
  string 255 dilist;
  string 1 c;

  res = true;
  if (changed) then begin
    lenf = len(fieldname);
    index = 0; 
    
    for (i=lenf;i>0;i=i-1) begin
      c = Mid(fieldname,i-1,1);
      if ((asc(c)<asc("0")) or (asc(c)>asc("9"))) then begin
        i = 0;
      end else begin
        index = index + 1;
      end;
    end;
    
    fname = Mid(fieldname,0,lenf-index);
    indexnum = StringToInt(Right(fieldname,index));
    
    switch (fieldname) begin
      case "":;
      otherwise
        GetWindowRecord(wn,RepSpec);
        DeselectWindow(wn,false);
        dilist = GetWindowString(wn,fname & indexnum);
        pos = 0;
        i = 0;
        notfoundf = true;
        ExtractObj(dilist,pos,curcode);
        if (NonBlank(curcode)) then begin
          notfoundf = false;
        end;
        while (NonBlank(curcode)) begin
          Dir.Code = curcode;
          if (ReadFirstMain(Dir,1,true)) then begin
            if (i==0) then begin
              PutWindowString(wn,"DIWithTypesName" & indexnum,Dir.Name);
            end else begin
              PutWindowString(wn,"DIWithTypesName" & indexnum,GetWindowString(wn,"DIWithTypesName" & indexnum) & "," & Dir.Name);
            end;
          end else begin
            if (i==0) then begin
              PutWindowString(wn,"DIWithTypesName" & indexnum,"");
            end else begin
              PutWindowString(wn,"DIWithTypesName" & indexnum,GetWindowString(wn,"DIWithTypesName" & indexnum) & "," & "");
            end;
          end;
          ExtractObj(dilist,pos,curcode);
          i = i + 1;
        end;
        if (notfoundf) then begin
          PutWindowString(wn,"DIWithTypesName" & indexnum,"");
        end;
        PutWindowRecord(wn,RepSpec);  
    end;
  end;
  
  DIWithTypesSClassAfterEditField = res;
  return;
end; //Edit***************************Sasha2,16:31 03.11.2015 }

global //Edit***************************Sasha2,10:51 04.11.2015 {
function Boolean TypeDISClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  string 10 fname,indexnum;
  string 20 fieldname;
  Integer lenf,index,i;
  string 1 c;
  
  mwn = MotherWindow(wn);
  fieldname = WindowActiveField(mwn);
  if (mwn>0) then begin
    switch (GetWindowFileName(mwn)) begin
      case "RCVc":
        lenf = len(fieldname);
        index = 0; 
        
        for (i=lenf;i>0;i=i-1) begin
          c = Mid(fieldname,i-1,1);
          if ((asc(c)<asc("0")) or (asc(c)>asc("9"))) then begin
            i = 0;
          end else begin
            index = index + 1;
          end;
        end;
        fname = Mid(fieldname,0,lenf-index);
      case "NewINVc":
        if (CompanyIsJWLikeCompany(currentcompany)) then begin
          fname = ReturnFieldDIType(fieldname,false);
        end else begin
          fname = ReturnFieldDITypeNotJW(fieldname);
        end;
    end;
  end;
  
  if (NonBlank(fname)) then begin
    SetWindowSubset(wn,fname);
  end;

  TypeDISClassOnOpenWindow = false;
  return;
end; //Edit***************************Sasha2,10:51 04.11.2015 }

