/* EngWindowFunctions.hal */

external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModSL();

external function Boolean HasApprovals();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedPricing();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasDeliveryAddress();
external function Boolean HasEInvoicing();
external function Boolean HasExtraNLComment();
external function Boolean HasHotelInterface();
external function Boolean HasJewelleryInterface();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasLoyaltyCards();
external function Boolean HasObjects();
external function Boolean HasNumberSeries();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasProjects();
external function Boolean HasPriceLists();
external function Boolean HasSerialNumbers();
external function Boolean HasSkypeConnection();
external function Boolean HasTestFeatures();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTouchScreenLook();
external function Boolean HasVarieties();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCRM();
external function Boolean HasModExp();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();

external procedure ExtractObj(string,var Integer,var string);
external procedure AddTouchScreenPasteButton(integer,integer,Integer,Integer,string,integer,string,integer);
external procedure MakeUserDefinedTile(longint);
external function real GenericFunctionButton(real,real,real,real,string,string,LongInt,string);
external function string 255 SetVATZoneLabel();
external function string 20 GetMenuCode(string);
external function Integer NumberofBarTabTiles();

external function Boolean IsEnterprise();

external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();

external function Boolean HasMultiLocations();

external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPOS();
external function Boolean HasModSO();
external function Boolean HasModRest();

event DefineWindows
begin
  Real h,h1,h2,h3,h4,h5,h6,h7,hm,v,v2,v3,l,vs,vm,f,t,x;
  string 255 label;

  SetLangMode(LangEnglish,"ENG",0);
  return;
end;

global
procedure OKCancel_ENG()
begin
  real h,v;
    
  h=-200; v=-30;
  PushButton(h,v,h+60,v+20,ToolOK,"OK");
  h=-120;
  PushButton(h,v,h+60,v+20,ToolRestore,"Cancel");
  
  return;
end;

procedure TSERW2(Boolean gtcol)
begin
  real h,h1,h2,h3,h4,h5,v;
    
  h = 8; v = 60;
  h1=24; h2=h1+80; h3=h2+80; h4=h3+80; h5=h4+80;
  if (GuiType==kGuiCocoa) then begin
    SetWRect(20,80,600,351);
    Sizeable(-1,-1,0,0);
    MatrixBegin(h,v,-31,-20,IVSerRowType,99);
    MatCol(1,h1,"From No.",0,TSerStart,false,0);
    MatCol(1,h2,"To No.",0,TSerEnd,false,0);
    MatCol(1,h3,"From Date",0,StartDate,false,0);
    MatCol(1,h4,"To Date",0,EndDate,false,0);
    MatCol(1,h5,"Comment",0,TSerCom,false,0);
    if (gtcol) then begin
      MatCol(1,-100,"#N/L#",0,DonotGenTrans,false,SetSClass);
    end;
  end else begin
    SetWRect(20,80,532,357);
    Sizeable(-1,-1,0,0);
    StaticText(h+h1+5,v-23,"No.",false);
    StaticText(h+h3+5,v-23,"Date",false);
    MatrixBegin(h,v,-31,-20,IVSerRowType,99);
    MatCol(1,h1,"From",0,TSerStart,false,0);
    MatCol(1,h2,"To",0,TSerEnd,false,0);
    MatCol(1,h3,"From",0,StartDate,false,0);
    MatCol(1,h4,"To",0,EndDate,false,0);
    MatCol(1,h5,"Comment",0,TSerCom,false,0);
    if (gtcol) then begin
      MatCol(1,-70,"#N/L#",0,DonotGenTrans,false,SetSClass);
    end;
  end;
  /*The name DonotGenTrans is beacause of default value whcich is zero*/
  EndMatrix;
  //SpecialMenu("Magic Serial Help",' ',1,"MagicSerialHelp");
  return;
end;

global
procedure TSERW_ENG() begin
  TSERW2(HasModNL);
  return;
end;

global
procedure TSERWNT_ENG() begin
  TSERW2(false);
  return;
end;

global
procedure TSERWTouch_ENG() begin
  real h,h1,h2,h3,h4,h5,v,t;

  h = 8; v = 60;
  h1=24; h2=h1+60; h3=h2+60; h4=h3+85; h5=h4+85;
  SetWRect(20,80,562,351);
  Sizeable(-1,-1,0,0);
  MatrixBegin(h,v,-31,-20,IVSerRowType,99);
  MatCell(t=1,10,6,70,19,TSerStart,false,12,patM4blue);
  MatCell(t,140,6,180,19,TSerEnd,true,12,patM4black);
  MatCell(t,190,6,250,19,StartDate,true,12,patM4black);
  MatCell(t,10,26,180,39,EndDate,false,12,patM4gray);
  MatCell(t,190,26,250,39,TSerCom,false,12,patM4gray);
  EndMatrix;
  return;
end;

global
procedure TSERWTEST_ENG()
begin
  real h,h1,h2,h3,h4,h5,v;
    
  h = 8; v = 60;
  h1=24; h2=h1+60; h3=h2+60; h4=h3+85; h5=h4+85;
  if (GuiType==kGuiCocoa) then begin
    SetWRect(20,80,562,351);
    Sizeable(-1,-1,0,0);
    MatrixBegin(h,v,-31,-20,IVSerRowType,99);
    MatCol(1,h1,"From No.",0,TSerStart,false,0);
    MatCol(1,h2,"To No.",0,TSerEnd,false,0);
    MatCol(1,h3,"From Date",0,StartDate,false,0);
    MatCol(1,h4,"To Date",0,EndDate,false,0);
    MatCol(1,h5,"Comment",0,TSerCom,false,0);
    MatCol(1,-100,"#N/L#",0,DonotGenTrans,false,SetSClass);
  end else begin
    SetWRect(20,80,532,350);
    Sizeable(-1,-1,0,0);
    StaticText(h+h1+2,v-25,"No.",false);
    StaticText(h+h3,v-25,"Date",false);
    MatrixBegin(h,v,-31,-20,IVSerRowType,99);
    MatCol(1,h1,"From",0,TSerStart,false,0);
    MatCol(1,h2,"To",0,TSerEnd,false,0);
    MatCol(1,h3,"From",0,StartDate,false,0);
    MatCol(1,h4,"To",0,EndDate,false,0);
    MatCol(1,h5,"Comment",0,TSerCom,false,0);
    MatCol(1,-70,"#N/L#",0,DonotGenTrans,false,SetSClass);
  end;
  EndMatrix;
  DeleteRowTest;
  //SpecialMenu("Magic Serial Help",' ',1,"MagicSerialHelp");
  return;
end;

global
procedure FORMDEF_ENG()
begin
  real h,h1,h2,h3,h4,v;

  SetWRect(20,80,600,298);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,FormDefRowType,99);
  MatCol(1,24,"Seq.",0,intdocnr,false,0);
  MatCol(1,54,"Lang.",0,LangCode,false,LangSClass);
  MatCol(1,94,"Acss. Gr.",0,UserGroup,false,AccessSClass);
  MatCol(1,154,"No. Series",0,SerNr,false,0);
  MatCol(1,224,"Form",0,FPCode,false,DocSClass);
  /* No code behind this */
  //  MatCol(1,324,"E-Form",0,EformCode,false,0);
  MatCol(1,424,"Printer",0,PrintGroupCode,false,PrintGroupSClass);
  MatCol(1,-60,"Status",0,Typ,false,SetSClass);
  EndMatrix;
  return;
end;

global
procedure FORMDEF2_ENG()
begin
  real h,h1,h2,h3,h4,h5,h6,h7,v,l,vs,vm,f,t;

  SetWRect(20,80,529,299);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,FormDefRowType,99);
  MatCol(1,24,"Seq.",0,intdocnr,false,0);
  MatCol(1,54,"Lang.",0,LangCode,false,LangSClass);
  MatCol(1,94,"Form",0,FPCode,false,DocSClass);
  EndMatrix;
  return;
end;

global
procedure FORMDEF3_ENG() begin
  real h,h1,h2,h3,h4,h5,h6,h7,v,l,vs,vm,f,t;

  SetWRect(20,80,529,299);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,FormDefRowType,99);
  MatCol(1,24,"Seq.",0,intdocnr,false,0);
  MatCol(1,54,"Form",0,FPCode,false,DocSClass);
  EndMatrix;
  return;
end;


global
procedure INVFORM_ENG(Boolean einvf)
begin
  real h,h1,h2,h3,h4,v;
  Boolean testf;

  if (IsEnterprise) then begin
    SetWRect(20,80,440,300);
    PeriodField(h=100,v=6,"Period");
    EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,30,f1,false,0);
    EditFieldTL(h,v+=20, 150,"Offical No.",   M4Str,Normal,60,f3,false,0);
    EditFieldTL(100,v+=20,150,"Customer",M4UStr,Normal,41,f2,false,CUSClass);
    EditFieldTL(100,v+=20,50,"Language",   M4Str,Normal,5,Language,false,LangSClass);
    ButtonFrame(h=30,v=127,175,3,"Status");
    RadioButton(h,v,0,0,"Unprinted Only",OnlyUnprntd);
    RadioButton(h,v+=16,1,0,"All",OnlyUnprntd);
    RadioButton(h,v+=16,2,0,"Original",OnlyUnprntd);
    ButtonFrame(h,v=210,175,5,"Row Layout");
    RadioButton(h,v,0,0,"None",flags[15]);
    RadioButton(h,v+=16,1,0,"By Item Group",flags[15]);
    RadioButton(h,v+=16,2,0,"By Item Group - Single Row",flags[15]);
    RadioButton(h,v+=16,3,0,"By Room Package",flags[15]);  
    RadioButton(h,v+=16,4,0,"Single Row",flags[15]);
    CheckBox(h1=225,v=120,0,"Only Open Invoices",flags[10]);
    CheckBox(h1,v+=16,0,"Skip Invalidated Invoices",flags[11]);
    if (einvf) then begin
      CheckBox(h1,v+=16,0,"Include _EDI Invoices",flags[28]);
      CheckBox(h1,v+=16,0,"Include E-Invoices",flags[5]);
    end;
    ButtonFrame(h1,v=210,165,4,"Invoice Type");  
    CheckBox(h1,v,0,"Invoice",flags[1]);
    CheckBox(h1,v+=16,0,"Cash Note",flags[2]);
    CheckBox(h1,v+=16,0,"C_redit Note",flags[3]);
    CheckBox(h1,v+=16,0,"I_nterest Invoice",flags[4]);
  end else begin
    SetWRect(64,80,444,250);
    PeriodField(h=120,v=6,"Period");
    testf = true;
    if (Left(BuildProductCode,8)=="Standard") then begin
      if (HasLocalization("POL")) then begin
        EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,60,f3,false,0);
        testf = false;
      end;
    end;
    if (testf) then begin
      EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,30,f1,false,0);
    end;
    ButtonFrame(h,v+=40,150,3,"Status");
    RadioButton(h,v,0,0,"Unprinted Only",OnlyUnprntd);
    RadioButton(h,v+=16,1,0,"All",OnlyUnprntd);
    RadioButton(h,v+=16,2,0,"Original Print",OnlyUnprntd);
    ButtonFrame(h,v+=45,153,3,"Invoice Type");  
    CheckBox(h,v,0,"Invoice",flags[1]);
    CheckBox(h,v+=16,0,"Cash Note",flags[2]);
    CheckBox(h,v+=16,0,"#Credit Note#",flags[3]);
    if (HasLocalization("PRT")) then begin
      CheckBox(h,v+=16,0,"I_nterest Invoice",flags[4]);
    end;
    EndFrame;
  end;
  return;
end;

global
function Boolean DisplayLoginKeyPad_ENG()
begin
  Boolean res;
  record LocalLoginOptBlock LocalOptionsRec;

  BlockLoad(LocalOptionsRec);
  if (LocalOptionsRec.DisplayLoginKeyPad!=0) then begin res = true; end;
  DisplayLoginKeyPad_ENG = res;
  return;
end;

global
procedure LoginButtons_ENG(Real vm)
begin
  Real h,v,v2,vs,h2,hs,hm;
  
  if (DisplayLoginKeyPad_ENG==false) then begin goto LLoginButtons; end;
  
  hm = 132; h2 = 40; hs = 41; vs = 34; v2 = 33;
  v = vm+10;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad1","1_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad2","2_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad3","3_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad4","4_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad5","5_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad6","6_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad7","7_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad8","8_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad9","9_",2);
  v = v+vs;
  h = hm+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad0","0_",2);
  
LLoginButtons:;
  return;
end;

global
procedure LoginButtons2_ENG(Real starth,Real vm)
begin
  Real h,v,v2,vs,h2,hs,hm;
  
  if (DisplayLoginKeyPad_ENG==false) then begin goto LLoginButtons2; end;
  
  hm = starth; h2 = 40; hs = 41; vs = 34; v2 = 33;
  v = vm+10;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad1","1_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad2","2_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad3","3_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad4","4_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad5","5_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad6","6_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad7","7_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad8","8_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad9","9_",2);
  v = v+vs;
  h = hm+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad0","0_",2);
  
LLoginButtons2:;
  return;
end;

global
procedure DrawPOSButtons_ENG(longint ah,longint av,longint width,longint height,longint dh,longint dv,record POSButtonsVc POSBr,string ovrclass,Integer stackspace)
begin
  row POSButtonsVc POSBrw;
  record POSButtonsVc POSB2r;
  Integer i,rwcnt;
  Real h,v;
  //hs,h1,h2,h3,h4,h5,h6,h7,hm,v2,l,vs,vm,f,t,x;
  string 255 procstr;
  Integer wn;
  boolean ItemPage;
  string 60 ostr;
  Integer pos;
  string 255 stack;
  string 255 lblstr;
  string 255 tagstr;
  integer selitemline;

  h = ah;
  v = av;

  ItemPage = false;  
  if (ItemPage) then begin
    SoftEditField(h=80,v+=49, 80,"Item",Normal ,"touchscreenitem",false,INSClass,M4Str,255);
    //  SoftEditField(h+=140,v, 80,"Serial No.",Normal ,"touchscreenitemserialnr",false,SerialNrSClass,M4Str,255);
    //no stock updating    SoftEditField(h+=120,v, 40,"Qty",Normal ,"touchscreenitemqty",false,0,M4Str,255);
    SoftEditField(h+=120,v, 60,"Price",Normal ,"touchscreenitemprice",false,0,M4Str,255);
    SoftEditField(h=80,v+=20,-500,"",ViewOnly ,"touchscreenitemname",false,0,M4Str,255);
  end;
  
  //outside of screen
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpage",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpagestack",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowprinterstack",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpageprevious",false,0,M4Str,255);
  //SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenselecteditemtag",false,0,M4Str,255);
  
  wn = CurWindow;
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  
  if (stack=="") then begin
    //PutWindowString(wn,"touchscreenwindowpage",1)
    //PutWindowString(wn,"touchscreenwindowpagestack",1)
    stack = "1";
  end;
  
  pos = 0;
  ExtractObj(stack,pos,ostr);
  h = ah;
  v = v + stackspace;
  while (nonblank(ostr)) begin
    if (ovrclass<>"") then begin
      procstr = "IVCashDClass";
    end else begin
      procstr = POSBr.WindowClass;
    end;
    
    procstr = procstr & "TouchScreenStackButton";
    
    POSB2r.WindowClass = POSBr.WindowClass;
    POSB2r.POSButtonGroupCode = POSBr.POSButtonGroupCode;
    POSB2r.Page = StringToInt(ostr);
    
    if (ReadFirstMain(POSB2r,3,true)) then begin
      lblstr = POSB2r.Comment;
    end else begin
      lblstr = "Page: " & ostr;
    end;
    
    if (POSB2r.KeyCode!=kFunctionKeyNone) then begin
      lblstr = lblstr & "<BR>";
      switch (POSB2r.Modifiers) begin
        case kKeyModifierNone:
        case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
        case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
        case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
      end;
      lblstr = lblstr & "F" & POSB2r.KeyCode;
    end;

    ColourPushButtonTag(h,v,h + width,v + height,procstr,lblstr,2,ostr); // time color no. 2

    h = h + width + dh;
    ExtractObj(stack,pos,ostr);
  end;

  //v = v - 80;
  v = v + height + dv;
  h = ah;

  //ButtonFrame(h,v+=82,400,0,"");
  ButtonFrame(h,v+=5,800,0,"");// Edit ************************** Tuesday, 25 December 2012 10:23:15

  v = v + 10;

  rwcnt = MatRowCnt(POSBr);

  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(POSBr,i,POSBrw);
    procstr = POSBr.WindowClass;

    if (procstr=="NPTSIVCashDClass") then begin
      procstr = "IVCashDClass";
    end;

    lblstr = POSBrw.Label;

    if (POSBrw.KeyCode<>kFunctionKeyNone) then begin
      lblstr = lblstr & "<BR>";
      switch (POSbrw.Modifiers) begin
        case kKeyModifierNone:
        case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
        case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
        case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
      end;
      lblstr = lblstr & "F" & POSBrw.KeyCode;
    end;

    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeItem:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeInstructions:
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeModifier:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeLevelTop:
        procstr = procstr & "PageTop";
        /*
        case kPOSButtonTypeLevelUp:
        procstr = procstr & "LevelUp";
        */
      case kPOSButtonTypeGotoPage:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      /*
      case kPOSButtonTypeLevelDown:
        procstr = procstr & "LevelDown";
      */
      case kPOSButtonTypeCashPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypePayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeChequePayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeCreditCardPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeCreditCardPaymentReversal:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeDebitCardPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeGiftVoucherPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeOnHotelGuestAccount:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeFinish:  
        procstr = procstr & "TouchScreenFinishButton";
        case kPOSButtonTypeVoidRow:  
        procstr = procstr & "TouchScreenVoidRow";
      case kPOSButtonTypeAmendLine:  
        procstr = procstr & "TouchScreenAmendLine";
      case kPOSButtonTypeAddOrderDiscount:  
        procstr = procstr & "TouchScreenAddOrderDiscount";
      case kPOSButtonTypeKitchenOrder:  
        procstr = procstr & "TouchScreenKitchenOrder";
      case kPOSButtonTypeLoyaltyCard:  
        procstr = procstr & "TouchScreenLoyaltyCard";
      case kPOSButtonTypeSeniorCitizenDiscount:  
        procstr = procstr & "TouchScreenSeniorCitizenCard";
      case kPOSButtonTypeSplitItem:  
        procstr = procstr & "TouchScreenSplitItem";
      case kPOSButtonTypeTransfertoSL:  
        procstr = procstr & "TouchScreenTransfertoSL";
      case kPOSButtonTypeTransfertoInvoice:  
        procstr = procstr & "TouchScreenTransfertoInvoice";
      case kPOSButtonTypeTransfertoOrder:  
        procstr = procstr & "TouchScreenTransfertoOrder";
      case kPOSButtonTypeInvalidateInvoice:  
        procstr = procstr & "TouchScreenInvalidateInvoice";
      case kPOSButtonTypeAddHeaderLine:  
        procstr = procstr & "TouchScreenHeaderLine";
      case kPOSButtonTypeAddHiddenLine:  
        procstr = procstr & "TouchScreenHiddenLine";
      case kPOSButtonTypeAddSubtotalLine:  
        procstr = procstr & "TouchScreenSubtotalLine";
      case kPOSButtonTypeInvoiceStatus:  
        procstr = procstr & "TouchScreenInvoiceStatus";
      case kPOSButtonTypeOpenNLTransaction:  
        procstr = procstr & "TouchScreenOpenNLTransaction";
      case kPOSButtonTypeSendToFiscalDevice:  
        procstr = procstr & "TouchScreenSendToFiscalDevice";
      case kPOSButtonTypePrintProformaInvoice:  
        procstr = procstr & "TouchScreenProformaInvoice";
      case kPOSButtonTypeConnectToPrepayment:  
        procstr = procstr & "TouchScreenConnectToPrepayment";
      case kPOSButtonTypeCreateCashOut:  
        procstr = procstr & "TouchScreenCreateCashout";
      case kPOSButtonTypeCreateCashin:  
        procstr = procstr & "TouchScreenCreateCashin";
      case kPOSButtonTypeCreateCreditNote:  
        procstr = procstr & "TouchScreenCreateCreditNote";
      case kPOSButtonTypeCreateCreditEMail:  
        procstr = procstr & "TouchScreenCreateCreditEMail";
      case kPOSButtonTypeCreateActivity:  
        procstr = procstr & "TouchScreenCreateActivity";
      case kPOSButtonTypeOpenCalendar:  
        procstr = procstr & "TouchScreenOpenCalendar";
      case kPOSButtonTypeChangeTerms:  
        procstr = procstr & "TouchScreenChangeTerms";
      case kPOSButtonTypeChangeAddress:  
        procstr = procstr & "TouchScreenChangeAddress";
      case kPOSButtonTypeCashupReport:  
        procstr = procstr & "TouchScreenCashupReport";
      case kPOSButtonTypeOpenSession:  
        procstr = procstr & "TouchScreenOpenSession";
      case kPOSButtonTypeCloseSession:  
        procstr = procstr & "TouchScreenCloseSession";
      case kPOSButtonTypePutCashFloat:  
        procstr = procstr & "TouchScreenPutCashFloat";
      case kPOSButtonTypeGetCashFloat:  
        procstr = procstr & "TouchScreenGetCashFloat";
      case kPOSButtonTypeManagerDiscountOverride:  
        procstr = procstr & "TouchScreenManagerDiscountOverride";
      case kPOSButtonTypeOpenTaxMatrix:  
        procstr = procstr & "TouchScreenOpenTaxMatrix";
      case kPOSButtonTypeReturn:  
        procstr = procstr & "TouchScreenReturn";
      case kPOSButtonTypeReturnReason:  
        procstr = procstr & "TouchScreenReturnReason";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeReturnInvoiceNo:  
        procstr = procstr & "TouchScreenReturnInvNo";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeLookupSerialNr:  
        procstr = procstr & "TouchScreenLookupSerialNr";
      case kPOSButtonTypeMainSerialNr:  
        procstr = procstr & "TouchScreenMainSerialNr";
      case kPOSButtonTypeAppleWarrantyStatusCheck:  
        procstr = procstr & "TouchScreenAppleWarrantyStatusCheck";
      case kPOSButtonTypeAppleCreateAEOrder:  
        procstr = procstr & "TouchScreenAppleCreateAEOrder";
      case kPOSButtonTypeAppleCancelAEOrder:  
        procstr = procstr & "TouchScreenAppleCancelAEOrder";
      case kPOSButtonTypeLogin:  
        procstr = procstr & "TouchScreenButtonLogin";
      case kPOSButtonTypeDeleteItem:
        procstr = procstr & "TouchScreenDeleteItem";
      case kPOSButtonTypeLoyaltyPointsPayment:
        procstr = procstr & "TouchScreenLoyaltyPointsPayment";
      case kPOSButtonTypeLoyaltyPointsBonus:
        procstr = procstr & "TouchScreenLoyaltyPointsBonus";
      case kPOSButtonTypeGiftVoucherSales:
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeGiftReceipt:
        procstr = procstr & "TouchScreenGiftReceipt";
        case kPOSButtonTypePriceLookup:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypePOSCommand:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeCustomerSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSelectSalesman:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeBaggerSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSupervisorSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeVolumetricBarCodeScan:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSalesAssistant:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeItemSearch:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeItemStatus:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeOpenCashDrawer:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypOpenInvoices:  
        procstr = procstr & "TouchScreenOpenInvoices";
      case kPOSButtonTypSaveInvoice:  
        procstr = procstr & "TouchScreenSaveInvoice";
      case kPOSButtonTypeBookings:  
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypePrintInvoice:  
        procstr = procstr & "TouchScreenPrint";
      case kPOSButtonTypePrintOrder:  
        procstr = "RestAccPrint";
      case kPOSButtonTypePrintFireOrder:  
        procstr = "RestAccPrintFireOrder";
      case kPOSButtonTypePrintCancellation:  
        procstr = "RestAccPrintCancel";
      case kPOSButtonTypePrintOrderToKitchen:  
        procstr = "RestAccPrintToKitchen";
//      case kPOSButtonTypeOpenCashDrawer:  //already above
//        procstr = "OpenCashDrawer";
      case kPOSButtonTypeCalculateTip:  
        procstr = "RestAccTip";
      case kPOSButtonTypeServiceCharge:  
        procstr = "RestAccServiceCharge";
      case kPOSButtonTypeHotelGuests:  
        procstr = "StayingTool";
      case kPOSButtonTypeSetTable:  
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSetCovers:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSetBarTabClass:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeMergeBarTabs:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSplitBarTabs:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSpecialMenu:  
        procstr = procstr & "TouchScreenSpecialMenu";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeReprintReceipt:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeXReading:
        procstr = procstr & "TouchScreenXReading";
      case kPOSButtonTypeYReading:
        procstr = procstr & "TouchScreenYReading";
      case kPOSButtonTypeAllInvoices:
        procstr = procstr & "TouchScreenAllInvoices";
      case kPOSButtonTypeSyncNow:
        procstr = procstr & "TouchScreenSyncNow";
      case kPOSButtonTypeRunReportOnServer:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case 100:
          AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);// Edit ************************** Wednesday, 5 December 2012 11:43:59
          procstr = "";
      case 101:
          AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);// Edit ************************** Wednesday, 5 December 2012 11:43:59
          procstr = "";
      case 102:
          procstr = procstr & "TouchScreenDeleteAll";// Edit ************************** Thursday, 16 May 2013 11:54:41
          tagstr = i + 1; //Edit***************************Sasha2,18:01 11.02.2015
  	  case 103:
          AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr);// Edit ************************** Wednesday, 5 December 2012 11:43:59
  		//CUNPTSSClassNewCustomer;
  		procstr = "";
  	  case 104:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr); //Edit***************************Sasha2,10:35 11.12.2014
        procstr = "";
      case 105:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr); //Edit***************************Sasha2,10:35 11.12.2014
        procstr = "";
      case 106:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr); //Edit***************************Sasha2,10:35 11.12.2014
        procstr = "";
      case 107:
        AddTouchScreenPasteButton(h,v,width,height,procstr,i+1,lblstr,POSBrw.colnr); //Edit***************************Sasha2,10:35 11.12.2014
        procstr = "";
    end;
    
    if (procstr<>"") then begin
      if (tagstr<>"") then begin
        ColourPushButtonTag(h,v,h + width,v + height,procstr,lblstr,POSBrw.colnr,tagstr);
      end else begin
        ColourPushButton(h,v,h + width,v + height,procstr,lblstr,POSBrw.colnr);
      end;
    end;
    
    h = h + width + dh;
   // if (Mod(i+1,4)==0) then begin
    if (Mod(i+1,8)==0) then begin// Edit ************************** Tuesday, 25 December 2012 10:26:37
      v = v + height + dv;
      h = ah;
    end;
  end;
  
  return;
end;

global
procedure DrawPOSInterface_ENG(string bc1,string bc2,record POSButtonsVc POSBr,Integer acnt,string ovrclass,Integer stackspace)
begin
  record LocalMachineBlock LMb;
  longint h,v,i,h4;
  
  BlockLoad(LMb);
  
  h = 20; v = 26;
  
  //h2 = -150; h3 = -70;
  
  h4 = -24;
  if (LMb.WideScrollBars!=0) then begin
    h4 = -44;
  end;
  
  // DrawPOSStringList();
  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
     // DataList(420,105+60+15,h4,-10,"receipt");
      DataList(820,105+60+15,h4,-10,"receipt");// Edit ************************** Tuesday, 25 December 2012 10:17:20
      h = 8;
    case kPOSButtonsPositionRight:
      DataList(8,105+60+15,-430,-10,"receipt");
      h = -410;
  end;
  
  DataListColumn(1,6,90,AdjLeft,"artcode","Code",M4Code);
  DataListColumn(1,96,-340,AdjLeft,"spec","Description",M4Str);
  DataListColumn(1,-550,-370,AdjRight,"SerialNr","Serial No",M4Str);// Edit ************************** Wednesday, 5 November 2014 13:26:37
  DataListColumn(1,-275,-210,AdjRight,"qty","Qty(avl.)",M4Val);// Edit ************************** Wednesday, 5 November 2014 13:26:40
  DataListColumn(1,-205,-150,AdjRight,"price","Price",M4Val);// Edit ************************** Wednesday, 5 November 2014 13:27:08
  DataListColumn(1,-145,-90,AdjRight,"rebate","Discount",M4Val);
  DataListColumn(1,-85,-26,AdjRight,"rowsum","Sum",M4Val);
  DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.
  
  DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
  
  DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
  DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
  DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
  DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
  DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
  
  // DrawPOSData();
  
  if (acnt>0) then begin
    DrawPOSButtons_ENG(h,v,98,55,2,5,POSBr,ovrclass,stackspace);
  end else begin
    RecordClear(POSBr);
    DrawPOSButtons_ENG(h,v,98,55,2,5,POSBr,ovrclass,stackspace);
  end;
  
  //selitemline = StringToInt(GetWindowString(wn,"touchscreenselecteditemtag"));
  //SetSelectedListLine(wn,selitemline);
  
  return;
end;

global
procedure DisplayRecordDetails_ENG(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                               string loyaltycardnr,Integer ShowBaggerSupervisor,string bagger,string supervisor,string disccardnr,val discfwdbal,
                               string sessiondesc,Boolean showlc,string OfficialNum)
begin
  real h,h2,h3,v;
  string 255 tstr;

  h = ah;
  h2 = h + 150;
  h3 = h + 240;
  v = av;

  StaticText(h,v,Left(compname,20),false);

  StaticText(h2,v,td,false);
  StaticText(h3,v,Left(tt,5),false);
  StaticText(h,v+=20,nr,false);
  if (HasLocalization("PRT")) then begin 
    tstr = "Official No: " & OfficialNum;
    StaticText(h,v+=20,tstr,false);
  end;
  StaticText(h2,v,"Till: " & lmc,false);
  StaticText(h3,v,sm,false);

  tstr = "Customer: ";
  tstr = tstr & custcode;
  StaticText(h,v+=20,tstr,false);
  StaticText(h2,v,Left(custname,35),false);

  if (showlc) then begin
    tstr = "Loyalty Card: ";
    tstr = tstr & loyaltycardnr;
    StaticText(h,v+=20,tstr,false);
  end else begin
    v = v + 20;
  end;

  if (ShowBaggerSupervisor!=0) then begin
    tstr = "Bagger: ";
    tstr = tstr & bagger;
    StaticText(h2,v,tstr,false);
    v = v + 20;
  end;
  
  if (nonblank(disccardnr)) then begin
    tstr = "Discount Card: ";
    tstr = tstr & disccardnr;
    StaticText(h2,v,tstr,false);
    tstr = "Discount Fwd. Bal.: " & discfwdbal;
    StaticText(h2,v+=20,tstr,false);
  end;
  if (nonblank(sessiondesc)) then begin
    StaticText(h,v+=20,sessiondesc,false);
  end;
  return;
end;

global
procedure TBEClassDef_ENG()
begin
  SetWRect(20,80,400,150);
  EditFieldTL(130,6,-20,"Backup Comment",M4Str,Normal,40 ,f3,false,0);
  return;
end;

global
procedure MakeCustomerTile_ENG(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,70,false,tileno,PRCode);
  EditField(h,vm=v,80,"Project",Normal,PRCode,false,PRSClass);
  EditField(h,v+=vs,80,"Customer",Normal,CUCode,false,AllCUSClass);
  EditField(h,v+=vs,80,"Invoice Item",Normal,ItemCode,false,INSClass);
  EnterSkip(Math);
  EditField(h2,v=vm,-40,"Name",Normal,CUName,false,0);
  EditField(h2,v+=vs,-40,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,-40,"Contact",Normal,Contact,false,ContactSClass);
end;

global
procedure MakeTagsTile_ENG(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,100,true,tileno,Math);
  MatrixBegin(4,v=24,-32,-30,ActRowType,99);
  MatCol(1,24,"Code",0,TextCode,false,TextTypeSClass);
  MatCol(1,84,"Text",0,Text,false,0);
  EndMatrix;
  HalPushButton(-140,-30,-60,-10,"ActDEndActivity","End Activity");
end;

global
procedure MakeSubTaskTile_ENG(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,200,true,tileno,-);

  HalPushButton(h,v,h+100,v+20,"ActDClassCreateSubTask","New Subtask");
  v = v + vs;
  RecordList2(10,v+=vs,-30,-10,"ActVc");
  RlColKey(4,4,"Task",Comment,false,ActComment);
  RlColKey(-50,-50,"All",Comment,false,Comment);
end;

global
procedure MakeCruftTile_ENG(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,240,false,"tileno",-);
  EditField(h,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  CheckBox(-100,-36,0,"P_rivate",PrivateFlag);
  
  return;
end;

global
procedure MakeActWindowTypeCalendar_ENG(record ActVc Actr)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  TileButton(1,"Time");
  TileButton(2,"Customer");
  TileButton(3,"Tags");
  TileButton(4,"Alarm");
  TileButton(5,"Resources");
  TileButton(6,"Service");
  TileButton(7,"User Defined");
  TileButton(8,"Misc");

  Tile(1,70,false,"1",StartTime);
  h = 100; h2 = 270;
  EditField(h,v=6,60,"Start Time",Normal,StartTime,false,PasteCurTime);
  EditField(h,v+=vs,60,"End Time",Normal,EndTime,false,PasteCurTime);
  EditField(h,v+=vs,60,"Cost (Time)",Normal,CostTime,false,PasteCurTime);
  EditField(h2,v=6 ,80,"Start Date",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v+=vs,80,"End Date",Normal,EndDate,false,PasteCurDate);
  EditField(h2,v+=vs,80,"Time Class",Normal,TimeClass,false,TimeClassSClass);
  v = 18;
  vm = v;
  h3=h2+120;

  h3 = h3+160;
  ButtonFrame(h3,v=vm,100,3,"Calendar");
  RadioButton(h3,v,kCalTimeFlagTime,0,"Time",CalTimeFlag);
  RadioButton(h3,v+=16,kCalTimeFlagProfile,0,"Profile",CalTimeFlag);
  RadioButton(h3,v+=16,kCalTimeFlagNoshow,0,"Don't _Show",CalTimeFlag);
  EnterSkip(PRCode);

  MakeCustomerTile_ENG(2);
  MakeTagsTile_ENG(3);

  Tile(4,140,false,"4",-);
  h3 = 40;
  ButtonFrame(h3,v=18,130,4,"Alarm Type");
  RadioButton(h3,v,0,0,"None",AlarmType);
  RadioButton(h3,v+=16,1,0,"Message",AlarmType);
  RadioButton(h3,v+=16,2,0,"SMS",AlarmType);
  RadioButton(h3,v+=16,3,0,"E-mail",AlarmType);
  ButtonFrame(h3+=160,v=18,130,7,"Alarm");
  RadioButton(h3,v,0,0,"Minutes before",AlarmWhen);
  RadioButton(h3,v+=16,1,0,"Hours before",AlarmWhen);
  RadioButton(h3,v+=16,2,0,"Days before",AlarmWhen);
  RadioButton(h3,v+=16,3,0,"Minutes after",AlarmWhen);
  RadioButton(h3,v+=16,4,0,"Hours after",AlarmWhen);
  RadioButton(h3,v+=16,5,0,"Days after",AlarmWhen);
  EditField(h3+75,v+=17,50,"Units",Normal,AlarmUnits,false,0);
  ButtonFrame(h4=h3+160,v=18,130,4,"Symbol");
  RadioButton(h4,v,1,0,"C_all",SymbNr);
  RadioButton(h4,v+=16,2,0,"Meeting",SymbNr);
  RadioButton(h4,v+=16,3,0,"Desk_work",SymbNr);
  RadioButton(h4,v+=16,0,0,"Ot_her",SymbNr);
  Tile(5,30,false,"5",Resources);
  EditField(h,v=6,300,"Resources",Normal,Resources,false,ResSClass);
  EditField(h+400,v, fs,"Asset",Normal,InventoryNr,false,AT2UnitSClass);
  Tile(6,50,false,"6",SVOSerNr);
  EditField(h,v=6, fs,"Serial No.",Normal,SerialNr,false,SVOSerSClass);
  EditField(h+200,v,fs,"Item",Normal,ArtCode,false,INSClass);
  EditField(h+400,v, fs,"Prod. Oper.",Normal,ProdOpSerNr,false,0);
  EditField(h,v+=vs, fs,"Service Order",Normal,SVOSerNr,false,SVOSClass);
  EditField(h+200,v,fs,"Invoice Item",Normal,ItemCode,false,INSClass);
  EditField(h+400,v, fs,"Production",Normal,ProdSerNr,false,0);
end;

global
procedure MakeActWindowTypeToDo_ENG(record ActVc Actr)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  //TileButton(-,"Time");
  //TileButton(1,"Text");
  TileButton(1,"Tags");
  TileButton(2,"Subtasks");
  TileButton(3,"Customer");
  //TileButton(-,"Alarm");
  //TileButton(-,"Resources");
  //TileButton(-,"Service");
  TileButton(4,"User Defined");
  TileButton(5,"Misc");

  //MakeTextTile(1);
  MakeTagsTile_ENG(1);
  MakeSubTaskTile_ENG(2);
  MakeCustomerTile_ENG(3);
  MakeUserDefinedTile(4);
  MakeCruftTile_ENG(5);
end;

global
procedure SetupNightAuditWindowControls_ENG(Boolean DoPrefWindowf)
begin
  real h,h2,v,vs,v2,vm;

  if DoPrefWindowf then begin
    h = 70; h2 = 265; v = 10; vs = 20;
    EditField(h,v,60,"User",Normal,UserCode,false,UserSClass);
    EditField(175,v,265,"Name",Normal,UserName,false,UserSClass);
    EditField(h,v+=vs,280,"Locations",Normal,Locations,false,LocationSClass);
    StaticText(h+290,v+14,"(NOT DONE)",false);
    v = 69;
  end else begin
    h = 30; v = 13;
    EditField(h+30,v,80,"Date",Normal,sStartDate,false,PasteCurDate);  
    v = v+46;
  end;
  //Section 1
  ButtonFrame(h,v,370,2,"Section 1 (Occupancy)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Include",Sec1Enabled);  
    CheckBox(h,v+=16,0,"Show Room Detail",Sec1RoomDetails);
  end else begin
    CheckBox(h,v,0,"Include",flags[0]);
    CheckBox(h,v+=16,0,"Show Room Detail",flags[1]);
  end;
  v = v+45; v2 = v+12;
  if (HasModNL) then begin
  //Section 2
    ButtonFrame(h,v,370,5,"Section 2 (Revenue)");
    if DoPrefWindowf then begin
      CheckBox(h,v,0,"Include",Sec2Enabled);
    end else begin
      CheckBox(h,v,0,"Include",flags[2]);
    end;
    h2 = h+10;
    ButtonFrame(h2,v+=37,100,2,"Period Type");
    if DoPrefWindowf then begin
      RadioButton(h2,v,0,0,"Calender Years",Sec2PeriodType);
      RadioButton(h2,v+=16,1,0,"Fiscal Years",Sec2PeriodType);
    end else begin
      RadioButton(h2,v,0,0,"Calender Years",flags[17]);
      RadioButton(h2,v+=16,1,0,"Fiscal Years",flags[17]);
    end;
    h2 = h+200;
    if DoPrefWindowf then begin
      EditField(h2,v2,160,"Accounts",Normal,Sec2Account,false,AccSClass);
      EditField(h2,v2+=21,160,"Object Type",Normal,Sec2ObjType,false,OTSClass);
      EditField(h2,v2+=21,160,"Objects",Normal,Sec2Obj,false,ObjSClass);  
    end else begin
      EditField(h2,v2,160,"Accounts",Normal,AccStr,false,AccSClass);
      EditField(h2,v2+=21,160,"Object Type",Normal,ObjType,false,OTSClass);
      EditField(h2,v2+=21,160,"Objects",Normal,ObjStr,false,ObjSClass);  
    end;
    v = v+55; v2 = v;
  end;
  //Section 3
  ButtonFrame(h,v,370,2,"Section 3 (Cust/Guest Ledger)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Include",Sec3Enabled);
    CheckBox(h,v+=16,0,"Show Agents",Sec3ShowAgents);
    CheckBox(h+195  ,v2,0,"Show Guests",Sec3ShowGuests);
  end else begin
    CheckBox(h,v,0,"Include",flags[4]);
    CheckBox(h,v+=16,0,"Show Agents",flags[5]);
    CheckBox(h+195  ,v2,0,"Show Guests",flags[6]);
  end;
  v = v+43; v2 = v+8;
  //Section 4
  ButtonFrame(h,v,370,2,"Section 4 (Revenue Details)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Include",Sec4Enabled);
    CheckBox(h,v+=16,0,"Show Detail",Sec4Detailed);
    if (HasMultiLocations) then begin
      EditField(h+200,v2,160,"Locations",Normal,Sec4Locations,false,LocationSClass);
    end;
  end else begin
    CheckBox(h,v,0,"Include",flags[7]);
    CheckBox(h,v+=16,0,"Show Detail",flags[8]);
    if (HasMultiLocations) then begin
      EditField(h+200,v2,160,"Locations",Normal,f1,false,LocationSClass);
    end;
  end;
  v = v+43; v2 = v+8;
  //Section 5
  ButtonFrame(h,v,370,2,"Section 5 (Receipts Analysis)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Include",Sec5Enabled);
    CheckBox(h,v+=16,0,"Show Detail",Sec5Detailed);
    if (HasLocalMachines) then begin
      EditField(h+200,v2,160,"Machines",Normal,Sec5Machines,false,LocalMachineSClass);
    end;
  end else begin
    CheckBox(h,v,0,"Include",flags[9]);
    CheckBox(h,v+=16,0,"Show Detail",flags[10]);
    if (HasLocalMachines) then begin
      EditField(h+200,v2,160,"Machines",Normal,f2,false,LocalMachineSClass);
    end;
  end;
  v = v+43;
  if (IsEnterprise) then begin
  //Section 6
    ButtonFrame(h,v,370,2,"Section 6 (Forex Analysis) - NOT DONE");
    if DoPrefWindowf then begin
      CheckBox(h,v,0,"Include",Sec6Enabled);
      CheckBox(h,v+=16,0,"Show Detail",Sec6Detailed);
    end else begin
      CheckBox(h,v,0,"Include",flags[11]);
      CheckBox(h,v+=16,0,"Show Detail",flags[12]);
    end;
    v = v+43; v2 = v; vm = v;
  end;
  //Section 7
  if (HasLimitedAccess or HasMultiLocations) then begin
  ButtonFrame(h,v,370,3,"Section 7 (System Controls)");
    if DoPrefWindowf then begin
      CheckBox(h,v+=5,0,"Include",Sec7Enabled);
      CheckBox(h+120,v2+=5,0,"UnOKed Sales Trans.",Sec7DoSalesGroup);
      CheckBox(h+120,v2+=20,0,"UnOKed #Stock# Trans.",Sec7DoLocations);
      if (HasLimitedAccess) then begin
        EditField(h+260,vm+=5,100,"",Normal,Sec7SalesGroups,false,SalesGroupSClass);
      end;
      if (HasMultiLocations) then begin
        EditField(h+260,vm+=22,100,"",Normal,Sec7Locations,false,LocationSClass);
      end;
    end else begin
      CheckBox(h,v+=5,0,"Include",flags[13]);
      CheckBox(h+120,v2+=5,0,"UnOKed Sales Trans.",flags[15]);
      CheckBox(h+120,v2+=20,0,"UnOKed #Stock# Trans.",flags[16]);
      if (HasLimitedAccess) then begin
        EditField(h+260,vm+=5,100,"",Normal,f3,false,SalesGroupSClass);
      end;
      if (HasMultiLocations) then begin
        EditField(h+260,vm+=22,100,"",Normal,f4,false,LocationSClass);
      end;
    end;    
  end;    
  return;
end;

global
procedure DefineElearningURLCacheLClass_ENG()
begin
  SetWRect(10,80,600,291);
  Sizeable(-1,-1,0,0);
  RecordList(4,17,-21,-39);
  //  RlColKey(6,6,"UUID",UUID,false,UUID);
  RlColKey(6,6,"Window Name",WindowName,false,WindowName);
  RlCol(150,150,"URL",URL,false);
  RlCol(-200,-200,"Date",UDate,true);
  RlCol(-130,-130,"Time",UTime,true);
  RlCol(-60,-60,"State",State,true);
  SearchField("Search");
  return;
end;

global
procedure DefineElearningURLCacheDClass_ENG()
begin
  real vs,h,h2,h3,v;

  SetWRect(20,80,500,420);
  vs = 20; h = 100; h2 = 240;h3 = 380; v = 6;
  EditField(h,v,320,"UUID",Normal,UUID,false,0);
  EditField(h,v+=vs,-20,"Window Name",Normal,WindowName,false,0);
  EditField(h,v+=vs,-20,"URL",Normal,URL,false,0);
  EditField(h,v+=vs,80,"Date",Normal,UDate,false,PasteCurDate);
  EditField(h2,v,80,"Time",Normal,UTime,false,PasteCurTime);
  EditField(h3,v,-20,"State",Normal,State,false,SetSClass);
  MatrixBegin(4,v=(v+=40),-32,-20,-,99);
  MatCol(1,24,"Property",0,Property,false,StrSetSClass);
  MatCol(1,-200,"Value",0,Value,false,0);
  EndMatrix;
  return;
end;

global
procedure DisplayRecordDetailsCustDisplay_ENG(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                                          string loyaltycardnr,Integer ShowBaggerSupervisor,string bagger,string supervisor,string disccardnr,val discfwdbal)
begin
  real h,h2,h3,h4,v;
  string 255 tstr;
  record LocalMachineBlock LMb;
  longint i;
  
  BlockLoad(LMb);

  h = ah;
  h2 = h + 150;
  h3 = h + 240;
  v = av;

  StaticText(h,v,Left(compname,20),false);

  StaticText(h2,v,td,false);
  StaticText(h3,v,Left(tt,5),false);
  StaticText(h,v+=20,nr,false);
  StaticText(h2,v,"Till: " & lmc,false);
  StaticText(h3,v,sm,false);
/*
  tstr = "Customer: ";
  tstr = tstr & custcode;
  StaticText(h,v+=20,tstr,false);
  StaticText(h2,v,Left(custname,35),false);

  tstr = "Loyalty Card: ";
  tstr = tstr & loyaltycardnr;
  StaticText(h,v+=20,tstr,false);
*/
  if (ShowBaggerSupervisor!=0) then begin
    tstr = "Bagger: ";
    tstr = tstr & bagger;
    StaticText(h2,v,tstr,false);
    v = v + 20;
  end;
  if (nonblank(disccardnr)) then begin
    tstr = "Discount Card: ";
    tstr = tstr & disccardnr;
    StaticText(h2,v,tstr,false);
    tstr = "Discount Fwd. Bal.: " & discfwdbal;
    StaticText(h2,v+=20,tstr,false);
  end;
  
  
  h = 20; v = 26;
  
  //h2 = -150; h3 = -70;
  
  h4 = -24;
  if (LMb.WideScrollBars!=0) then begin
    h4 = -44;
  end;
  
  // DrawPOSStringList();
  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
      DataList(630,105+60+15,h4,-10,"receipt");
      h = 8;
    case kPOSButtonsPositionRight:
      DataList(8,105+60+15,-660,-10,"receipt");
      h = -630;
  end;
  
  DataListColumn(1,6,90,AdjLeft,"artcode","Code",M4Code);
  DataListColumn(1,96,-270,AdjLeft,"spec","Description",M4Str);
  DataListColumn(1,-265,-210,AdjRight,"qty","Quantity",M4Val);
  DataListColumn(1,-205,-150,AdjRight,"price","Price",M4Val);
  DataListColumn(1,-145,-90,AdjRight,"rebate","Discount",M4Val);
  DataListColumn(1,-85,-26,AdjRight,"rowsum","Sum",M4Val);
  DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.
  
  DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
  
  DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
  DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
  DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
  DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
  DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
  
  return;
end;

global
procedure DisplayRecordDetailsRA_ENG(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                                 string loyaltycardnr,Integer ShowBaggerSupervisor,string table,LongInt covers,Date rd,string class,LongInt kitchenordnr)
begin
  real h,h2,h3,v;
  string 255 tstr;

  h = ah;
  h2 = h + 160;
  h3 = h + 250;
  v = av;

  StaticText(h,v,Left(compname,20),false);

  StaticText(h2,v,td,false);
  StaticText(h3,v,Left(tt,5),false);
  StaticText(h,v+=20,nr,false);
  StaticText(h2,v,USetStr(28201) & lmc,false);
  StaticText(h3,v,sm,false);

  tstr = USetStr(28202);
  tstr = tstr & custcode;
  StaticText(h,v+=20,tstr,false);
  StaticText(h2,v,Left(custname,35),false);

  tstr = USetStr(28203);
  tstr = tstr & loyaltycardnr;
  StaticText(h,v+=20,tstr,false);

  tstr = USetStr(28204);
  tstr = tstr & table;
  StaticText(h2,v,tstr,false);
  tstr = USetStr(28205);
  if (covers<0) then begin
  end else begin
    tstr = tstr & covers;
  end;
  StaticText(h3,v,Left(tstr,35),false);

  tstr = USetStr(28206);
  tstr = tstr & rd;
  StaticText(h,v+=20,tstr,false);
  tstr = USetStr(28207);
  tstr = tstr & class;
  StaticText(h2,v,tstr,false);
  tstr = USetStr(28208);
  tstr = tstr & kitchenordnr;
  StaticText(h3,v,tstr,false);
  return;
end;

global
procedure DrawModifierButtons2_ENG(var integer ht,var integer vt)
begin
  record ModifiersVc Modifiersr;
  row ModifiersVc Modifiersrw;
  Integer i,rwcnt;
  record RcVc RepSpec;
  real h0,h,h2,v,vs,v2;
  Integer wn,mwn;
  vector Integer vgroupitemscnt;
  LongInt lastgroup;
  Boolean checkboxf;

  ht = 0;
  wn = CurWindow;
  if (GetWindowClass(wn)=="SelectModifiers2WClass") then begin
    GetWindowRecord(wn,RepSpec);
    h0 = 30; h2 = 200; v2 = 40; v = -20; vt = 0; vs = 50;
    Modifiersr.Code = RepSpec.f1;
    if (ReadFirstMain(Modifiersr,1,true)) then begin
      StaticText(10,20,"Select Modifier for Item " & Modifiersr.Comment,false);
      rwcnt = MatRowCnt(Modifiersr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Modifiersr,i,Modifiersrw);
        vgroupitemscnt[Modifiersrw.Group] = vgroupitemscnt[Modifiersrw.Group] + 1;
      end;
      h = h0;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Modifiersr,i,Modifiersrw);
        if (lastgroup!=Modifiersrw.Group) then begin
          PutWindowInteger(wn,"SelectModifiers2WClass " & Modifiersrw.Group,-1);
          if (vgroupitemscnt[Modifiersrw.Group]==1) then begin
            h = 2*120;
          end else begin
            h = vgroupitemscnt[Modifiersrw.Group]*120;
          end;
          if (ht<(h+130)) then begin ht = h + 130; end;
          h = h0;
          v = v + vs;
          vt = vt + 50;
        end;
        if (vgroupitemscnt[Modifiersrw.Group]==1) then begin
          RadioButton2(h,v,100,40,-1,0,"None","SelectModifiers2WClass" & Modifiersrw.Group,2,2);
          h = h + 120;
        end;
        RadioButton2(h,v,100,40,i,0,Modifiersrw.Name,"SelectModifiers2WClass" & Modifiersrw.Group,2,2);
        h = h + 120;
        lastgroup = Modifiersrw.Group;
      end;
    end;
  end;
  return;
end;

global
procedure DrawRestPMOtherPay_ENG()
begin
  real h,v;
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt,pmcnt;
  integer rows,cols,btnwidth,btnheight,hpad,vpad;
  string 255 label;
  Integer colnr;
  //change RestPMOtherPayVClassOnOpenWindow when changing this
  
  btnwidth = 85;
  btnheight = 50;
  hpad = 5;
  vpad = 5;
  
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  
  cols = squareroot(pmcnt-1);
  cols = cols+1;
  rows = pmcnt/cols;
  if (mod(pmcnt,cols)!=0) then begin
    rows = rows + 1;
  end;
  
  SetWRect(20,80,20+(cols*btnwidth)+(cols+1)*hpad,80+(rows*btnheight)+(rows+1)*vpad);
  if (GuiType!=kGuiiPhone) then begin
    SoftEditField(20+(cols*btnwidth)+(cols+1)*hpad+100,v,20,"",Normal ,"Dummy",false,0,M4Str,2);
  end;
  
  h = hpad;
  v = vpad;
  pmcnt = 1;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      label = RestPMbrw.Label;
      colnr = RestPMbrw.colnr;
      if (colnr<=0) then begin colnr = 9; end;
      switch (RestPMbrw.rowstp) begin
        case kInvoiceRowTypeLoyaltyPointsPayment:
          if (blank(label)) then begin label = "Loy. Points"; end;            
        case kInvoiceRowTypeCashPayment:
          if (blank(label)) then begin label = "Cash"; end;            
        case kInvoiceRowTypeCreditCardPayment:
          if (blank(label)) then begin label = "Cred. Card"; end;            
        case kInvoiceRowTypeGiftVoucherPayment:
          if (blank(label)) then begin label = "Rcv. GV"; end;            
        case kInvoiceRowTypeChequePayment:
          if (blank(label)) then begin label = "Rcv. GV"; end;            
      end;
      SoftEditField(h+5,v+5,20,"",Normal ,"PMCode" & pmcnt,false,0,M4Str,2);
      SoftEditField(h+5,v+5,20,"",Normal ,"PMCodeLabel" & pmcnt,false,0,M4Str,2);
      SoftEditField(h+5,v+5,20,"",Normal ,"rowstp" & pmcnt,false,0,M4Str,2);
      ColourPushButton(h,v,h+btnwidth,v+btnheight,"RestPMOtherPayDsm" & pmcnt,label,colnr);
      h = h + btnwidth + hpad;
      if (Mod(pmcnt,cols)==0) then begin
        v = v + btnheight + vpad;
        h = hpad;
      end;
      pmcnt = pmcnt + 1;
    end;
  end;
  
  return;
end;

global
function real DrawPaymentModesButtons_ENG()
begin
  real h,v,vm,vs,v3,h2,h3,h4;
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt;
  Boolean treatedf;
  string 255 label,fieldname;
  Integer colnr,pmcnt;

  v = 6;
  //  hs = 87; h2 = 80; v3 = 33; vs = 37; h3 = 180; h4 = 280;
  h2 = 80; v3 = 33; vs = 37; h3 = 180; h4 = 280;
  h = 17;
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  if (pmcnt>2) then begin
    pmcnt = 1;
    h = 17;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        label = RestPMbrw.Label;
        colnr = RestPMbrw.colnr;
        if (colnr<=0) then begin colnr = 9; end;
        h2 = 85;
        if (len(label)>10) then begin h2 = len(label)*85/10; end;
        if (pmcnt==4) then begin
          ColourPushButton(h,v,h+85,v+50,"RestPMOtherIVsm","Other",2);
          h=h+87;
          i = rwcnt;
        end else begin
          switch (RestPMbrw.rowstp) begin
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (blank(label)) then begin label = "Cash"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCash",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCash",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CashRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeCashPayment:
              if (blank(label)) then begin label = "Cash"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCash",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCash",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CashRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeCreditCardPayment:
              if (blank(label)) then begin label = "Cred. Card"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCC",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCC",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CredCardRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeGiftVoucherPayment:
              if (blank(label)) then begin label = "Rcv. GV"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeGVR",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpGVR",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"GVRRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeChequePayment:
              if (blank(label)) then begin label = "#Cheque#"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCHQ",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCHQ",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"ChequeRestAccsm",label,colnr);
              h = h+87;
            end;
          end;
          pmcnt = pmcnt + 1;
          treatedf = true;
        end;
      end;
      v = v + 60;
    end;
    if (treatedf==false) then begin
    ColourPushButton(h,vm=v,h+h2,v+v3,"RestAccPaymentCash","Cash",9);
    EditField(h4,v+10,70,"Cash",Normal,CashValue,true,0);
    ColourPushButton(h,v=v+vs,h+h2,v+v3,"RestAccPaymentCard1","Card 1",9);
    EditField(h3,v+10,20,"Pay Mode",Normal,PayDeal2,false,RestPMSClass);
    EditField(h4,v+10,70,"Card 1",Normal,Paid,true,0);
    ColourPushButton(h,v=v+vs,h+h2,v+v3,"RestAccPaymentCard2","Card 2",9);
    EditField(h3,v+10,20,"Pay Mode",Normal,PayDeal3,false,RestPMSClass);
    EditField(h4,v+10,70,"Card 2",Normal,Paid2,true,0);
    ColourPushButton(h,v=v+vs,h+h2,v+v3,"RestAccPaymentCard3","Card 3",9);
    EditField(h3,v+10,20,"Pay Mode",Normal,PayDeal4,false,RestPMSClass);
    EditField(h4,v+10,70,"Card 3",Normal,Paid3,true,0);
  end;

  //  ColourPushButton(h=h+62,v,h+60,v+33,"CashRestAccDsm","Cash",2);//not ready yet
  //  ColourPushButton(h=h+62,v,h+60,v+33,"CredCardRestAccDsm","Cred. Card",2);

  DrawPaymentModesButtons_ENG = v;
  return;
end;

global
function real RestAccOldDClassFunctionButtons_ENG()
begin
  Real v,hs,h2,h,v3;
  Integer colnr;

  h = 17; v = 12; h2 = 85; v3 = 52;

  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",1,"Drinks");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",2,"Bottles");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",3,"Spirits");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",4,"St&Lunch");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",5,"Sandwiches");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",6,"Main&Sweets");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",7,"Wines");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",8,"More Items");

  RestAccOldDClassFunctionButtons_ENG = v;
  return;
end;

global
function real POSPIVCashDClassFunctionButtons_ENG()
begin
  Real v,hs,h2,h,v3;
  Integer colnr;

  h = 17; v = 12; h2 = 85; v3 = 52;

  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",1,"Items 1");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",2,"Items 2");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",3,"Items 3");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",4,"Items 4");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",5,"Items 5");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",6,"Items 6");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",7,"Items 7");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",8,"More Items");

LPOSPIVCashDClassFunctionButtons_ENG:;
  POSPIVCashDClassFunctionButtons_ENG = v;
  return;
end;

global
function real IVDClassFunctionButtons_ENG()
begin
  Real v,hs,h2,h,v3;
  Integer colnr;

  h = 17; v = 12; h2 = 85; v3 = 52;

  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",1,"Items 1");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",2,"Items 2");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",3,"Items 3");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",4,"Items 4");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",5,"Items 5");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",6,"Items 6");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",7,"Items 7");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",8,"More Items");

LIVDClassFunctionButtons_ENG:;
  IVDClassFunctionButtons_ENG = v;
  return;
end;

global
function real FunctionButtons_ENG(string dclass)
begin
  Real v;
  
  switch (dclass) begin
    case "RestAccOldDClass": v = RestAccOldDClassFunctionButtons_ENG;
    case "RestAccPriceLookupDClass": v = RestAccOldDClassFunctionButtons_ENG;
    case "POSPIVCashDClass": v = POSPIVCashDClassFunctionButtons_ENG;
    case "IVDClass": v = IVDClassFunctionButtons_ENG;
  end;
  
LFunctionButtons_ENG:;
  FunctionButtons_ENG = v;
  return;
end;

global
function real VATZoneButtonsLabelsENG(real h,real v,real bl,real vs)
begin
  string 255 label,label2,label3,label4,label5;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    label2 = "#Inside EU#"; 
    label3 = "#Inside EU# (Post #VAT#)"; 
    label4 = "#Outside EU#"; 
    label5 = "#Outside EU# (Post #VAT#)"; 
  end else begin
    label2 = "Inside " & label; 
    label3 = "Inside " & label & " (Post #VAT#)"; 
    label4 = "Outside " & label; 
    label5 = "Outside " & label & " (Post #VAT#)"; 
  end;

  ButtonFrame(h,v,bl,5,"#VAT# Zone");
  RadioButton(h,v,0,0,"#Domestic#",ExportFlag);
  RadioButton(h,v+=vs,1,0,label2,ExportFlag);
  RadioButton(h,v+=vs,3,0,label3,ExportFlag);
  RadioButton(h,v+=vs,2,0,label4,ExportFlag);
  RadioButton(h,v+=vs,4,0,label5,ExportFlag);
  
  VATZoneButtonsLabelsENG = v;
  return;
end;

global
function string 255 VATZoneEditFieldLabelENG(Integer typ)
begin
  string 255 label,res;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    switch (typ) begin
      case 1: res = "#Inside EU# "; 
      case 2: res = "#Outside EU# "; 
    end;
  end else begin
    switch (typ) begin
      case 1: res = "Inside " & label & " ";
      case 2: res = "Outside " & label & " ";
    end;
  end; 
  VATZoneEditFieldLabelENG = res;
  return;
end;

global
function string 255 VATZoneNameENG()
begin
  string 255 label,res;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    res = "EU "; 
  end else begin
    res = label & " "; 
  end; 
  VATZoneNameENG = res;
  return;
end;

global
function string 255 DemoMsgWClassTitle_ENG(Boolean isreg,Boolean haskey)
begin
  string 255 res;
  
  if (DemoDays>0) then begin
    if (isreg) then begin
      if (haskey) then begin
        res = "Registration Information";
      end else begin
        res = "Database about to go to Restricted mode";
      end;
    end else begin
      res = "Please take a moment to Register your copy of #HansaWorld Long Product Name#";
    end;
  end else begin
    res = "Database is in Restricted mode";
  end;
  
  DemoMsgWClassTitle_ENG = res;
  return;
end;

global
function real DrawPaymentModesButtons_IV_ENG(real pv)
begin
  real h,v,vm,vs,v3,h2,h3,h4;
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt,pmcnt;
  Boolean treatedf;
  string 255 label;
  Integer colnr;
  
  v = pv+195;
  h2 = 85; v3 = 50; vs = 37; h3 = 180; h4 = 280;
  h = 17;
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  if (pmcnt>2) then begin
    pmcnt = 1;
    h = 17;;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        label = RestPMbrw.Label;
        colnr = RestPMbrw.colnr;
        if (colnr<=0) then begin colnr = 2; end;
        h2 = 85;
        if (len(label)>10) then begin h2 = len(label)*85/10; end;
        if (pmcnt==3) then begin
          ColourPushButton(h,v,h+85,v+50,"RestPMOtherIVsm","Other",2);
          h = h+87;
          i = rwcnt;
        end else begin
          switch (RestPMbrw.rowstp) begin
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (blank(label)) then begin label = "Loy. Points"; end;            
              ColourPushButton(h,v,h+85,v+50,"CashIVsm",label,colnr);
              h=h+87;
            case kInvoiceRowTypeCashPayment:
              if (blank(label)) then begin label = "Cash"; end;            
              ColourPushButton(h,v,h+85,v+50,"CashIVsm",label,colnr);
              h=h+87;
            case kInvoiceRowTypeCreditCardPayment:
              if (blank(label)) then begin label = "Cred. Card"; end;            
              SoftEditField(h+5,v+5,20,"",Normal ,"PMCode" & pmcnt,false,0,M4Str,2);
              SoftEditField(h+5,v+5,20,"",Normal ,"PMCodeLabel" & pmcnt,false,0,M4Str,2);
              SoftEditField(h+5,v+5,20,"",Normal ,"rowstp" & pmcnt,false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CredCardIVsm" & pmcnt,label,colnr);
              h=h+87;
            case kInvoiceRowTypeGiftVoucherPayment:
              if (blank(label)) then begin label = "Rcv. GV"; end;            
              ColourPushButton(h,v,h+85,v+50,"GCRIVsm",label,colnr);
              h=h+87;
            case kInvoiceRowTypeChequePayment:
              if (blank(label)) then begin label = "#Cheque#"; end;            
              ColourPushButton(h,v,h+85,v+50,"ChequeIVsm",label,colnr);
              h=h+87;
          end;
        end;
        pmcnt = pmcnt + 1;
        treatedf = true;
      end;
    end;
    ColourPushButton(h,v,h+85,v+50,"IVFinishAndPrint","Finish",1); // Prints Receipt, closes record and opens new window
  end else begin
/*  
    for (i=0;i<3;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        label = RestPMbrw.Label;
        colnr = RestPMbrw.colnr;
        if (colnr<=0) then begin colnr = 9; end;
        h2 = 85;
        if (len(label)>10) then begin h2 = len(label)*85/10; end;
        switch (RestPMbrw.rowstp) begin
          case kInvoiceRowTypeCashPayment:
            if (blank(label)) then begin label = "Cash"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"CashIVsm",label,2);
          case kInvoiceRowTypeCreditCardPayment:
            if (blank(label)) then begin label = "Cred. Card"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"CredCardIVsm",label,2);
          case kInvoiceRowTypeGiftVoucherPayment:
            if (blank(label)) then begin label = "Rcv. GV"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"GCRIVsm",label,2);
          case kInvoiceRowTypeChequePayment:
            if (blank(label)) then begin label = "Rcv. GV"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"ChequeIVsm",label,2);
        end;
        treatedf = true;
      end;
    end;
    if (treatedf) then begin
      ColourPushButton(h,v,h+85,v+50,"IVFinishAndPrint","Finish",1); // Prints Receipt, closes record and opens new window
    end;
*/    
  end;
  if (treatedf==false) then begin
    ColourPushButton(h=17,v,h+85,v+50,"CashIVsm","Cash",2);
    ColourPushButton(h=h+87,v,h+85,v+50,"CredCardIVsm","Cred. Card",2);
    ColourPushButton(h=h+87,v,h+85,v+50,"GCRIVsm","Rcv. GV",2);
    ColourPushButton(h=h+87,v,h+85,v+50,"IVFinishAndPrint","Finish",1); // Prints Receipt, closes record and opens new window
  end;
  DrawPaymentModesButtons_IV_ENG = h;
  return;
end;

function real VATZoneButtonsLabelsIDENG(real h,real v,real bl,real vs)
begin
  string 255 label,label2,label3,label4,label5;
  
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    label2 = "#Inside EU#"; 
    label3 = "#Inside EU# (Post VAT)"; 
    label4 = "#Outside EU#"; 
    label5 = "#Outside EU# (Post VAT)"; 
  end else begin
    label2 = "Inside " & label; 
    label3 = "Inside " & label & " (Post VAT)"; 
    label4 = "Outside " & label; 
    label5 = "Outside " & label & " (Post VAT)"; 
  end;

  ButtonFrame(h,v,bl,5,"#VAT# Zone");
  RadioButton(h,v,0,0,"#Domestic#",ExportFlag);
  RadioButton(h,v+=vs,1,0,label2,ExportFlag);
  RadioButton(h,v+=vs,3,0,label3,ExportFlag);
  RadioButton(h,v+=vs,2,0,label4,ExportFlag);
  RadioButton(h,v+=vs,4,0,label5,ExportFlag);
  
  VATZoneButtonsLabelsIDENG = v;
  return;
end;

global
function real TravelLogDeductions_ENG(real h,real vm)
begin
  real v,vs;
  record TravelLogBlock TravelLogRec;
  Integer DeductCount;
  
  BlockLoad(TravelLogRec);
  v = vm; vs = 16;

  if (nonblank(TravelLogRec.DeductDesc0)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc1)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc2)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc3)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc4)) then begin
    DeductCount = DeductCount + 1;
  end;
  
  if (DeductCount>0) then begin
    v = v + 30;
    ButtonFrame(h,v+vs,260,DeductCount,"Deductions");
    if (nonblank(TravelLogRec.DeductDesc0)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc0,Deduct0);
    end;
    if (nonblank(TravelLogRec.DeductDesc1)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc1,Deduct1);
    end;
    if (nonblank(TravelLogRec.DeductDesc2)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc2,Deduct2);
    end;
    if (nonblank(TravelLogRec.DeductDesc3)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc3,Deduct3);
    end;
    if (nonblank(TravelLogRec.DeductDesc4)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc4,Deduct4);
    end;
    v = v + 10;
  end;
  
  TravelLogDeductions_ENG = v;
  return;
end;

global
procedure DrawBarMenuTiles_ENG(string wclass)
begin
  Real v,vs,hs,h2,h;
  Integer i,rwcnt,j,butnr;
  Integer tilenr;
  Integer rw,rwc;
  record ItemButtonsBlock IBb;
  record BarMenuVc BarMenur;
  row BarMenuVc BarMenurw;
  row ItemButtonsBlock IBrw;
  string 255 procstr;
  
  BlockLoad(IBb);
  rwcnt = MatRowCnt(IBb);
  for (i=0;i<rwcnt;i=i+1) begin
    butnr = 1;
    v = 72; hs = 87; h2 = 80; vs = 60; h = 17;
    MatRowGet(IBb,i,IBrw);
    if (IBrw.ButtonType==2) then begin
      BarMenur.Code = GetMenuCode(IBrw.ArtCode);
      if (ReadFirstMain(BarMenur,1,true)) then begin
        tilenr = NumberofBarTabTiles + StringToInt(IBrw.ArtCode); //Bar Tab tiles + 
        Tile(tilenr,400,false,"" & tilenr,-);
        v = FunctionButtons_ENG(wclass);
        v = 71;
        rwc = MatRowCnt(BarMenur);
        for (rw = 0; rw <rwc; rw =rw +1) begin
          MatRowGet(BarMenur,rw,BarMenurw);
          procstr = "RestBarMenu"  & IBrw.ArtCode & "Item" & (rw+1);
          ColourPushButton(h,v,h+85,v+50,procstr,BarMenurw.Name,BarMenurw.clr);
          h = h+hs;
          if (Mod(butnr,8)==0) and (butnr!=0) then begin
            h = 17;
            v = v + vs;
          end;
          butnr = butnr + 1;
          if (butnr==33) then begin
            goto LMenuItemButtons;
          end;  
        end;
      end;
    end;
LMenuItemButtons:;
  end;
  return;
end;

global
procedure CreditCardWindowHeader_ENG(Boolean shownamef,Boolean showcurncyf,Real vin)
begin
  Real v,vs,h;

  v = vin; vs = 20; h=190;
  EditFieldTL(h,v+=6, 100,"Amount",M4Val,ViewOnly,0,vals0,false,0);
  if (showcurncyf) then begin
    EditFieldTL(h+190,v,-20,"Currency",M4UStr,ViewOnly,3,CurncyCode,false,0);
  end;
  EditFieldTL(h,v+=20, -20,"Payment Reference Number",M4Str,ViewOnly,60,f3,false,0);
  if (shownamef) then begin
    EditFieldTL(h,v+=20, -20,"Name (as it appears on the card)",M4Str,Normal,255,f1,false,0);
  end;
  EditFieldTL(h,v+=20, 100,"Card Type",M4Str,Normal,10,Stext,false,CredCardTypeSClass);
  EditFieldTL(h,v+=20, -20,"Card Number",M4UStr,Normal,255,f2,false,0);
  EditFieldTL(h,v+=20, 20,"Card Expiry Date (MM/YYYY)",M4UStr,Normal,2,FirstAcc,false,0);
  EditFieldTL(h+30,v, 40,"",M4UStr,Normal,4,LastAcc,false,0);
  EditFieldTL(h,v+=20, 30,"Card Verification Code",M4UStr,Normal,10,AccStr,false,0);
  EditFieldTL(h,v+=20, 20,"Card Start Date (MM/YYYY)",M4UStr,Normal,2,ObjType,false,0);
  EditFieldTL(h+30,v, 40,"",M4UStr,Normal,4,ObjStr,false,0);
  EditFieldTL(h,v+=20, 30,"Issue Number",M4UStr,Normal,2,TransStr,false,0);
  return;
end;

global
procedure CreditCardWindowInvoiceDetail_ENG(Real vin)
begin
  Real v,vs,h;

  v = vin; vs = 20; h=190;
  StaticText(h,v+=20,"Invoice address:",false);
  SoftEditField(h,v+=6,-20,"First Name",Normal,"ccpayaddr1",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Last Name",Normal,"ccpayaddr2",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Company Name",Normal,"ccpaycompany",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Street",Normal,"ccpayaddr3",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"City",Normal,"ccpayaddr4",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"#Post Code#",Normal,"ccpayaddr6",false,0,M4Str,50);
  SoftEditField(h,v+=20,30,"State Code (US/Canada)",Normal,"ccpayaddr5",false,0,M4Str,2);
  SoftEditField(h,v+=20,20,"Country",Normal,"cccountry",false,0,M4Str,2);
  return;
end;

global
procedure CreditCardWindowDeliveryDetail_ENG(Real vin)
begin
  Real v,vs,h;

  v = vin; vs = 20; h=190;
  StaticText(h,v+=20,"Delivery address:",false);
  SoftEditField(h,v+=6,-20,"First Name",Normal,"ccdeladdr_first",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Last Name",Normal,"ccdeladdr_last",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Company Name",Normal,"ccdeladdr_company",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Street",Normal,"ccdeladdr_addr1",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"City",Normal,"ccdeladdr_addr2",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"#Post Code#",Normal,"ccdeladdr_postcode",false,0,M4Str,50);
  SoftEditField(h,v+=20,30,"State Code (US/Canada)",Normal,"ccdeladdr_state",false,0,M4Str,2);
  SoftEditField(h,v+=20,20,"Country",Normal,"ccdeladdr_country",false,0,M4Str,2);
  return;
end;

global
procedure CreditCardWindowButtons_ENG(string halfuncproceed,string halfunccancel,real v)
begin
  Real h;

  if (v!=-70) then begin
    HalPushButton(h=120,v,h+100,v+20,halfuncproceed,"Proceed");
    HalPushButton(h+=130,v,h+100,v+20,halfunccancel,"Cancel");
  end else begin
    ColourPushButton(h=50,v,h+150,v+48,halfunccancel,"Cancel<BR>F2",20);
    ColourPushButton(h+=180,v,h+150,v+48,halfuncproceed,"Proceed<BR>F1",20);
  end;
  return;
end;

global
procedure CURClassDefinitionENG()
begin
  real h,hs,v,vs,vm;
  Boolean testf;

  SetWRect(20,80,555,450);
  v = 6; vs = 20;
  if (HasModPL or HasModPP or IsEnterprise) then begin
    EditFieldTL(h=150,v=10, 150,"Contact",   M4UStr,Normal,30,f1,false,CUSClass);
  end else begin
    EditFieldTL(h=150,v=10, 150,"Customer",   M4UStr,Normal,30,f1,false,CUSClass);
  end;
  if (HasModSL) then begin
    EditFieldTL(h,v+=vs,50,"Category",   M4UStr,Normal,5,f3,false,CCatSClass);
  end;
  if (HasModSL) then begin
    EditFieldTL(h,v+=vs,50,"#Salesman#",   M4UStr,Normal,10,f2,false,UserSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,50,"Sales Group",   M4UStr,Normal,5,Language,false,SalesGroupSClass);
  end;
  if (HasLanguages) then begin
    EditFieldTL(h,v+=vs,50,"Language",   M4UStr,Normal,5,FirstAcc,false,LangSClass);
  end;
  if (HasModSL or HasModPL) then begin
    EditFieldTL(h,v+=vs,30,"Payment Terms",   M4UStr,Normal,2,LastAcc,false,PDSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs,150,"Classification",M4UStr,Normal,30,Stext,false,CClassSClass);
    EditFieldTL(h,v+=20 ,70,"Classification Types",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=20, 150,"Object",M4UStr,Normal,20,AccStr,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=20, 100,"Country",M4UStr,Normal,5,TransStr,false,CountrySClass);
  end;
  EditFieldTL(h,vm=(v+=vs),80,"New or updated since",M4Date,Normal,0,d1,false,PasteCurDate);
  if (IsEnterprise) then begin
    EditFieldTL(h,vm=(v+=vs),80,"Route",M4Str,Normal,20,ObjStr,false,DelRouteSClass);
  end;
  if (IsEnterprise or HasLocalization("POL")) then begin
    EditFieldTL(h,vm=(v+=vs),80,"Short",M4Str,Normal,10,f4,false,0);
  end;
  ButtonFrame(h=340,v=20,140,6,"Sorting");
  RadioButton(h,v,0,0,"N_o.",flags[1]);
  RadioButton(h,v+=16,1,0,"Name",flags[1]);
  if (HasModSL) then begin
    RadioButton(h,v+=16,2,0,"Category",flags[1]);
  end;
  if (IsEnterprise) then begin
    RadioButton(h,v+=16,3,0,"Sort Key",flags[1]);
    RadioButton(h,v+=16,4,0,"Department",flags[1]);
  end;
  RadioButton(h,v+=16,5,0,"Telephone",flags[1]);
  EndFrame;
  ButtonFrame(h,v+=45,140,4,"Function");
  RadioButton(h,v,0,0,"Detailed",flags[0]);
  RadioButton(h,v+=16,1,0,"Telephone",flags[0]);
  RadioButton(h,v+=16,2,0,"Fax",flags[0]);
  RadioButton(h,v+=16,3,0,"E-mail",flags[0]);
  ButtonFrame(h,v+=45,140,3,"Include");
  RadioButton(h,v,0,0,"Not Closed Only",flags[3]);
  RadioButton(h,v+=16,1,0,"Closed and not Closed",flags[3]);
  RadioButton(h,v+=16,2,0,"Closed Only",flags[3]);
  testf = true;
  if (IsEnterprise) then begin testf = true; end;
  if (HasModSL and HasModPL) then begin testf = true; end;
  if (HasModSL and HasModPP) then begin testf = true; end;
  if (testf) then begin
    ButtonFrame(h,v+=45,140,6,"Selection");
    RadioButton(h,v,0,0,"Customers",flags[9]);
    if (HasModPL) then begin
      RadioButton(h,v+=16,1,0,"#Suppliers#",flags[9]);
    end;
    if (HasModPP) then begin
      RadioButton(h,v+=16,2,0,"Guests",flags[9]);
    end;
    if (IsEnterprise) then begin
      RadioButton(h,v+=16,3,0,"Dealers",flags[9]);
      RadioButton(h,v+=16,5,0,"Employees",flags[9]);
    end;
    RadioButton(h,v+=16,4,0,"All",flags[9]);
    EndFrame;
  end;
  CheckBox(h=30,v=vm+24,0,"Include all Contact Persons",flags[2]);
  CheckBox(h,v+=16,0,"Check Contact Persons",flags[4]);
  CheckBox(h,v+=16,0,"Skip Contacts with E-mail Address",flags[5]);
  CheckBox(h,v+=16,0,"Only Contacts that share E-mail Addresses",flags[8]);
  CheckBox(h,v+=16,0,"Skip Contacts with Fax No.",flags[6]);
  CheckBox(h,v+=16,0,"Skip Contacts with #Mobile#",flags[10]);
  if (HasContactClassification) then begin
    CheckBox(h,v+=16,0,"Count Contacts per Classification",flags[7]);
  end;
  return;
end;

global
function string 255 ResDayWClassWindowTitle_ENG()
begin
  if (ValuePack(11)==false) then begin
    ResDayWClassWindowTitle_ENG = "Resource Day Overview: ";
  end else begin
    ResDayWClassWindowTitle_ENG = "Overview Rooms Ledger: ";
  end;
  
  return;
end;

global
function string 255 ResMonWClassWindowTitle_ENG()
begin
  if (ValuePack(11)==false) then begin
    ResMonWClassWindowTitle_ENG = "Resource Month Overview: ";
  end else begin
    ResMonWClassWindowTitle_ENG = "Month Overview Rooms: ";
  end;

  return;
end;

global
function string 255 RTMonWClassWindowTitle_ENG()
begin  
  if (ValuePack(11)==false) then begin
    RTMonWClassWindowTitle_ENG = "Resource Type Month Overview: ";
  end else begin
    RTMonWClassWindowTitle_ENG = "Month Overview of Room Types: ";
  end;
  
  return;
end;

global
procedure JobRClass_ENG()
begin  
  real h,v;

  SetWRect(20,80,400,150);
  EditFieldTL(h=120,v=6,153,"Reservation No.",M4Str,Normal,30,f1,false,0);
  CheckBox(h,v+=30,0,"Detailed",flags[0]);
  EndWindow;
  return;
end;

global
procedure ARS2RClass_Def()
begin
  real h,v,vm,vs;

  if (IsEnterprise()) then begin 
    SetWRect(20,80,450,450);
  end else begin
    SetWRect(20,80,410,250);
  end;  
  
  vs=20;
  if (IsEnterprise) then begin
    h = 180;
  end else begin
    h = 130;
  end;
  EditFieldTL(h,v=6, 150,"Customer",   M4UStr,Normal,30,f1,false,CUSClass);
  EditFieldTL(h,v+=20,50, "Category",   M4UStr,Normal,5,f3,false,CCatSClass);
  if (hasObjects) then begin
    EditFieldTL(h,v+=20,150, "Object",   M4Code,Normal,20,ObjStr,false,ObjSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=20,50, "Classification",   M4UStr,Normal,30,f4,false,CClassSClass);
  end;
  if (IsEnterprise()) then begin
    EditFieldTL(h,v+=20,20, "Days of delay (not less than)",   M4Int,Normal,5,Comparison,false,0);
    // EditFieldTL(h,v+=vs ,80,"Min. Turnover",M4Val,Normal,0,vals0,true,0);// this is too slow
    EditFieldTL(h,v+=20,80, "Main Partner",   M4UStr,Normal,20,LastAcc,false,CUSClass);
    EditFieldTL(h,v+=vs ,80,"Min. Balance",M4Val,Normal,0,vals2,true,0);
    EditFieldTL(h,v+=vs ,80,"Min. no. of Invoices",M4Long,Normal,0,long1,true,0);
    EditFieldTL(h,v+=20,80,"On Date",M4Date,Normal,0,d1,false,PasteCurDate);
    // CheckBox(20,v+=20,0,"Endast kunder med saldo",flags[1]);
  end;

  if (IsEnterprise) then begin 
    h = 30;
  end else begin
    h = 130;
  end; 

  ButtonFrame(h,vm=(v+=40),123,2,"Invoices");
  RadioButton(h,v,0,0,"Open",flags[0]);
  RadioButton(h,v+=16,2,0,"Overdue",flags[0]);

  if (HasMultiCurrency) then begin
    ButtonFrame(h,v+=40,123,2,"Amounts");
    RadioButton(h,v,0,0,"Base Currency",flags[4]);
    RadioButton(h,v+=16,1,0,"Currency",flags[4]);
  end;
  if (IsEnterprise()) then begin
    CheckBox(h,v+=30,0,"Downpayment Receipts Only",flags[10]);
    CheckBox(h,v+=16,0,"Show Prepayment No.",flags[14]);
    CheckBox(h,v+=16,0,"Include Open #Credit Notes#",flags[9]);
  end;
  if (IsEnterprise() or HasLocalization("PRT")) then begin
    CheckBox(h,v+=16,0,"Show Official No.",flags[15]);
  end;
  if (IsEnterprise()) then begin
    ButtonFrame(h+=195,v=vm,125,3,"Status");
    CheckBox(h,v,0,"Skip Disputed",flags[11]);
    CheckBox(h,v+=16,0,"Skip No Reminder",flags[12]);
    CheckBox(h,v+=16,0,"Skip No Collection",flags[13]);
  end;
  return;
end;

global
procedure ALLVATRClass_Def()
begin
  real h,h2,v,vm,vs;

  if (IsEnterprise) then begin
    SetWRect(20,80,520,430);
  end else begin
    SetWRect(20,80,400,250);
  end;
  vs = 30;

  if (!IsEnterprise()) then begin
    PeriodField(h=100,v=6,"Period");
    ButtonFrame(h,v+=40,200,3,"Specify");
    CheckBox(h,v,0,"Sales Invoices",flags[1]);
    CheckBox(h,v+=16,0,"#Purchase Invoices#",flags[3]);
    CheckBox(h,v+=16,0,"Nominal Transactions",flags[4]);
    EndFrame;
    
    CheckBox(h,v+=48,0,"Show Official No.",flags[20]);
  end;

  if (IsEnterprise()) then begin
    PeriodField(h=150,v=6,"Period");
    EditFieldTL(h,v+=20,100,"Number",M4UStr,Normal,60 ,f1,false,0);
    EditFieldTL(h,v+=20,100,"Only Registered From",M4Date,Normal,100,d1,false,0);
    EditFieldTL(h,v+=20,100,"#VAT# Codes",M4UStr,Normal,20,f2,false,VATCodeSClass);
    StaticText(h+110,v+12,"Detailed only",false);
    ButtonFrame(h=120,v+=40,250,6,"Specify");
    CheckBox(h,vm=v,0,"Sales Invoices",flags[1]);
    CheckBox(h,v+=16,0,"Cash In",flags[8]);
    CheckBox(h,v+=16,0,"Receipts",flags[10]);
    CheckBox(h,v+=16,0,"#VAT# Corr. #S/L#",flags[13]);
    CheckBox(h,v+=16,0,"#N/L# Transactions",flags[4]);
    CheckBox(h,v+=16,0,"POS Balances",flags[16]);
    CheckBox(h2=250,v=vm,0,"#Purchase Invoices#",flags[3]);
    CheckBox(h2,v+=16,0,"Cash Out",flags[9]);
    CheckBox(h2,v+=16,0,"Payments",flags[11]);
    CheckBox(h2,v+=16,0,"#VAT# Corr. #P/L#",flags[15]);
    CheckBox(h2,v+=16,0,"Expenses",flags[5]);
    EndFrame;

    CheckBox(h,v+=48,0,"Show totals only (Overview only)",flags[6]);
    CheckBox(h,v+=16,0,"Show Official No.",flags[20]);
  end;

  if (IsEnterprise) then begin
    ButtonFrame(h=120,v+=50,200,3,"Select");
    RadioButton(h,v,0,0,"All Transactions",flags[7]);
    RadioButton(h,v+=16,1,0,"Only Transactions without #VAT#",flags[7]);
    RadioButton(h,v+=16,2,0,"Only Transactions with #VAT#",flags[7]);
    EndFrame;
  end else begin
    ButtonFrame(h,v+=50,200,2,"Select");
    RadioButton(h,v,0,0,"All Transactions",flags[7]);
    RadioButton(h,v+=16,1,0,"Only Transactions without #VAT#",flags[7]);
    EndFrame;
  end;

  if (IsEnterprise()) then begin
    ButtonFrame(h=120,v+=50,200,2,"Function");
    RadioButton(h,v,0,0,"Overview",flags[14]);
    RadioButton(h,v+=16,1,0,"Detailed",flags[14]);
    EndFrame;
/* I can't find the code for this
    ButtonFrame(h=120,v+=50,200,3,"#VAT# Zone");
    CheckBox(h,v,0,"#Domestic#",flags[10]);
    CheckBox(h,v+=16,0,"#NL#-#Inside EU#",flags[11]);
    CheckBox(h,v+=16,0,"#NL#-#Outside EU#",flags[12]);
    EndFrame;
*/
  end;
  return;
end;
  
global
procedure SysEClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==9) then begin  
    h = 270;
    v = 35;
  end;
  return;
end;

global
procedure GTransEClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==14) then begin  
    h = 180;
    v = 38;
  end;
  if (cnt==28) then begin  
    h = 340;
    v = 38;
  end;
  return;
end;

global
procedure GTrans2EClass_Tool(Integer cnt,var real v,var real vm,var real h)
begin
  if (cnt==11) then begin  
    if (v>vm) then begin vm = v; end;
    h = 180;
    v = 38;
  end;
  if (cnt==22) then begin  
    if (v>vm) then begin vm = v; end;
    h = 340;
    v = 38;
  end;
  return;
end;

global
procedure GBaseEClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==8) then begin  
    h = 200;
    v = 35;
  end;
  if (cnt==16) then begin  
    h = 350;
    v = 35;
  end;
  return;
end;

global
procedure TransGenVClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==14) then begin  
    h = 200;
    v = 18;
  end;
  if (cnt==28) then begin  
    h = 350;
    v = 18;
  end;
  return;
end;

global procedure ShowRRPPricesDsm()
begin
	integer wn;
	record POVc POr;
	record RcVc RepSpec;
	
	wn = curwindow;
	getwindowrecord(wn,POr);
	RepSpec.repname = "CalcPricesFromPORn";
  RepSpec.Media = mtExcel;
	RepSpec.long1 = POr.SerNr;
	RunReport(RepSpec,0);
	//CalcPricesFromPO(POr);

return;
end;

