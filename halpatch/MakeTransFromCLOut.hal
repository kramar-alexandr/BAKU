external function roundmode DefaultRoundMode();
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 20 GetPayPurchVATAcc(string,record VATCodeBlock);
external function string 5 AddVATCodeToVATAccRows(string);
external function Integer GetVATLaw();
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure IVVc_MakeAccountDescription(record IVVc,var string);
external procedure AddTransAutoTransRows(record TRVc);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure TRSumup(var record TRVc,var val);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean TransInFiscal(Date);

global
procedure GetARPrepaymentRate(LongInt TransNr,var val ofrrate,var val otorate1,var val otorate2,var val obaserate1,var val obaserate2)
BEGIN
  record ARPayHistVc ARPayHistr;
  record CLInVc CLInr;
  Boolean found;
  record IPVc IPr;
  row IPVc IPrw;
  Integer ipi,iprwcnt;
  record ARPayVc ARPayr;

  ofrrate = blankval;
  otorate1 = blankval;
  otorate2 = blankval;
  obaserate1 = blankval;
  obaserate2 = blankval;
  ARPayHistr.CUPNr = TransNr;
  ARPayHistr.FileName = "CLInVc";
  found = ReadFirstMain(ARPayHistr,2,true);
  if (found) then begin 
    CLInr.SerNr = ARPayHistr.SerNr;
    if (ReadFirstMain(CLInr,1,true)) then begin 
      ofrrate = CLInr.FrRate;
      otorate1 = CLInr.ToRateB1;
      otorate2 = CLInr.ToRateB2;
      obaserate1 = CLInr.BaseRate1;
      obaserate2 = CLInr.BaseRate2;
    end;
  end;
  if (!found) then begin 
    ARPayHistr.CUPNr = TransNr;
    ARPayHistr.FileName = "IPVc";
    found = ReadFirstMain(ARPayHistr,2,true);
    if (found) then begin 
      IPr.SerNr = ARPayHistr.SerNr;
      if (ReadFirstMain(IPr,1,true)) then begin 
        iprwcnt = MatRowCnt(IPr);
        for (ipi=0;ipi<iprwcnt;ipi=ipi+1) begin
          MatRowGet(IPr,ipi,IPrw);
          ofrrate = IPrw.FrRateBankVal;
          otorate1 = IPrw.ToRateB1BankVal;
          otorate2 = IPrw.ToRateB2BankVal;
          obaserate1 = IPrw.BaseRate1BankVal;
          obaserate2 = IPrw.BaseRate2BankVal;
          if (ofrrate==0) then begin
            GetFullCurncyRate(ARPayHistr.CurncyCode,IPr.TransDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
          end;
          ipi = iprwcnt;
        end;
      end;
    end;
  end;
  if (!found) then begin 
    ARPayr.CUPNr = TransNr;
    found = ReadFirstMain(ARPayr,1,true);
    GetFullCurncyRate(ARPayr.CurncyCode,ARPayr.PayDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
  end;
  RETURN;
END;

global
procedure VIVc_MakeAccountDescription(record VIVc VIr,var string res)
BEGIN
  Boolean lightFlag;
  
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) or 
      (IsBooks)) then begin
    lightFlag = true;
  end;  
  res = "";
    res = "";
    if (VIr.SerNr!=-1) then begin
        if (lightFlag==false) then begin
          if (nonblank(VIr.InvoiceNr)) then begin
            res = VIr.InvoiceNr;
          end else begin
            res = VIr.SerNr;
          end;
        end;
    end else begin
      res = VIr.VECode;
    end;
    if (nonblank(res)) then begin
      res = res & " ";
    end;
    res = res & VIr.VECode;
    res = res & " ";
    res = res & VIr.VEName;
  RETURN;
END;

function Integer AddTransRows(record TRVc gTRp,record MainCLBlock MainCLb,record VATCodeBlock VATCodeRec,record APAccBlock APAccRec,
                              record BaseCurBlock bcur,record CLOutVc CLOutp,string corspacc,
                              val total,val netval,val vatval,val frrate,val torate1,val torate2,val baserate1,val baserate2,
                              var val totsum,string CustCode,LongInt InvoiceNr,string accstr,Integer nlrwtype,string rowobjects)
BEGIN
  val rs,rs2,bv;
  Integer res;
  string 255 tstr,vatacc,tax1acc,taccnumber,objstr;
  val nilv,diff,diff2;
  Integer i,vcrwcnt;
  row VATCodeBlock VATCoderw;
  Date bd;
  record AccVc Accr; 
  
  objstr = CLOutp.Objects;
  if (nonblank(rowobjects)) then begin
    if (nonblank(objstr)) then begin objstr = objstr & ","; end;
    objstr = objstr & rowobjects;
  end;		    
  nilv = -1;
  res = 1085;
  Accr.AccNumber = corspacc;    
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 20022;
    goto LAddTransRows;
  end else begin
    if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
      res = 1084; 
      goto LAddTransRows;
    end;        
    tstr = Accr.Comment;
  end;
//  if ((MainCLb.PostVAT==1) and (blank(CLOutp.FileName)) and (MatRowCnt(CLOutp)==0)) then begin
  if ((MainCLb.PostVAT==1) and (blank(CLOutp.FileName)) and (vatval!=0)) then begin
    if (blank(CLOutp.VATCode)) or (netval==0) then begin
      res = 1134;
      goto LAddTransRows;
    end;
    rs = netval;
    rs = MulRateToBase1(CLOutp.CurncyCode,netval,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
/*    
    if (GetAccName(corspacc,tstr,60)==false) then begin
      res = 20022;
      goto LAddTransRows;
    end;
*/    
    if (CheckTTRPerRow("CLOutVc",corspacc,objstr,true,taccnumber,0)) then begin end;      
//        vatcodes = TaxTemplateVATCodeOnTRRows(VIrw.TaxTemplateCode,VIrw.VATCode);
    AddEuroCurncyTrRow(gTRp,corspacc,objstr,CLOutp.VATCode,tstr,rs,false,true,totsum,
                       CLOutp.CurncyCode,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,netval,nilv,-1,false,taccnumber);
    if (nonblank(CLOutp.VATCode)) then begin
      vatacc = ""; 
      BlockLoad(VATCodeRec);
      vcrwcnt = MatRowCnt(VATCodeRec);
      for (i=0;i<vcrwcnt;i=i+1) begin
        MatRowGet(VATCodeRec,i,VATCoderw);
        if (VATCoderw.VATCode==CLOutp.VATCode) then begin 
          vatacc = VATCoderw.PurchVATAcc;
          tax1acc = VATCoderw.Tax1Acc;
          goto L12;
        end;
      end;
L12:;
      if (GetAccName(vatacc,tstr,60)==false) then begin
        res = 1902;
        goto LAddTransRows;
      end;
      rs = MulRateToBase1(CLOutp.CurncyCode,vatval,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("CLOutVc",vatacc,"",true,taccnumber,0)) then begin end;      
      AddEuroCurncyTrRow(gTRp,vatacc,"",AddVATCodeToVATAccRows(CLOutp.VATCode),tstr,rs,false,true,totsum,
                         CLOutp.CurncyCode,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,vatval,nilv,-1,false,taccnumber);
      if (CLOutp.TAX1Sum!=0) then begin
        if (GetAccName(tax1acc,tstr,60)==false) then begin
          res = 2193;
          goto LAddTransRows;
        end;
        rs = MulRateToBase1(CLOutp.CurncyCode,CLOutp.TAX1Sum,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
        if (CheckTTRPerRow("CLOutVc",tax1acc,"",true,taccnumber,0)) then begin end;      
        AddEuroCurncyTrRow(gTRp,tax1acc,"","",tstr,rs,false,true,totsum,
                           CLOutp.CurncyCode,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,CLOutp.TAX1Sum,nilv,-1,false,taccnumber);
      end;
    end else begin
      if (CLOutp.VATVal!=0) then begin
        res = 1902;
        goto LAddTransRows;
      end;
    end;
  end else begin
    if (InvoiceNr==-1) then begin
      rs = MulRateToBase1(CLOutp.CurncyCode,total,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
/*    
      if (GetAccName(corspacc,tstr,60)==false) then begin
        res = 20022;
        goto LAddTransRows;
      end;
*/      
      if (nonblank(accstr)) then begin 
        tstr = tstr & ", " & accstr;
      end;
      if (CheckTTRPerRow("CLOutVc",corspacc,objstr,true,taccnumber,0)) then begin end;      
      AddEuroCurncyTrRow(gTRp,corspacc,objstr,"",tstr,rs,false,true,totsum,
                         CLOutp.CurncyCode,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,total,nilv,-1,false,taccnumber);
    end else begin
      rs = MulRateToBase1(CLOutp.CurncyCode,total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      rs2 = MulRateToBase2(CLOutp.CurncyCode,total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      diff = MulRateToBase1(CLOutp.CurncyCode,total,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
      diff2 = MulRateToBase2(CLOutp.CurncyCode,total,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);      
      diff = diff - rs;
      diff2 = diff2 - rs2;
//StopAlert("diff " & diff & " diff2 " & diff2);
/*    
      if (GetAccName(corspacc,tstr,60)==false) then begin
        res = 20022;
        goto LAddTransRows;
      end;
*/      
      if (nonblank(accstr)) then begin
        tstr = accstr;
      end;
      if (CheckTTRPerRow("CLOutVc",corspacc,objstr,true,taccnumber,0)) then begin end;      
      if (CLOutp.ARonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,corspacc,objstr,"",tstr,rs,blankval,false,true,totsum,
                                CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,total,blankval,
                                CustCode,InvoiceNr,nlrwtype,blankval,CLOutp.TransDate,-1,false,taccnumber,"","");
      end else begin
        AddEuroCurncyTrRow(gTRp,corspacc,objstr,"",tstr,rs,false,true,totsum,
                           CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,total,nilv,-1,false,taccnumber);
      end;                         
    end;
    if (nonblank(diff)) then begin
      if (diff<0) then begin
        if (GetAccName(APAccRec.RateGainAcc,tstr,60)==false) then begin
          res = 1918;
          goto LAddTransRows;
        end;
        if (diff2==0) then begin
          AddEuroTrRow(gTRp,APAccRec.RateGainAcc,"","",tstr,diff,baserate1,baserate2,false,true,TotSum,false,"","","");
        end else begin
          AddEuroCurncyNomARTrRow(gTRp,APAccRec.RateGainAcc,"","",tstr,diff,0,false,true,TotSum,
                                  bcur.BaseCur2,bv,bv,bv,baserate1,baserate2,bv,nilv,
                                  "",-1,0,nilv,bd,-1,false,"","","");
        end;
      end else begin
        if (GetAccName(APAccRec.RateLossAcc,tstr,60)==false) then begin
          res = 1917;
          goto LAddTransRows;
        end;
        if (diff2==0) then begin
          AddEuroTrRow(gTRp,APAccRec.RateLossAcc,"","",tstr,diff,baserate1,baserate2,false,true,TotSum,false,"","","");
        end else begin
          AddEuroCurncyNomARTrRow(gTRp,APAccRec.RateLossAcc,"","",tstr,diff,0,false,true,TotSum,
                                  bcur.BaseCur2,bv,bv,bv,baserate1,baserate2,bv,nilv,
                                  "",-1,0,nilv,bd,-1,false,"","","");
        end;
      end;
    end;
//    if (blank(diff)) then begin
    if (nonblank(diff2)) then begin
      if (diff2<0) then begin
        if (GetAccName(APAccRec.RateGainAcc,tstr,60)==false) then begin
          res = 1918;
          goto LAddTransRows;
        end;
        AddEuroCurncyNomARTrRow(gTRp,APAccRec.RateGainAcc,"","",tstr,0,diff2,false,true,TotSum,
                                bcur.BaseCur2,bv,bv,bv,baserate1,baserate2,bv,nilv,
                                "",-1,0,nilv,bd,-1,false,"","","");

      end else begin
        if (GetAccName(APAccRec.RateLossAcc,tstr,60)==false) then begin
          res = 1917;
          goto LAddTransRows;
        end;
        AddEuroCurncyNomARTrRow(gTRp,APAccRec.RateLossAcc,"","",tstr,0,diff2,false,true,TotSum,
                                bcur.BaseCur2,bv,bv,bv,baserate1,baserate2,bv,nilv,
                                "",-1,0,nilv,bd,-1,false,"","","");
      end;
    end;
//    end;
  end;
  res = 0;
LAddTransRows:;
  AddTransRows = res;
  RETURN;
END;

global
function Integer MakeTransFromCLOut(var record TRVc gTRp,record CLOutVc CLOutp,Boolean rpt,var string errstr)
BEGIN
  Integer res;
  record TRVc lTRr;
  record APAccBlock APAccRec;
  record TRGenBlock TRGenRec;
  record CLCorspVc CLCorspr;
  record MainCLBlock MainCLb;
  record PMBlock PMRec;
  row PMBlock pmrw;
  record VATCodeBlock VATCodeRec;
  record BaseCurBlock bcur;
  Integer vcrwcnt;
  Integer i,rwcnt,PMn;
  string 255 vatacc;
  string 10 corspacc,headercorspacc;
  string 255 ftxt,accstr;
  string 255 tstr,pmtstr,t2;
  string 255 vstr;
  val rs,rs2,ors,ors2,rd,rd2,totsum,bsum,vatval,v;
  val frrate,torate1,torate2,baserate1,baserate2;
  val ofrrate,otorate1,otorate2,obaserate1,obaserate2;
  Boolean dc1,dc2;
  val nilv;
  row CLOutVc CLOutrw;
  Boolean bookvativf,bookvatvif,bookprepvatvif;
  record VIVc VIr;
  record UserVc USr;
  val userval,nv;
  string 10 persacc;
  string 255 persobj,persstr,onaccacc,vatobjstr,taccnumber;
  Boolean userreadf;
  record CUVc VEr;
  record CCatVc CCatr;
  record VGVc VGr;
  record AccBlock ARAccRec;
  record IVVc IVr;
  string 60 tobj;
  Boolean sumpmf;
  row VATCodeBlock VATCoderw;
  record AccVc Accr;

  res = 1085;
  errstr = "";
  nilv = -1;
  BlockLoad(TRGenRec);
  BlockLoad(APAccRec);
  BlockLoad(MainCLb);
  BlockLoad(PMRec);
  BlockLoad(ARAccRec);
  BlockLoad(bcur);
  totsum = blankval;
  vstr = "";
  frrate = CLOutp.FrRate;
  torate1 = CLOutp.ToRateB1;
  torate2 = CLOutp.ToRateB2;
  baserate1 = CLOutp.BaseRate1;
  baserate2 = CLOutp.BaseRate2;
  RecordNew(gTRp);  
  if (rpt==false) then begin
    if (TRGenRec.CLOutGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromCLOut;
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.CLOutStartDate)) and
       (CLOutp.TransDate<TRGenRec.CLOutStartDate)) then begin //## only if old not done 
      res = 0;
      goto LMakeTransFromCLOut;
    end;  
  end;
  
  if (true) then begin
    gTRp.IntYc = CLOutYc;
    gTRp.Number = CLOutp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromCLOut;
    end;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = CLOutp.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromCLOut;
  end;
  ftxt = "";
  gTRp.Comment = CLOutp.Comment;
  gTRp.RefStr = CLOutp.RefStr;

  PMn = 0;
  rwcnt = MatRowCnt(PMRec);
  if (len(CLOutp.PayMode)>0) then begin
    for (i = 0; i<rwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.Code==CLOutp.PayMode) then begin
        PMn = i;
        goto LFOREND;
      end;  
    end;
  end;
LFOREND:;  
  dc1 = true;
  dc2 = false;
  t2 = "";
  if (GetAccName(pmrw.AccNr,pmtstr,60)==false) then begin
    res = 2191;
    goto LMakeTransFromCLOut;
  end;  
  Accr.AccNumber = pmrw.AccNr;
  ReadFirstMain(Accr,1,true);  
  if (Accr.blockedFlag!=0) then begin
    res = 1258; 
    errstr = Accr.AccNumber;
    goto LMakeTransFromCLOut;
  end;
  if (Accr.GroupAcc!=0) then begin
    res = 1084; 
    errstr = Accr.AccNumber;
    goto LMakeTransFromCLOut;
  end;
  CLCorspr.Code = CLOutp.CorspCode;
  if (ReadFirstMain(CLCorspr,1,true)) then begin
    headercorspacc = CLCorspr.AccNumber;
  end;
  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(CLOutp);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLOutp,i,CLOutrw);
      sumpmf = false;
      switch (CLOutrw.stp) begin
        case 1:
          switch (CLOutrw.Type) begin
            case 0:
              corspacc = CLOutrw.CorspCode;
              if (blank(corspacc)) then begin corspacc = headercorspacc; end;
              
              CLCorspr.Code = corspacc;
              if (ReadFirstMain(CLCorspr,1,true)) then begin
                corspacc = CLCorspr.AccNumber;
              end;  
              res = AddTransRows(gTRp,MainCLb,VATCodeRec,APAccRec,bcur,CLOutp,corspacc,CLOutrw.Sum,(CLOutrw.Sum/CLOutp.Total)*CLOutp.NetVal,(CLOutrw.Sum/CLOutp.Total)*CLOutp.VATVal,
                                 frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,CLOutrw.Comment,2,CLOutrw.Objects);  
              if (res!=0) then begin
                if (res==1084) then begin
                   errstr = CLOutrw.CorspCode;
                end;
                goto LMakeTransFromCLOut;
              end;
              sumpmf = true;
            case 1:
              IVr.SerNr = CLOutrw.TransNr;
              if (ReadFirstMain(IVr,1,true)) then begin
                if (blank(IVr.ARAcc)) then begin
                  IVr.ARAcc = ARAccRec.ARAcc;
                end;
                if (GetAccName(IVr.ARAcc,tstr,60)==false) then begin
                  res = 1908;
                  goto LMakeTransFromCLOut;
                end;
                IVVc_MakeAccountDescription(IVr,tstr);
            
                res = AddTransRows(gTRp,MainCLb,VATCodeRec,APAccRec,bcur,CLOutp,IVr.ARAcc,CLOutrw.Sum,0,0,
                                   IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                                   totsum,IVr.CustCode,IVr.SerNr,tstr,1,CLOutrw.Objects);  
                if (res!=0) then begin
                  if (res==1084) then begin
                     errstr = IVr.ARAcc;
                  end;
                  goto LMakeTransFromCLOut;
                end;     
                bookvativf = true;                   
              end;
            case 2:
              VIr.SerNr = CLOutrw.TransNr;
              if (ReadFirstMain(VIr,1,true)) then begin
                if (blank(VIr.APAcc)) then begin
                  VIr.APAcc = APAccRec.APAcc;
                end;
                if (GetAccName(VIr.APAcc,tstr,60)==false) then begin
                  res = 1908;
                  goto LMakeTransFromCLOut;
                end;
                VIVc_MakeAccountDescription(VIr,tstr);
            
                res = AddTransRows(gTRp,MainCLb,VATCodeRec,APAccRec,bcur,CLOutp,VIr.APAcc,CLOutrw.Sum,0,0,
                                   VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,
                                   totsum,VIr.VECode,VIr.SerNr,tstr,2,CLOutrw.Objects);  
                if (res!=0) then begin
                  if (res==1084) then begin
                     errstr = VIr.APAcc;
                  end;
                  goto LMakeTransFromCLOut;
                end;     
                if (APAccRec.OPBookVAT!=0) then begin bookvatvif = true; end;
              end;
            case 3:
              rs = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
              tobj = CLOutp.Objects;  
              if (nonblank(tobj)) then begin
                if (nonblank(CLOutrw.Objects)) then begin
                  tobj = tobj & ",";
                end;
              end;  
              tobj = tobj & CLOutrw.Objects;
              if (nonblank(tobj)) then begin
                if (nonblank(pmrw.Objects)) then begin
                  tobj = tobj & ",";
                end;
              end;  
              tobj = tobj & pmrw.Objects;
              if (nonblank(CLOutp.Person)) then begin
                if (userreadf==false) then begin
                  USr.Code = CLOutp.Person;
                  if (ReadFirstMain(USr,1,true)) then begin              
                    persacc = USr.PersAcc;
                    persobj = USr.PersObjx;
                    if (GetAccName(persacc,persstr,60)==false) then begin
                      res = 2130;
                      goto LMakeTransFromCLOut;
                    end;  
                    userreadf = true;
                  end;
                end;         

                rs = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                if (CheckTTRPerRow("CLOutVc",persacc,persobj,dc1,taccnumber,1)) then begin end;      
                AddEuroCurncyTrRow(gTRp,persacc,persobj,"",persstr,rs,true,dc1,totsum,CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLOutrw.Sum,blankval,-1,false,taccnumber);
                userval = userval + CLOutrw.Sum;
              end;
            case 4:
              VEr.Code = CLOutrw.Company;
              if (ReadFirstMain(VEr,1,true)) then begin
              end;
              onaccacc = VEr.OnAccAccAP;
              if (blank(onaccacc)) then begin
                if (blank(VEr.VECat)) then begin
                  CCatr.Code = VEr.CustCat;
                  if (ReadFirstMain(CCatr,1,true)) then begin
                    onaccacc = CCatr.OnAccAccAP;
                  end;
                end else begin
                  VGr.Code = VEr.VECat;
                  if (ReadFirstMain(VGr,1,true)) then begin
                    onaccacc = VGr.OnAccAcc;
                  end;
                end;
              end;
              if (blank(onaccacc)) then begin
                onaccacc = APAccRec.OnAccAcc;
              end;
              if (GetAccName(onaccacc,tstr,60)==false) then begin
                res = 1916;
                goto LMakeTransFromCLOut;
              end;
              rs = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (CheckTTRPerRow("CLOutVc",onaccacc,"",dc1,taccnumber,1)) then begin end;      
              if (CLOutp.ARonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,onaccacc,"","",tstr,rs,blankval,false,dc1,totsum,
                                        CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLOutrw.Sum,blankval,
                                        CLOutrw.Company,-1,1,blankval,CLOutp.TransDate,-1,false,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,onaccacc,"","",tstr,rs,false,dc1,totsum,
                                   CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLOutrw.Sum,blankval,-1,false,taccnumber);
              end;
              if (APAccRec.PreOPBookVAT!=0) then begin bookprepvatvif = true; end;
            case 5:
              VEr.Code = CLOutrw.Company;
              if (ReadFirstMain(VEr,1,true)) then begin
              end;
              onaccacc = "";
    //          onaccacc = VEr.OnAccAcc;
              if (blank(onaccacc)) then begin
                CCatr.Code = VEr.CustCat;
                if (ReadFirstMain(CCatr,1,true)) then begin
                  onaccacc = CCatr.OnAccAcc;
                end;
              end;
              if (blank(onaccacc)) then begin
                onaccacc = ARAccRec.OnAccAcc;
              end;
              GetARPrepaymentRate(CLOutrw.TransNr,ofrrate,otorate1,otorate2,obaserate1,obaserate2);

              rs = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              ors = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,ofrrate,otorate1,otorate2,obaserate1,obaserate2,DefaultCurRoundOff);
              rs2 = MulRateToBase2(CLOutp.CurncyCode,CLOutrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              ors2 = MulRateToBase2(CLOutp.CurncyCode,CLOutrw.Sum,ofrrate,otorate1,otorate2,obaserate1,obaserate2,DefaultCurRoundOff);
              rd = ors - rs;
              rd2 = ors2 - rs2;
              if (rd>0) then begin
                if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
                  res = 1917;
                  goto LMakeTransFromCLOut;
                end;
                AddEuroCurncyTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rd,true,dc2,TotSum,
                                   bcur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rd2,blankval,-1,false,"");
              end;
              if (rd<0) then begin
                if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
                  res = 1918;
                  goto LMakeTransFromCLOut;
                end;
                AddEuroCurncyTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rd,true,dc2,TotSum,
                                   bcur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rd2,blankval,-1,false,"");
              end;          
              if (GetAccName(onaccacc,tstr,60)==false) then begin
                res = 1916;
                goto LMakeTransFromCLOut;
              end;
              if (CheckTTRPerRow("CLOutVc",onaccacc,"",dc1,taccnumber,1)) then begin end;      
              if (CLOutp.ARonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,onaccacc,"","",tstr,ors,blankval,false,dc1,totsum,
                                        CLOutp.CurncyCode,ofrrate,otorate1,otorate2,obaserate1,obaserate2,CLOutrw.Sum,blankval,
                                        CLOutp.CUCode,-1,1,blankval,CLOutp.TransDate,-1,false,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,onaccacc,"","",tstr,ors,false,dc1,totsum,
                                   CLOutp.CurncyCode,ofrrate,otorate1,otorate2,obaserate1,obaserate2,CLOutrw.Sum,blankval,-1,false,taccnumber);
              end;                         
            case 6:
              CLCorspr.Code = CLOutrw.CorspCode;
              if (ReadFirstMain(CLCorspr,1,true)) then begin
                corspacc = CLCorspr.AccNumber;
              end;  
              if (blank(corspacc)) then begin corspacc = headercorspacc; end;
              res = AddTransRows(gTRp,MainCLb,VATCodeRec,APAccRec,bcur,CLOutp,corspacc,CLOutrw.Sum,(CLOutrw.Sum/CLOutp.Total)*CLOutp.NetVal,(CLOutrw.Sum/CLOutp.Total)*CLOutp.VATVal,
                                 frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,CLOutrw.Comment,2,CLOutrw.Objects);  
              if (res!=0) then begin
                if (res==1084) then begin
                   errstr = CLOutrw.CorspCode;
                end;
                goto LMakeTransFromCLOut;
              end;
              sumpmf = true;
            case 7:
              CLCorspr.Code = CLOutrw.CorspCode;
              if (ReadFirstMain(CLCorspr,1,true)) then begin
                corspacc = CLCorspr.AccNumber;
              end;  
              if (blank(corspacc)) then begin corspacc = headercorspacc; end;
              res = AddTransRows(gTRp,MainCLb,VATCodeRec,APAccRec,bcur,CLOutp,corspacc,CLOutrw.Sum,(CLOutrw.Sum/CLOutp.Total)*CLOutp.NetVal,(CLOutrw.Sum/CLOutp.Total)*CLOutp.VATVal,
                                 frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,CLOutrw.Comment,2,CLOutrw.Objects);  
              if (res!=0) then begin
                if (res==1084) then begin
                   errstr = CLOutrw.CorspCode;
                end;
                goto LMakeTransFromCLOut;
              end;
              sumpmf = true;
          end;
          rs = CLOutrw.Sum;
          rs = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          tobj = CLOutrw.Objects;
          if (nonblank(tobj)) then begin
            if (nonblank(pmrw.Objects)) then begin
              tobj = tobj & "," & pmrw.Objects;
            end;
          end else begin
            tobj = pmrw.Objects;
          end; 
          if (CheckTTRPerRow("CLOutVc",pmrw.AccNr,tobj,dc1,taccnumber,1)) then begin end;      
          AddEuroCurncyTrRow(gTRp,pmrw.AccNr,tobj,"",pmtstr,rs,false,dc2,totsum,
                           CLOutp.CurncyCode,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,CLOutrw.Sum,nilv,-1,false,taccnumber);
        case 2:
          switch (CLOutrw.Type) begin
            case 2:
              VIr.SerNr = CLOutrw.TransNr;
              if (ReadFirstMain(VIr,1,true)) then begin
                rs = MulRateToBase1(VIr.CurncyCode,CLOutrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                if (CheckTTRPerRow("CLOutVc",VIr.APAcc,CLOutp.Objects,true,taccnumber,1)) then begin end;      
                AddEuroCurncyTrRow(gTRp,VIr.APAcc,CLOutp.Objects,"",tstr,rs,false,true,totsum,
                                   VIr.CurncyCode,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,totsum,nilv,-1,false,taccnumber);

                rs = MulRateToBase1(CLOutp.CurncyCode,CLOutrw.Sum,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
                switch (VIr.ExportFlag) begin
                  case 0:
                    accstr = APAccRec.PERebAcc;
                  case 1:
                    accstr = APAccRec.EUPERebAcc;
                  case 2:
                    accstr = APAccRec.ExpPERebAcc;
                  case 4:
                    accstr = APAccRec.EUPERebAcc;
                  case 5:
                    accstr = APAccRec.ExpPERebAcc;
                end;

                if (GetAccName(accstr,tstr,60)==false) then begin
                  res = 2132;
                  goto LMakeTransFromCLOut;
                end;
                if (CheckTTRPerRow("CLOutVc",accstr,CLOutrw.Objects,dc2,taccnumber,1)) then begin end;      
                AddEuroTrRow(gTRp,accstr,CLOutrw.Objects,"",tstr,rs,CLOutp.BaseRate1,CLOutp.BaseRate2,false,dc2,totsum,false,taccnumber,"","");
                if (nonblank(APAccRec.PVATBAcc)) then begin
                  if (VIr.VATVal==0) then begin
                    vatval = VIr.CalcVATVal;
                  end else begin
                    vatval = VIr.VATVal;
                  end;
                  if (vatval!=0) then begin
                    v = CLOutrw.Sum*vatval;
                    v = v/VIr.PayVal;
                    v = Round(v,DefaultRoundMode);
                    if (GetVATLaw!=13) then begin//vatFinnish
                      if (nonblank(APAccRec.PVATBAcc)) then begin
                        ftxt = APAccRec.PVATBAcc;
                      end else begin
                        ftxt = accstr;
                      end;
                    end else begin
                      ftxt = accstr;
                    end;
                    rs = MulRateToBase1(CLOutp.CurncyCode,v,CLOutp.FrRate,CLOutp.ToRateB1,CLOutp.ToRateB2,CLOutp.BaseRate1,CLOutp.BaseRate2,DefaultCurRoundOff);
                    if (GetAccName(ftxt,tstr,60)==false) then begin
                      res = 2132;
                      goto LMakeTransFromCLOut;
                    end;
                    if (CheckTTRPerRow("CLOutVc",ftxt,"",dc1,taccnumber,1)) then begin end;      
                    AddEuroTrRow(gTRp,ftxt,"","",tstr,rs,CLOutp.BaseRate1,CLOutp.BaseRate2,true,dc1,totsum,false,taccnumber,"","");
                    if (GetAccName(APAccRec.PVATBAcc,tstr,60)==false) then begin
                      res = 2132;
                      goto LMakeTransFromCLOut;
                    end;
                    if (CheckTTRPerRow("CLOutVc",APAccRec.PVATBAcc,"",dc2,taccnumber,1)) then begin end;      
                    AddEuroTrRow(gTRp,APAccRec.PVATBAcc,"",AddVATCodeToVATAccRows(CLOutp.VATCode),tstr,rs,CLOutp.BaseRate1,CLOutp.BaseRate2,false,dc2,totsum,false,taccnumber,"","");
                  end;
                end;
              end;
          end;
      end;
    end;
  end else begin
    res = AddTransRows(gTRp,MainCLb,VATCodeRec,APAccRec,bcur,CLOutp,headercorspacc,CLOutp.Total,CLOutp.NetVal,CLOutp.VATVal,
                       frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,"",2,"");  
    if (res!=0) then begin
      if (res==1084) then begin
         errstr = CLOutp.CorspCode;
      end;
      goto LMakeTransFromCLOut;
    end;
    rs = CLOutp.Total - userval;
    rs = MulRateToBase1(CLOutp.CurncyCode,CLOutp.Total-userval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    if (CheckTTRPerRow("CLOutVc",pmrw.AccNr,pmrw.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroCurncyTrRow(gTRp,pmrw.AccNr,pmrw.Objects,"",pmrw.Comment,rs,false,dc2,totsum,
                       CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLOutp.Total-userval,nilv,-1,false,taccnumber);
  end;  

  if (bookvativf) then begin
    if (ARAccRec.IPBookVAT!=0) then begin
      rwcnt = MatRowCnt(VATCodeRec);
      if (rwcnt==0) then begin
        res = 1902;
        goto LMakeTransFromCLOut;
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VATCodeRec,i,VATCoderw);
        if (CLOutp.VATCode==VATCoderw.VATCode) then begin
          goto L222;
        end;
      end;
      MatRowGet(VATCodeRec,0,VATCoderw);
L222:;
      rd = MulRateToBase1(CLOutp.CurncyCode,CLOutp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      nv = MulRateToBase1(CLOutp.CurncyCode,CLOutp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      nv = nv - rd;
      if (GetAccName(VATCoderw.PaySalesVATAcc,tstr,60)==false) then begin
        res = 2170;
        goto LMakeTransFromCLOut;
      end;
      if (CheckTTRPerRow("CLOutVc",VATCoderw.PaySalesVATAcc,"",dc2,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,VATCoderw.PaySalesVATAcc,"",AddVATCodeToVATAccRows(CLOutp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
      if (GetAccName(VATCoderw.SalesVATAcc,tstr,60)==false) then begin
        res = 2171;
        goto LMakeTransFromCLOut;
      end;
      if (CheckTTRPerRow("CLOutVc",VATCoderw.SalesVATAcc,"",dc1,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,VATCoderw.SalesVATAcc,"",AddVATCodeToVATAccRows(CLOutp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");
    end;
  end;

  if (bookvatvif) then begin
    rwcnt = MatRowCnt(VATCodeRec);
    if (rwcnt==0) then begin
      res = 1902;
      goto LMakeTransFromCLOut;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VATCodeRec,i,VATCoderw);
      if (CLOutp.VATCode==VATCoderw.VATCode) then begin
        goto L221;
      end;
    end;
    MatRowGet(VATCodeRec,0,VATCoderw);
L221:;
    rd = MulRateToBase1(CLOutp.CurncyCode,CLOutp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = MulRateToBase1(CLOutp.CurncyCode,CLOutp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = nv - rd;
    vatacc = VATCoderw.PayPurchVATAcc;
    if (blank(vatacc)) then begin
      vatacc = APAccRec.VATAcc;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2172;
      goto LMakeTransFromCLOut;
    end;
    if (CheckTTRPerRow("CLOutVc",vatacc,"",dc2,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,vatacc,"",AddVATCodeToVATAccRows(CLOutp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");
    if (GetAccName(VATCoderw.PurchVATAcc,tstr,60)==false) then begin
      res = 2171;
      goto LMakeTransFromCLOut;
    end;
    if (CheckTTRPerRow("CLOutVc",VATCoderw.PurchVATAcc,"",dc1,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,VATCoderw.PurchVATAcc,"",AddVATCodeToVATAccRows(CLOutp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
  end;
  if (bookprepvatvif) then begin
    vatobjstr = ""; 
    if (APAccRec.VATUseObj!=0) then begin
      vatobjstr = CLOutp.Objects;
    end;    
    rd = MulRateToBase1(CLOutp.CurncyCode,CLOutp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = MulRateToBase1(CLOutp.CurncyCode,CLOutp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = nv - rd;

    vatacc = ""; 
//    vatacc = GetPayPurchVATAcc(CLOutp.VATCode,VATCodeRec);//Jon says it is bug
    if (blank(vatacc)) then begin        
      vatacc = APAccRec.VATAcc;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2171;
      goto LMakeTransFromCLOut;
    end;
    if (CheckTTRPerRow("CLOutVc",vatacc,vatobjstr,dc1,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,vatacc,vatobjstr,"",tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");
    if (GetAccName(APAccRec.OnAccVAT,tstr,60)==false) then begin
      res = 2170;
      goto LMakeTransFromCLOut;
    end;
    if (CheckTTRPerRow("CLOutVc",APAccRec.OnAccVAT,vatobjstr,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,APAccRec.OnAccVAT,vatobjstr,"",tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
  end;
  
  /*  
  if (GetAccName(pmrw.AccNr,tstr,60)==false) then begin
    res = 2191;
    goto LMakeTransFromCLOut;
  end;    
  rs = CLOutp.Total - userval;
  rs = MulRateToBase1(CLOutp.CurncyCode,CLOutp.Total-userval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  AddEuroCurncyTrRow(gTRp,pmrw.AccNr,pmrw.Objects,"",pmrw.Comment,rs,false,dc2,totsum,
                     CLOutp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLOutp.Total-userval,nilv,-1,false,"");
*/  
  TRSumup(gTRp,nilv);
  AddTransAutoTransRows(gTRp);
  res = 0;  
LMakeTransFromCLOut:;
  MakeTransFromCLOut = res;
  RETURN;
END;
