remote function Boolean IVVc_PasteCredOfficialSerNr(var record IVVc,Integer,var string);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
external updating function Boolean IVDClassivcashcommandOnEnterKey(Integer,Integer);
external function Integer ERecordStatus(string,string,LongInt,string,var string);
external procedure SpecialVAT2(val,var val);
external function Integer VATCalcRule(string);
external function Integer GetVATLaw();
external procedure CalculateIVVcPoints(var record IVVc);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean FindWHITTax(string,Date,var record WHITVc);
external function roundmode SetRoundModeD(Integer);
external procedure InvoiceCalculateFreightWeight(record IVVc,var val,var val,var val);
remote procedure IVVc_PasteCurncyCode(var record IVVc,string,Integer,Boolean,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindRPCUTax(string,Date,var record RPCUTaxVc);
external function roundmode DefaultRoundMode();
remote function Boolean SerialNrForOneItem(string,var record SerBalVc);
external procedure RecalcIVSubtotal(var record IVVc);
external function val FindTAX1(string,val,Integer,Integer);
external procedure SpecialVAT(string,var val);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure MulM4ProcVal(val,val,var val);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external function val FindTAX2(val,val,Integer);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external function val FindVAT(string,val,Integer,Integer);
remote procedure IVVc_CalculatePayDate(var record IVVc);
remote function Boolean IVVc_PasteOrdRow(var record IVVc,Integer,var string);
external function Boolean TouchScreenLook();
remote function Integer IVVc_PasteGiftCertificate(var record IVVc,Integer,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
remote procedure IVVc_PasteUnitFactPrice(var record IVVc,Integer);
remote function Boolean IVVc_PasteUnitFactQuant(var record IVVc,Integer);
remote procedure IVVc_PasteUnitCode(var record IVVc,Integer);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean AllowCurChange(string,Boolean);
remote procedure IVSumup(var record IVVc,Boolean);
remote function Boolean FindLastInvoiceRowForSerial(LongInt,string ,string,var row IVVc);
external function Integer ArgEInvLock(record IVVc,integer);
external function Integer GetArgIVType(integer,string);

global
function Boolean IVDClassNoInterestFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  IVDClassNoInterestFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassNoRemndrFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  IVDClassNoRemndrFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassNoColectionFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  IVDClassNoColectionFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassDisputedFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  if (UserCanAction("AllowDispute",true)==false) then begin res = false; end;
  IVDClassDisputedFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassUpdStockFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVVc IVr;

  res = true;
  GetWindowRecord(wn,IVr);  
  if (WindowState(wn)==Rs_insert) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end else begin
      res = UserCanAction("ChangingUpdateStockFlag",true);
    end;
  end;  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end else begin
      res = UserCanAction("ChangingUpdateStockFlag",true);
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end else begin
      res = UserCanAction("ChangingUpdateStockFlag",true);
    end;
  end;    
  IVDClassUpdStockFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassAcceptanceStatusButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record IVVc IVr;

  res = false;
  if (value==kAcceptanceStateNotRequested) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.AcceptanceStatus==kAcceptanceStateRejected) then begin
      res = EditingAcceptanceRejectedAllowed(kAcceptanceIV,"IVVc",IVr.SerNr,IVr.AcceptanceStatus,IVr.CustCode)==0;
    end;
  end;
  IVDClassAcceptanceStatusButtonAction = res;
  return;
end;

global
function Boolean IVDClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVVc IVr;

  res = true;
  GetWindowRecord(wn,IVr);  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end;
  end;    
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  IVDClassExportFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVAcceptanceStarted(record IVVc IVr)
begin
  Boolean res;

  res = false;
  if (IVr.AcceptanceStatus>=kAcceptanceStatePending) then begin
    res = true;
  end;
  IVAcceptanceStarted = res;
  return;
end;

function Boolean ArgEInvActiveField(record IVVc IVr,integer locklevel,string fieldname,integer rownr)
begin
  Boolean res;
  Integer ivtype;
  Boolean exporttype;
  record InternetEnablerBlock IEb;
  string 255 tstr;
  
  
  switch (locklevel) begin
    case kArgentinianInvoiceLockNone:
      res = true;
    case kArgentinianInvoiceLockFull:
      res = false;
    case kArgentinianInvoiceLockNormal:
      res = false;
    case kArgentinianInvoiceLockPartial:
      switch (fieldname) begin
        case "Objects": res = true; //both header & matrix
        case "SalesAcc": res = true; //matrix
      end;
  end;
  if (res==false and (locklevel==kArgentinianInvoiceLockNormal or locklevel==kArgentinianInvoiceLockPartial)) then begin //common rules for locklevel Normal & Partial
    exporttype = (GetArgIVType(IVr.InvType,IVr.OfficialSerNr)>=19);
    switch (fieldname) begin
      case "SalesMan": res = (UserCanAction("AllowSalesmanChange",false));
      case "LangCode": res = (exporttype==false);
      case "BankCode": res = (exporttype==false);
      case "ShipDeal": res = (exporttype==false);
      case "Region": res = (exporttype==false);
      case "PayDate": res = exporttype;
      case "LastRemndr": res = true;
      case "LastRemDate": res = true;
      case "InvComment": res = true;
      case "ShipAddr0": res = true;
      case "ShipAddr1": res = true;
      case "ShipAddr2": res = true;
      case "ShipAddr3": res = true;
      case "DelAddr3": res = true;
      case "DelAddr4": res = true;
      case "ShipMode": res = true;
      case "ClientContact": res = true;
      case "Addr0": res = true;
      case "Addr1": res = true;
      case "Addr2": res = true;
      case "Addr3": res = true;
      case "InvAddr3": res = true;
      case "InvAddr4": res = true;
      case "Phone": res = true;
      case "Fax": res = true;
      case "IntCode": res = true;
      case "Status": res = true;
    end;
  end;
  if (res==false and (locklevel==kArgentinianInvoiceLockFull)) then begin
    switch (fieldname) begin
      case "CAE":
        if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
          BlockLoad(IEb);
          if (ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",tstr)==6) then begin        
            res = true;
          end;
        end;
      case "CAEExpiry":
        if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
          BlockLoad(IEb);
          if (ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",tstr)==6) then begin        
            res = true;
          end;
        end;
    end;
  end;
  ArgEInvActiveField = res;
  return;
end;

function Boolean ActiveField(record IVVc IVr,record IVVc IV2r,Integer rownr,string fieldname,Integer wnst,Boolean updatef)
BEGIN
  Boolean res;
  row IVVc IVrw;
  record AccBlock ARAccb;
  record CYBlock CYRec;
  record RahaxiBlock Rahaxib; 
  row IVVc lastIVrw;
  record InternetEnablerBlock IEb;
  string 255 tstr;
  
  res = true;
  if (IVAcceptanceStarted(IVr)) then begin res = false; goto LIVDClassActiveEditField; end;
  switch (fieldname) begin
//    case "CreditedRow": res = false;
    case "TAX2Prc": res = false;
    case "CuAccCode":
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypePerceptionTax) then begin res = false; end;
      end;
    case "rowGP": res = false;
    case "SerNr": 
      BlockLoad(ARAccb);
      switch (wnst) begin
        case Rs_update:
          if (ARAccb.ChronologyforInvNo!=0) then begin res = false; end;
          if (IVr.JobNr>0) then begin res = false; end;
          if (IV2r.OKFlag==0) then begin
            if (UserCanAction("AllowIVSerNrChange",true)==false) then begin res = false; end;
          end else begin
            res = false; 
          end;
        otherwise
          if (UserCanAction("AllowIVSerNrChange",true)==false) then begin res = false; end;
      end;
    case "TransDate": 
      BlockLoad(CYRec);
      if (CYRec.AllowTransDateEdit==0) then begin
        res = false;
      end;
      if (IVr.CredManNr>0) then begin res = false; end;
    case "PRCode": 
      if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin res = false; end;
    case "FrRate": 
      if (AllowCurChange(IVr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB1": 
      if (AllowCurChange(IVr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB2": 
      if (AllowCurChange(IVr.CurncyCode,false)==false) then begin res = false; end;
    case "BaseRate1": 
      if (AllowCurChange(IVr.CurncyCode,true)==false) then begin res = false; end;
    case "BaseRate2": 
      if (AllowCurChange(IVr.CurncyCode,true)==false) then begin res = false; end;
    case "PriceList": 
      if (UserCanAction("ChangePrices",true)==false) then begin res = false; end;
    case "Recepy": 
      if (IVr.OrderNr!=-1) then begin res = false; end;
    case "Spec": 
      BlockLoad(ARAccb);
      if (UserCanAction("ChangeIVItemSpec",ARAccb.CashSalesToFiscalControlUnit==0)==false) then begin res = false; end;
    case "BasePrice": 
      if (UserCanAction("ChangingCostOnInvoiceRow",true)==false) then begin res = false; end;
    case "BasePriceB2": 
      if (UserCanAction("ChangingCostOnInvoiceRow",true)==false) then begin res = false; end;
    case "Price": 
      BlockLoad(ARAccb);
      if (UserCanAction("ChangeUnitPrices",ARAccb.CashSalesToFiscalControlUnit==0)==false) then begin res = false; end;
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (res) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==6) then begin res = false; end;
      end;
      
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "vRebate": 
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (res) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "ArtCode":
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
            goto LIVDClassActiveEditField;
          end;
        end;
      end;
      MatRowGet(IVr,rownr,IVrw);
      if (TouchScreenInterface) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (UserCanAction("AllowIVTSRowsDelete",true)==false) then begin
            res = false;
            goto LIVDClassActiveEditField;
          end;
        end;
      end;
      if (IVrw.OrdRow>=0) then begin res = false; end;
    case "Quant": 
      MatRowGet(IVr,rownr,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
      end;
      if (TouchScreenInterface) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (UserCanAction("AllowIVTSRowsDelete",true)==false) then begin
            res = false;
          end;
        end;
      end;
      if (IVr.OrderNr>0) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (IVrw.OrdRow>=0) then begin
            if (UserCanAction("DisallowChangeIVQtyFromOR",false)==true) then begin
              res = false;
            end;
          end;
        end;
      end;
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "CreditCard":
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
          //BlockLoad(Rahaxib);
          //res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
          res = blank(IVrw.AuthorizationCode);
        end;
      end;
    case "AuthorizationCode":
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
          //BlockLoad(Rahaxib);
          //res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
          res = blank(IVrw.AuthorizationCode);
        end;
      end;
    case "Sum":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypePerceptionTax) then begin res = false; end;
      if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin res = false; end;
      if (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) then begin res = false; end;
      if (IVrw.stp<kInvoiceRowTypeGiftVoucherSold) then begin
        if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
      end;
      if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
        //BlockLoad(Rahaxib);
        //res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
        if (rownr>=0) then begin
          MatRowGet(IVr,rownr,IVrw);
          res = blank(IVrw.AuthorizationCode);
        end;
      end;
      if ((IVr.InvType!=kInvoiceTypeCredit) and (IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVrw.stp==kInvoiceRowTypeDownpayment) and (nonblank(IVr.PRCode))) then begin res = false; end;
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "RetnValue": 
      if (IVr.InvType!=kInvoiceTypeCash) then begin res = false; end;
    case "InvDate": 
      BlockLoad(ARAccb);
      if (ARAccb.ChronologyforInvNo!=0) then begin res = false; end;
      if (IVr.CredManNr>0) then begin res = false; end;
      if (res) then begin
        switch (wnst) begin
          case Rs_update:
            if (IV2r.OKFlag==0) then begin
              if (UserCanAction("AllowIVInvDateChange",true)==false) then begin res = false; end;
            end;
          otherwise
            if (UserCanAction("AllowIVInvDateChange",true)==false) then begin res = false; end;
        end;
      end;
    case "FIFO": 
      if (IVr.OrderNr>0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.OrdRow>=0) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "FIFORowVal": 
      if (IVr.OrderNr>0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.OrdRow>=0) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "SalesMan": 
      if (UserCanAction("DisallowSalesmanChange",false)) then begin
        res = false;
      end;
    case "Location": 
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVr.OrderNr>0) then begin
          if (IVrw.OrdRow!=-1) then begin
            res = false;
          end;
        end;
      end else begin
      end;
    case "WHTax":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin res = false; end;
    case "SalesAcc":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin res = false; end;
      if (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) then begin res = false; end;
    case "VATCode":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) then begin res = false; end;
    case "CAE":
      if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
        BlockLoad(IEb);
        if (ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",tstr)==6) then begin        
          res = true;
        end;
      end;
    case "CAEExpiry":
      if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
        BlockLoad(IEb);
        if (ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",tstr)==6) then begin        
          res = true;
        end;
      end;
  end;
LIVDClassActiveEditField:;  
  ActiveField = res;
  RETURN;
END;

global
function Boolean IVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IVVc IVr;
  record IVVc IV2r;
  row IVVc IVrw;
  Integer arglock;
  Integer nwn;
  	  
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LIVDClassActiveEditField;
    end;
  end;
  if (wnst!=Rs_update) then begin
    GetWindowRecord(wn,IVr);
    res = ActiveField(IVr,IVr,rownr,fieldname,wnst,false);
  end else begin
    res = false;
    GetPrevWindowRecord(wn,IVr);
    arglock = ArgEInvLock(IVr,wn);

    if (arglock!=kArgentinianInvoiceLockNone) then begin
      res = ArgEInvActiveField(IVr,arglock,fieldname,rownr);
      goto LIVDClassActiveEditField;
    end;
    if (IVr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "SalesMan": 
          if (UserCanAction("AllowSalesmanChange",false)) then begin
            res = true;
          end;
        case "PayDate": res = true;
        case "LastRemndr": res = true;
        case "LastRemDate": res = true;
        case "MachineName": res = true;
        case "InvComment": res = true;
        case "ShipAddr0": res = GetVATLaw!=vatPortuguese;
        case "ShipAddr1": res = GetVATLaw!=vatPortuguese;
        case "ShipAddr2": res = GetVATLaw!=vatPortuguese;
        case "ShipAddr3": res = GetVATLaw!=vatPortuguese;
        case "DelAddr3": res = GetVATLaw!=vatPortuguese;
        case "DelAddr4": res = GetVATLaw!=vatPortuguese;
        case "VATNr": res = GetVATLaw!=vatPortuguese;
        case "ShipMode": res = GetVATLaw!=vatPortuguese;
        case "ShipDeal": res = GetVATLaw!=vatPortuguese;
        case "ClientContact": res = true;
        case "Addr0": res = GetVATLaw!=vatPortuguese;
        case "Addr1": res = GetVATLaw!=vatPortuguese;
        case "Addr2": res = GetVATLaw!=vatPortuguese;
        case "Addr3": res = GetVATLaw!=vatPortuguese;
        case "InvAddr3": res = GetVATLaw!=vatPortuguese;
        case "InvAddr4": res = GetVATLaw!=vatPortuguese;
        case "LangCode": res = true;
        case "Phone": res = true;
        case "Fax": res = true;
        case "IntCode": res = true;
        case "BankCode": res = true;
        case "Status": res = true;
      end;
    end else begin
      GetWindowRecord(wn,IVr);
      GetPrevWindowRecord(wn,IV2r);
      res = ActiveField(IVr,IV2r,rownr,fieldname,wnst,true);
    end;
  end;
  
LIVDClassActiveEditField:;
  IVDClassActiveEditField = res;
  RETURN;
END;

