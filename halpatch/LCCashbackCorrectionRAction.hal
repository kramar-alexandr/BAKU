globalupdating function LongInt LCCashbackCorrectionVcRecordCheck(var record LCCashbackCorrectionVc LCbCorr,record LCCashbackCorrectionVc LCbCor2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  record LCMemberLevelVc LCMLr;  record LCCashbackCorrectionVc loopLCbCorr;  Boolean TrHs,testf;  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update     if (Blank(LCbCorr.LCMLevel)) then begin    RecordCheckError(1854,"",-1,"LCMLevel");          res = -1;     goto LLCCashbackCorrectionVcRecordCheck;  end;     if (NonBlank(LCbCorr.LCMLevel)) then begin    LCMLr.Code = LCbCorr.LCMLevel;    if (ReadFirstMain(LCMLr,1,true)==false) then begin      RecordCheckError(9588,"",-1,"LCMLevel");            res = -1;       goto LLCCashbackCorrectionVcRecordCheck;    end;  end;   if (BlankDate(LCbCorr.FromDate) and NonBlankDate(LCbCorr.ToDate)) then begin    RecordCheckError(1854,"",-1,"FromDate");          res = -1;     goto LLCCashbackCorrectionVcRecordCheck;  end;  if (NonBlankDate(LCbCorr.FromDate) and BlankDate(LCbCorr.ToDate)) then begin    RecordCheckError(1854,"",-1,"ToDate");          res = -1;     goto LLCCashbackCorrectionVcRecordCheck;  end;    //!!!!!!period overlapping checks work fine if FromDate and ToDate are both blank or nonBlank!!!!!!!!  if (NonBlankDate(LCbCorr.FromDate) and NonBlankDate(LCbCorr.ToDate)) then begin    if (LCbCorr.FromDate>LCbCorr.ToDate) then begin      RecordCheckError(14642," " & USetStr(7254),-1,"FromDate");            res = -1;       goto LLCCashbackCorrectionVcRecordCheck;    end;    TrHs = true;    loopLCbCorr.LCMLevel = LCbCorr.LCMLevel;    loopLCbCorr.ToDate = LCbCorr.ToDate;    while (LoopBackKey("ToDate",loopLCbCorr,2,TrHs)) begin      testf = true;      if (loopLCbCorr.LCMLevel!=LCbCorr.LCMLevel) then begin TrHs = false; testf = false; end;      if (LCbCorr.FromDate>loopLCbCorr.ToDate or LCbCorr.ToDate<loopLCbCorr.FromDate) then begin TrHs = false; testf = false; end;      if (loopLCbCorr.SerNr==LCbCorr.SerNr) then begin testf = false; end;      if (loopLCbCorr.CustomerPercentLevel!=LCbCorr.CustomerPercentLevel) then begin testf = false; end;      if (testf) then begin        //TrHs = false;        if (DateInRange(loopLCbCorr.ToDate,LCbCorr.FromDate,LCbCorr.ToDate) or LCbCorr.FromDate==loopLCbCorr.ToDate or LCbCorr.ToDate==loopLCbCorr.ToDate) then begin           RecordCheckError(35107," #" & loopLCbCorr.SerNr,-1,"ToDate");                 res = -1;            goto LLCCashbackCorrectionVcRecordCheck;              end;      end;    end; RESETLOOP(loopLCbCorr);        TrHs = true;    loopLCbCorr.LCMLevel = LCbCorr.LCMLevel;    loopLCbCorr.FromDate = LCbCorr.ToDate;    while (LoopBackKey("FromDate",loopLCbCorr,2,TrHs)) begin      testf = true;      if (loopLCbCorr.LCMLevel!=LCbCorr.LCMLevel) then begin TrHs = false; testf = false; end;      if (LCbCorr.FromDate>loopLCbCorr.ToDate or LCbCorr.ToDate<loopLCbCorr.FromDate) then begin TrHs = false; testf = false; end;      if (loopLCbCorr.SerNr==LCbCorr.SerNr) then begin testf = false; end;      if (loopLCbCorr.CustomerPercentLevel!=LCbCorr.CustomerPercentLevel) then begin testf = false; end;      if (testf) then begin        //TrHs = false;        if (DateInRange(loopLCbCorr.FromDate,LCbCorr.FromDate,LCbCorr.ToDate) or LCbCorr.FromDate==loopLCbCorr.FromDate or LCbCorr.ToDate==loopLCbCorr.FromDate) then begin           RecordCheckError(35107," #" & loopLCbCorr.SerNr,-1,"FromDate");                 res = -1;            goto LLCCashbackCorrectionVcRecordCheck;              end;      end;    end; RESETLOOP(loopLCbCorr);  end else begin    loopLCbCorr.LCMLevel = LCbCorr.LCMLevel;    loopLCbCorr.FromDate = LCbCorr.ToDate;    if (ReadLastKey("ToDate",loopLCbCorr,2,true) and BlankDate(loopLCbCorr.ToDate)) then begin      RecordCheckError(35107," #" & loopLCbCorr.SerNr,-1,"FromDate");            res = -1;       goto LLCCashbackCorrectionVcRecordCheck;       end;    end;    if (LCbCorr.SerNr==-1) then begin    LCbCorr.SerNr = NextSerNr("LCCashbackCorrectionVc",CurrentDate,-1,false,"");  end;  LLCCashbackCorrectionVcRecordCheck:;    LCCashbackCorrectionVcRecordCheck = res;    RETURN;end;globalfunction LongInt LCCashbackCorrectionVcRecordDuplicate(var record LCCashbackCorrectionVc LCbCorr,record LCCashbackCorrectionVc LCbCor2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  LCbCorr.SerNr = -1;    LCCashbackCorrectionVcRecordDuplicate = res;  RETURN;END;