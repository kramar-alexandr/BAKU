external function string 20 ObjectsExist(string);//vg

global
function Boolean TestValuePack(Integer pn)
BEGIN
  record ModuleBlock vpb;
  Boolean res;

//  if (localDBisOpen) then begin
  BlockLoad(vpb);
  switch (pn ) begin
    case 1: res = (vpb.VP1!=0);
    case 2: res = (vpb.VP2!=0);
    case 3: res = (vpb.VP3!=0);
    case 4: res = (vpb.VP4!=0);
    case 5: res = (vpb.VP5!=0);
    case 6: res = (vpb.VP6!=0);
    case 7: res = (vpb.VP7!=0);
    case 8: res = (vpb.VP8!=0);
    case 9: res = (vpb.VP9!=0);
    case 10: res = (vpb.VP10!=0);
    case 11: res = (vpb.VP11!=0);
    case 12: res = (vpb.VP12!=0);
  end;
//  end;
  TestValuePack = res;
  RETURN;
END;

global
updating function LongInt LocationVcRecordCheck(var record LocationVc Locationr,record LocationVc Location2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer cnt;  
  string 255 tstr;
  record AccVc Accr;
  record LocGrVc LocGrr;
  record PISVc PISr;
  record GlobalLocationVc GLocr;
  transaction Boolean gSynchServToOfflineSettingsm;

  res = 0;
  if(stat>0)then begin
  	GLocr.Code = Locationr.Code;
  	if(readfirstmain(GLocr,1,true))then begin
  		if(GLocr.Company!=currentcompany)then begin
				RecordCheckError(1058,"",-1,"Code");      
				res = -1; 
				goto LLocationVcRecordCheck;
			end;
    end;
  end;
  
  if (len(Locationr.Code)<=0) then begin
    RecordCheckError(1058,"",-1,"Code");      
    res = -1; 
    goto LLocationVcRecordCheck;
  end;
  if (stat==Rs_update) then begin
    if (Location2r.RequirePos!=0) and (Locationr.RequirePos==0) then begin
      PISr.Location = Locationr.Code;
      if (ReadFirstKey("Location",PISr,1,true)) then begin
        RecordCheckError(22039,"",-1,"Code");      
        res = -1; 
        goto LLocationVcRecordCheck;
      end;
    end;
  end;
  if (ProgramType==typRiigiTarkvara) then begin
    cnt = 1;
    if (CountRecords("LocationVc")>cnt) then begin
      RecordCheckError(1426,"",-1,"Code");      
      res = -1; 
      goto LLocationVcRecordCheck;
    end;
  end;
  if (ProgramType==typOffice2) then begin
    if (TestValuePack(3)==false) then begin
      cnt = 1;  
      if (CountRecords("LocationVc")>cnt) then begin
        RecordCheckError(1426,"",-1,"Code");      
        res = -1; 
        goto LLocationVcRecordCheck;
      end;
    end;  
  end;      
  if (nonblank(Locationr.Group)) then begin
    if (gSynchServToOfflineSettingsm==false) then begin
      LocGrr.Code = Locationr.Group;
      if (!ReadFirstMain(LocGrr,1,true)) then begin
        RecordCheckError(1290,"",-1,"Group");      
        res = -1;
        goto LLocationVcRecordCheck;
      end;
    end;
  end;
  if (nonblank(Locationr.Objects)) then begin
    tstr = ObjectsExist(Locationr.Objects);
    if (nonblank(tstr)) then begin
      RecordCheckError(1043," " & tstr,-1,"Objects");      
      res = -1;
      goto LLocationVcRecordCheck;
    end;
  end;
  if (nonblank(Locationr.StockAcc)) then begin
    Accr.AccNumber = Locationr.StockAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,Locationr.StockAcc,-1,"StockAcc");      
      res = -1;
      goto LLocationVcRecordCheck;
    end;
  end;    
LLocationVcRecordCheck:;
  LocationVcRecordCheck = res;
  RETURN;
END;

global 
function Boolean LocationVcRecordShouldBeSynchronised(record LocationVc Locationr,string tagstr)
begin
  Boolean res;
  
  res = true;
  LocationVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean LocationVcRecordSync(record LocationVc Locationr,string tagstr)
begin
  Boolean res;
  
  res = true;
  LocationVcRecordSync = res;
  return;
end;

global
function LongInt LocationVcRecordRemoveTest(var record LocationVc Locationr,record LocationVc Location2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record ItemStatusVc ISr;
  Boolean testf;

  res = 1;
  if (testf==false) then begin
    ISr.Location = Locationr.Code;
    testf = ReadFirstKey("Location",ISr,1,true);
  end;
  if (testf) then begin
    if (long3>0) then begin MessageBox(1560,""); end;
    res = 0;
  end;
LLocationVcRecordRemoveTest:;
  LocationVcRecordRemoveTest = res; 
  return;
end;

global
updating function LongInt LocationVcRecordImport(var record LocationVc Locationr,record LocationVc Location2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record LocationVc whmLocr;
  
  whmLocr.Code = Locationr.Code & "??";
  if (ReadFirstMain(whmLocr,1,true)) then begin
    Locationr.WHMPalletArea = whmLocr.WHMPalletArea;
    Locationr.WHMDefPUPosCode = whmLocr.WHMDefPUPosCode;
    Locationr.WHMDefProdPosCode = whmLocr.WHMDefProdPosCode;
    Locationr.WHMPickArea = whmLocr.WHMPickArea;
    Locationr.WHMWraperPosCode = whmLocr.WHMWraperPosCode;
    Locationr.WHMDeliveryPosCode = whmLocr.WHMDeliveryPosCode;
    Locationr.WHMForkLiftSystem = whmLocr.WHMForkLiftSystem;
    Locationr.WHMAutOKStockMovements = whmLocr.WHMAutOKStockMovements;
    Locationr.WHMDeliveryArea = whmLocr.WHMDeliveryArea;
    Locationr.WHMPickOrderPerArea = whmLocr.WHMPickOrderPerArea;
    Locationr.WHMHighestPosCodeFirst = whmLocr.WHMHighestPosCodeFirst;
    Locationr.WHMDefPUVECode = whmLocr.WHMDefPUVECode;
    Locationr.WHMExpressOrderClass = whmLocr.WHMExpressOrderClass;
    Locationr.RequirePos = whmLocr.RequirePos;
    RecordDelete(whmLocr);
  end;
  LocationVcRecordImport = res;
  return;
end;


global
updating function LongInt LocationVcRecordSaveAfter(var record LocationVc Locationr,record LocationVc Location2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record GlobalLocationVc GLocr;
  
	GLocr.Code = Locationr.Code;
	if(readfirstmain(GLocr,1,true)==false)then begin
		recordnew(GLocr);
		GLocr.Code = Locationr.Code;
		GLocr.Name = Locationr.Name;
		GLocr.Company = currentcompany;
		recordstore(GLocr,true);
	end;
  LocationVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt LocationVcRecordUpdateAfter(var record LocationVc Locationr,record LocationVc Location2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record GlobalLocationVc GLocr;
  
	GLocr.Code = Locationr.Code;
	if(readfirstmain(GLocr,1,true)==false)then begin
		recordnew(GLocr);
		GLocr.Code = Locationr.Code;
		GLocr.Name = Locationr.Name;
		GLocr.Company = currentcompany;
		recordstore(GLocr,true);
	end else begin
		GLocr.Name = Locationr.Name;
		recordstore(GLocr,true);
	end;
	
  LocationVcRecordUpdateAfter = res;
  return;
end;

