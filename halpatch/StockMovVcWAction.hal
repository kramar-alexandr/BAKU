remote function integer CreateBackStockMov(record StockMovVc, var record StockMovVc);
external function Boolean AllowCurChange(string,Boolean);
remote procedure FillArrayListPackListPU(longint,var integer,var array string,var array string,var array string);
remote procedure FillArrayListPackListSM(longint,var integer,var array string,var array string,var array string);
remote procedure FillArrayListPackListSH(longint,var integer,var array string,var array string,var array string);

global
procedure BackStockMovVClassOnOKWindow()
begin
  Integer wn,nwn;
  Integer rownr,err;
  record StockMovVc StockMovr,newStockMovr;
  record RCVc RepSpec;

  wn = CurWindow;
	DeselectWindow(wn,true);
	recordNew(newStockMovr);
	GetWindowRecord(wn,RepSpec);
	if(nonblank(RepSpec.d1))then begin
		CloseWindow(wn);
		StockMovr.SerNr = RepSpec.FirstVer;
		readfirstmain(StockMovr,1,true);
		recordCopy(newStockMovr,StockMovr);
		newStockMovr.OrdTransDate = RepSpec.d1;
		newStockMovr.SentTransDate = "";
		newStockMovr.TransDate = RepSpec.d1;
		err = CreateBackStockMov(StockMovr,newStockMovr);
	if (err==0) then begin
		nwn = OpenWindow("StockMovDClass",1,0,"","",newStockMovr);
	end else begin
		MessageBox(err,"");
	end;
	end else begin
		Beep;
	end;
  return;
end;


global
updating procedure BackStockMovExecute(LongInt SerNr)
BEGIN
  Integer nwn;
  record RcVc RepSpec;
  record POSettingBlock POSb;
  record VIVc VIr;
  Integer r;

	RepSpec.repname = "";
	RepSpec.FirstVer = SerNr;
	nwn = OpenWindow("BackStockMovVClass",1,0,"","",RepSpec);
	PutWindowRecord(nwn,RepSpec);
	SelectWindow(nwn);
	

  RETURN;
END;

global
updating procedure BackStockMovDsm()
BEGIN
  Integer wn;
  record StockMovVc StockMovr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,StockMovr);
    BackStockMovExecute(StockMovr.SerNr);
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure StockMovPricingDsm()
BEGIN
  record RcVc RepSpec;
  record StockMovVc SMr;
  GetWindowRecord(CurWindow,SMr);
  RepSpec.long1 = SMr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "StockMovPricingRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure StockMovCostSumDsm()
BEGIN
  record RcVc RepSpec;
  record StockMovVc SMr;
  GetWindowRecord(CurWindow,SMr);
  RepSpec.long1 = SMr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "StockMovSumCostRn";
  RunReport(RepSpec,0);
  RETURN;
END;


global
function Boolean StockMovDClassOrdFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record StockMovVc StockMovr;
  record StockMovVc StockMov2r;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  GetWindowRecord(wn,StockMovr);
  if (WindowState(wn)==normalmode) then begin
    if (StockMovr.OrdFlag!=0) then begin
    	/*if(usercanaction("UnOKAll",false)==false)then begin
				res = false;
      end;*/
    end;
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;
    if (StockMovr.SentOKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,StockMov2r);
    if (StockMov2r.SentOKFlag!=0) then begin
    	if(usercanaction("UnOkAll",false)==false)then begin
				res = false;
      end;
    end;
    if (StockMov2r.OKFlag!=0) then begin
      res = false;
    end;
    if (StockMov2r.OrdFlag!=0) then begin
      res = false;
    end;
  end;  
  StockMovDClassOrdFlagButtonAction = res;
  return;
end;


global
function Boolean StockMovDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode,insertmode;
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;

  res = true;
  normalmode = 0;//Rs_normal
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,StockMovr);
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;	
    if (UserCanAction("UnOKAll",false) or UserCanAction("UnOKUpdStockDocuments",false)) then begin	//Edit----------------------Dima  15.02.2016
      res = true;
    end;
  end;  
  if (WindowState(wn)==insertmode) then begin
		res = false;		//Edit----------------------Dima  16.02.2016
  
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetWindowRecord(wn,StockMovr);
    GetPrevWindowRecord(wn,prevStockMovr);        
    
    if (prevStockMovr.SentOKFlag==0) then begin
      if (StockMovr.SentOKFlag!=0) then begin
        res = false;
      end;
    end;
 /*   if (prevStockMovr.OrdFlag==0) then begin		//Edit----------------------Dima  15.02.2016
      if (StockMovr.OrdFlag!=0) then begin
        res = false;
      end;
    end;    */
  end;  
  StockMovDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean StockMovDClassSentOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode,insertmode;
  record StockMovVc StockMovr;
  record StockMovVc StockMov2r;

  res = true;
  normalmode = 0;//Rs_normal
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  GetWindowRecord(wn,StockMovr);
  if (WindowState(wn)==normalmode) then begin
    if (StockMovr.SentOKFlag!=0) then begin
      res = false;
    end;
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;
    if (UserCanAction("UnOKAll",false) or UserCanAction("UnOKUpdStockDocuments",false)) then begin	//Edit----------------------Dima  15.02.2016
      res = true;
    end;    
  end;  
  if (WindowState(wn)==insertmode) then begin
			res = false;	//Edit----------------------Dima  16.02.2016
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,StockMov2r);
    if (StockMov2r.SentOKFlag!=0) then begin
      res = false;
    end;
    if (StockMov2r.OKFlag!=0) then begin
      res = false;
    end;
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;
 /*   if (StockMov2r.OrdFlag==0) then begin		//Edit----------------------Dima  15.02.2016
      if (StockMovr.OrdFlag!=0) then begin
        res = false;
      end;
    end;    */
  end;  
  if (blank(StockMovr.ThrouLocation)) then begin
    MessageBox(20080,"");
    res = false;
  end;
  StockMovDClassSentOKFlagButtonAction = res;
  return;
end;



global
function Boolean StockMovDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record StockMovVc StockMovr;
  record StockMovVc StockMov2r;
  row StockMovVc StockMovrw;
  Integer orwcnt,rwcnt;
 
  res = true;
  GetWindowRecord(wn,StockMovr);    
  GetPrevWindowRecord(wn,StockMov2r);

  if (wnst==Rs_update) then begin
    if (StockMov2r.SentOKFlag==0) then begin
      if (StockMovr.IntORNo>0) then begin
        orwcnt = WindowOldRowCnt(wn);
        rwcnt = MatRowCnt(StockMovr);
        if (orwcnt<rwcnt) and (rownr>=orwcnt) then begin
          res = false;
        end;
      end;
    end;
  end;

  switch (fieldname) begin
    case "Comment": 
      if (wnst==Rs_update) then begin
        res = true;
      end;
    case "SerNr": 
      if (wnst==Rs_update) then begin
        if (StockMovr.SentOKFlag!=0) then begin res = false; end;
        if (StockMovr.OKFlag!=0) then begin res = false; end;
      end;            
    case "FrRate": 
      if (AllowCurChange(StockMovr.CurncyCode,false)==false) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "ToRateB1": 
      if (AllowCurChange(StockMovr.CurncyCode,false)==false) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "ToRateB2": 
      if (AllowCurChange(StockMovr.CurncyCode,false)==false) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "BaseRate1": 
      if (AllowCurChange(StockMovr.CurncyCode,true)==false) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "BaseRate2": 
      if (AllowCurChange(StockMovr.CurncyCode,true)==false) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "OrdQuant": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
      if (StockMovr.OrdFlag!=0) then begin res = false; end;
      MatRowGet(StockMovr,rownr,StockMovrw);
      if (StockMovrw.IntORRow>=0) then begin
        res = false;
      end;
    case "FrPos": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "FrPosCode": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "BasePrice": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "SerialNr": 
      if (wnst==Rs_update) then begin
        if (StockMov2r.OKFlag!=0) then begin res = false; end;
        if (StockMov2r.SentOKFlag!=0) then begin res = false; end;
        if (StockMov2r.OrdFlag!=0) then begin
          MatRowGet(StockMovr,rownr,StockMovrw);
          if (nonblank(StockMovrw.SerialNr)) then begin
            res = false;
          end;
        end;
      end;
    case "Objects": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "ArtCode": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
      if (StockMovr.OrdFlag!=0) then begin res = false; end;
      MatRowGet(StockMovr,rownr,StockMovrw);
      if (StockMovrw.IntORRow>=0) then begin
        res = false;
      end;
    case "SentTransDate": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "SentQuant": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
      if (blank(StockMovr.ThrouLocation)) then begin
        MessageBox(20080,"");
        res = false;
      end;
    case "SentOldPrice": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "SentExtraSCost": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "SentNewPrice": 
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
    case "ThrouLocation": 
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.OrdFlag!=0) then begin res = false; end;
    case "FrLocation": 
      if (StockMovr.SentOKFlag!=0) then begin res = false; end;
      if (StockMovr.OKFlag!=0) then begin res = false; end;
      if (StockMovr.OrdFlag!=0) then begin res = false; end;
    case "ToLocation": 
      if (StockMovr.OrdFlag!=0) then begin res = false; end;
    case "OrdTransDate": 
      if (StockMovr.OrdFlag!=0) then begin res = false; end;
    case "OfficialSerNr": res = true;		//Edit----------------------Dima  01.04.2015  
    case "TransBillCoin": //Edit-------------------Vitalii 16:25 26.07.2016
      if nonblank(StockMovr.FileNameCoin) then begin res = false; end;
    otherwise
      switch (wnst) begin
        case Rs_update:
          GetPrevWindowRecord(wn,StockMovr);
          if (StockMovr.OKFlag!=0) then begin res = false; end;
      end;
  end;
  StockMovDClassActiveEditField = res;
  RETURN;
END;

global procedure PackListPUDsm()
BEGIN
  record PackListVc PackLr;
  record PUVc PUr;
  GetWindowRecord(CurWindow,PUr);
  
	PackLr.PUSerNr = PUr.SerNr;
	if(readfirstkey("PUSerNr",PackLr,1,true))then begin
		openwindow("PackListDClass",0,0,"","",PackLr);
	end else begin
		recordNew(PackLr);
		PackLr.PUSerNr = PUr.SerNr;
		openwindow("PackListDClass",0,0,"","",PackLr);
  end;
  
  RETURN;
END;

global procedure PackListSHDsm()
BEGIN
  record PackListVc PackLr;
  record SHVc SHr;
  GetWindowRecord(CurWindow,SHr);
  
	PackLr.SHSerNr = SHr.SerNr;
	if(readfirstkey("SHSerNr",PackLr,1,true))then begin
		openwindow("PackListDClass",0,0,"","",PackLr);
	end else begin
		recordNew(PackLr);
		PackLr.SHSerNr = SHr.SerNr;
		openwindow("PackListDClass",0,0,"","",PackLr);
  end;
  
  RETURN;
END;

global procedure PackListSMDsm()
BEGIN
  record PackListVc PackLr;
  record StockMovVc SMr;
  GetWindowRecord(CurWindow,SMr);
  
	PackLr.SMSerNr = SMr.SerNr;
	if(readfirstkey("SMSerNr",PackLr,1,true))then begin
		openwindow("PackListDClass",0,0,"","",PackLr);
	end else begin
		recordNew(PackLr);
		PackLr.SMSerNr = SMr.SerNr;
		openwindow("PackListDClass",0,0,"","",PackLr);
  end;
  
  RETURN;
END;

global procedure PackListReportDsm()
BEGIN
  record StockMovVc SMr;
  record RcVc RepSpec;
  GetWindowRecord(CurWindow,SMr);
  
	RepSpec.long1 = SMr.SerNr;
	RepSpec.repname = "PackReportRn";
	RunReport(RepSpec,0);
  
  RETURN;
END;

global procedure FillPackList()
begin
	record PUVc PUr;
	row PUVc PUrw;
	record SHVc SHr;
	row SHVc SHrw;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record PackListVc PackLr;
	row PackListVc PackLrw;
	integer i,mtrw;
	integer si,smtrw;
	integer arcnt;
	array string 100 vendor,vendorname,order;
	record CUVc CUr;
	record INVc INr;
	
	getwindowrecord(curwindow,PackLr);
	mtrw = matrowcnt(PackLr);
	if(mtrw>0)then begin
		For(i=0;i<mtrw;i=i+1) begin
			matrowdelete(PackLr,0);
		end;
	end;
	arcnt = 0;
	
	if(PackLr.PUSerNr>0)then begin
		FillArrayListPackListPU(PackLr.PUSerNr,arcnt,vendor,vendorname,order);
		if(arcnt>0)then begin
			For(i=0;i<arcnt;i=i+1) begin
	  		PackLrw.VECode = vendor[i];
	  		PackLrw.VEName = vendorname[i];
	  		PackLrw.OrderNr = order[i];
	  		matrowput(PackLr,i,PackLrw);
			end; 
		end;
	end else begin
		if(PackLr.SMSerNr>0)then begin
			SMr.SerNr = PackLr.SMSerNr;
			if(readfirstmain(SMr,1,true))then begin
				FillArrayListPackListSM(PackLr.SMSerNr,arcnt,vendor,vendorname,order);
				if(arcnt>0)then begin
					For(i=0;i<arcnt;i=i+1) begin
						PackLrw.VECode = vendor[i];
						PackLrw.VEName = vendorname[i];
						PackLrw.OrderNr = order[i];
						matrowput(PackLr,i,PackLrw);
					end; 
				end;
			end;
		end else begin
			if(PackLr.SHSerNr>0)then begin
				SHr.SerNr = PackLr.SHSerNr;
				if(readfirstmain(SHr,1,true))then begin
					FillArrayListPackListSH(PackLr.SHSerNr,arcnt,vendor,vendorname,order);
					if(arcnt>0)then begin
						For(i=0;i<arcnt;i=i+1) begin
							PackLrw.VECode = vendor[i];
							PackLrw.VEName = vendorname[i];
							PackLrw.OrderNr = order[i];
							matrowput(PackLr,i,PackLrw);
						end; 
					end;
				end;
			end;
		end;
	end;
	putwindowrecord(curwindow,PackLr);

return;	
end;

global procedure ORTrackstatusDsm()
begin
	record ORVc ORr;
	record RcVc RepSpec;
	
	getwindowrecord(curwindow,ORr);
	
	RepSpec.long1 = ORr.SerNr;
	RepSpec.repname = "ORPackReportRn";
	runreport(RepSpec,0);

return;
end;

global
function Boolean StockMovDClassTypeCoinButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record StockMovVc SMr;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,SMr);
    if nonblank(SMr.FileNameCoin) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,SMr);
    if nonblank(SMr.FileNameCoin) then begin
      res = false;
    end;
  end;  
  StockMovDClassTypeCoinButtonAction = res;
  RETURN;
end;

global
function Boolean StockMovDClassSentCoinButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record StockMovVc SMr,SM2r;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,SMr);
    if nonblank(SMr.FileNameCoin) then begin
      res = false;
    end;
    if (SMr.TypeCoin==0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,SMr);
    GetWindowRecord(wn,SM2r);
    if nonblank(SMr.FileNameCoin) then begin
      res = false;
    end;
    if (SM2r.TypeCoin==0) then begin
      res = false;
    end;
  end;
  
  StockMovDClassSentCoinButtonAction = res;
  RETURN;
end;