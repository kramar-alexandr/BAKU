external function val AbsoluteVal(val);




updating procedure RemoveSerialNrRecord(record ItemHistVc IHr)
begin
  record SerBalVc SerBalr;
  
	if (nonblank(IHr.SerialNr)) then begin
		SerBalr.Serial = IHr.SerialNr;
		SerBalr.Item = IHr.ArtCode;
		SerBalr.Location = IHr.Location;
		if (ReadFirstMain(SerBalr,3,true)) then begin
				RecordDelete(SerBalr);
		end;
	end;    
end;



updating procedure ReturnSerialNrRecord(record ItemHistVc IHr)
begin
  record SerBalVc SerBalr;
  
	if (nonblank(IHr.SerialNr)) then begin
		SerBalr.Serial = IHr.SerialNr;
		SerBalr.Item = IHr.ArtCode;
		SerBalr.Location = IHr.Location;
		if (ReadFirstMain(SerBalr,3,true)) then begin
			SerBalr.Quant = 1;
			RecordStore(SerBalr,true);
		end;
	end;  
   
end;







global function boolean CheckUnOkIVVc(record IVVc IVr)
begin
	record ItemHistVc IHr;
	boolean TrHs,res;
	row IVVc IVrw;
	integer	rwcnt,i,count;
	val Qty; 

	res = true;	
	rwcnt = MatRowCnt(IVr);

  for(i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(IVr,i,IVrw);
  	IHr.FileName = "IVVc";
  	IHr.TransNr = IVr.SerNr;
  	IHr.Row = i;
  	TrHs = true;
  	count = 0;  	

		if (IVrw.stp == kInvoiceRowTypeNormal) then begin
			Qty = 0;
  		While(LoopKey("FNTransNr",IHr,3,TrHs)) begin	
  			if(IHr.TransNr!=IVr.SerNr or IHr.Row!=i) then begin TrHs=false;  end;
  			
  			if (TrHs) then begin	
					Qty = Qty + IHr.Qty;
					
					if (IVrw.Quant<0 and IHr.RemQty != IHr.Qty) then begin
						res = false;
						goto LCheckUnOkIVVc;					
					end;
					if (IVr.InvType==kInvoiceTypeCredit and IHr.RemQty != IHr.Qty) then begin
						res = false;
						goto LCheckUnOkIVVc;					
					end;										
					count = count + 1;
				end;
				
			end;
			ResetLoop(IHr);
			if ((AbsoluteVal(Qty) != AbsoluteVal(IVrw.Quant)) or count==0) then begin 
						res = false;
						//Logtext(0,"---3 " & IVrw.ArtCode & "    row " & i  & "  count " & count);
						goto LCheckUnOkIVVc;			
			end;

		end;
	end;	

LogText(0,"check ok  " );
LCheckUnOkIVVc:;



CheckUnOkIVVc = res;
return;
end;



global updating 
procedure UnOk_IVVc(var record IVVc IVr)
begin
  record ItemHistVc IHr,IH2r;
	row IVVc IVrw;
	integer	rwcnt,i;  
	Integer res;
	boolean TrHs;
	string 20 checkLocation;
	record INVc INr;	
	
  rwcnt = MatRowCnt(IVr);  	

  
  for(i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(IVr,i,IVrw);
  	if (IVrw.stp == kInvoiceRowTypeNormal) then begin
  	
			IHr.FileName = "IVVc";
  		IHr.TransNr = IVr.SerNr;
  		IHr.Row = i;  
			TrHs = true;  
				
  		While(LoopKey("FNTransNr",IHr,3,TrHs)) begin	
  			if(IHr.TransNr!=IVr.SerNr or IHr.Row!=i) then begin TrHs=false;end;
  			
  			if (TrHs) then begin
  				INr.Code = IVrw.ArtCode;
  				ReadFirstMain(INr,1,true);
  				if (INr.ItemType==1 or INr.ItemType==2) then begin
  				
						if (IVrw.Quant>0) then begin	    	
  						IH2r.SerNr = IHr.Source;
  						if (ReadFirstMain(IH2r,1,true)) then begin
  							IH2r.RemQty = IH2r.RemQty + (-IHr.Qty);  //this IHr has negative Qty
			  				IH2r.RemCostPrice = IH2r.TotCostPrice/IH2r.Qty*IH2r.RemQty;
  							RecordStore(IH2r,true);
			  				ReturnSerialNrRecord(IH2r);
			  				RemoveSerialNrRecord(IHr);
							end;					
						end;
						
						  	
						LogText(0,"DELETED  " & IHr.SerNr & "    : " & IHr.ArtCode);
						// if (IVrw.Quant<0 or IVr.InvType==kInvoiceTypeCredit)	then  -  just remove
							
					end;
					RecordDelete(IHr);
					StepBack(IHr);
							
  			end;
			end; 
			resetloop(IHr);
  	end; 
  	
	end; 
	
	IVr.LocOKNr = BlankVal; 
  


  return;
end;

