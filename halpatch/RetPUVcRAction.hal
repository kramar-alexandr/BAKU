external updating function Integer RecordAction_raPasteRetPUInVI(var record VIVc,LongInt);
external function Boolean PODchrsum(record POVc,Integer);
external function val CalcPalletsNr(val,string);
external procedure DivPIFactor(val,val,var val);
external function Boolean IsDigit(string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external function Boolean SerialNrAvail(string,string,string,val);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external procedure GetCurUser(var record UserVc);
external updating procedure UpdateTrans_Stock(record TRVc);
external function Integer IsUnOKAllowed_RetPUVc(record RetPUVc);
external updating procedure UpdateRecalcStockNeeded(Integer);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean ItemHistExists(string,LongInt);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure UpdateStockResFromRetPU(record RetPUVc,record RetPUVc);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function val AlreadyReturned_RetPUVc(LongInt);
external procedure SwapM4Val(var val,var val);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure RetPUUpdateItemHist(record RetPUVc);
external updating procedure RetPUUpdateSerialNr(record RetPUVc,Boolean);
external updating procedure AddTTrans_RetPUVc(record TRVc,record RetPUVc);
external updating procedure RetPUUpdateCostPrice(record RetPUVc);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external updating procedure UpdateVarianceStatusRetPU(record RetPUVc);
external procedure FillAmForVarianceRetPU(record RetPUVc);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Integer MakeTransFromRetPU(record TRVc,record RetPUVc,Boolean);
external procedure RetPUUpdateFIFO(var record RetPUVc);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestRetPUVc(LongInt,Date,var Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external function Boolean SerialNrAvail2(string,string,val);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external updating procedure UpdateSerStock(string,string,string,val,val);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external function Boolean ShouldItemUpdateStock(string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure SetPOFlags(record POVc,Boolean);
external procedure POSumup(var record POVc);
external updating function val NextLocOKNr(string);
external procedure RetPUSumUp(var record RetPUVc);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Boolean TestNextOfficialSerialNr_RetPUVc(row LegalInvNrBlock,string,record RetPUVc,Boolean);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure FindNextRetPUVcOfficialSerialNr(var record RetPUVc);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external function Integer GetVATLaw();
external function Integer CheckObjs(string,string,var string); //Edit***************************Sasha2,13:09 02.07.2015
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer); //Edit***************************Sasha2,13:09 02.07.2015

global
function LongInt RetPUVcRecordDefaults(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;

  RetPUr.TransDate = CurrentDate;
  RetPUr.RegDate = CurrentDate;
  RetPUr.OKFlag = 0;
  RetPUr.SerNr = -1;
  if (SingleUserMode) then begin
    RetPUr.SerNr = NextSerNr("RetPUVc",RetPUr.TransDate,-1,false,"");
  end;
  GetCurUser(Userr);
  RetPUr.UpdStockFlag = 1;
  RetPUr.Location = Userr.Location;
  RetPUr.TerminalID = CurTerminalID;
  RetPUr.BranchID = CurBranchID;
  RetPUr.LocalMachineCode = CurMachineName;
  RetPUVcRecordDefaults = res;
  RETURN;
END;

/*
global
function LongInt RetPUVcRecordDuplicate(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt;
  row RetPUVc RetPUrw;

  RetPUr.TransDate = CurrentDate;
  RetPUr.OKFlag = 0;
  if (SingleUserMode) then begin
    RetPUr.SerNr = NextSerNr("RetPUVc",RetPUr.TransDate,-1,false,"");
  end;
  rwcnt = MatRowCnt(RetPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUr,i,RetPUrw);
    RetPUrw.FIFO = blankval;
    RetPUrw.FIFORowVal  = blankval;
    MatRowPut(RetPUr,i,RetPUrw);
  end;
  RetPUr.LocOKNr = blankval;
  RetPUVcRecordDuplicate = res;
  RETURN;
END;
*/

global
function LongInt RetPUVcRecordReset(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  RetPUr.OKFlag = 0;
  RetPUVcRecordReset = res;
  RETURN;
END;

global
function LongInt RetPUVcRecordRemoveTest(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (RetPUr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LRetPUVcRecordRemoveTest;
  end;
  if (RetPUr.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LRetPUVcRecordRemoveTest:;
  RetPUVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt RetPUVcRecordRemove(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

LRetPUVcRecordRemove:;
  RetPUVcRecordRemove = res; 
  RETURN;
END;

procedure RetPUVcConvertB1ToB2Date(record RetPUVc RetPUp,string curp,val frp,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN
  row RetPUVc RetPUrw;
 // val fr,to1,to2,br1,br2;
  Integer rwcnt,i;
  string 20 curncy;
  val t;

  curncy = curp;
//  GetFullCurncyRate(curncy,datp,fr,to1,to2,br1,br2);
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  rwcnt = MatRowCnt(RetPUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUp,i,RetPUrw);
    B1ToB2Val(RetPUrw.FIFO,br1p,br2p,t);
    RetPUrw.FIFO = t;    
    B1ToB2Val(RetPUrw.FIFORowVal,br1p,br2p,t);
    RetPUrw.FIFORowVal = t;        
    MatRowPut(RetPUp,i,RetPUrw);
  end;
  RETURN;
END;

global
updating function LongInt RetPUVcRecordImport(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  
  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = RetPUr.CurncyCode;
    fr = RetPUr.FrRate;
    to1 = RetPUr.ToRateB1;
    to2 = RetPUr.ToRateB2;
    br1 = RetPUr.BaseRate1;
    br2 = RetPUr.BaseRate2;
    ConvertToDualBase(curncy,RetPUr.TransDate,fr,to1,to2,br1,br2,t,false);
    RetPUr.CurncyCode = curncy;
    RetPUr.FrRate = fr;
    RetPUr.ToRateB1 = to1;
    RetPUr.ToRateB2 = to2;
    RetPUr.BaseRate1 = br1;
    RetPUr.BaseRate2 = br2;
  end;
  if (gBase1ToBase2) then begin
    to1 = RetPUr.ToRateB1;
    to2 = RetPUr.ToRateB2;
    br1 = RetPUr.BaseRate1;
    br2 = RetPUr.BaseRate2;
    RetPUVcConvertB1ToB2Date(RetPUr,RetPUr.CurncyCode,RetPUr.FrRate,to1,to2,br1,br2);
    RetPUr.ToRateB1 = to1;
    RetPUr.ToRateB2 = to2;
    RetPUr.BaseRate1 = br1;
    RetPUr.BaseRate2 = br2;
    RetPUSumUp(RetPUr);
  end;  
  RetPUVcRecordImport = res;
  RETURN;
END;

global
updating procedure RetPUUpdateStock(record RetPUVc RetPUp,Boolean negf,Boolean maintf)
BEGIN
  record MainStockBlock MainStockRec;
  record SHVc RecSHr;
  row SHvc SH2rw;
  row RetPUVc RetPUrw;
  Integer i,rwcnt;
  val t,t2,q2,t3,t4,unokpoq,poq;
  Integer j,shrwcnt;
  string 10 location,loc2,poloc;
  record POVc POr;
  row POVc POrw;
  transaction string 255 gRuniningMaint;
  
  BlockLoad(MainStockRec);
  rwcnt = MatRowCnt(RetPUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUp,i,RetPUrw);
    if (nonblank(RetPUrw.ArtCode)) then begin
      location = RetPUrw.Location;
      if (blank(location)) then begin
        location = RetPUp.Location;
      end;
      if (blank(location)) then begin
        location = MainStockRec.MainStock;
      end;
      loc2 = location;
      t2 = -RetPUrw.Quant;
      if (ShouldItemUpdateStock(RetPUrw.ArtCode)==false) then begin
        t2 = blankval;
      end;
      if (MainStockRec.UnitConvCalc==0) then begin
        q2 = t2*RetPUrw.Coefficient;
      end else begin
        q2 = t2/RetPUrw.Coefficient;
      end;
      if (t2!=0) then begin
        t4 = blankval;
        t3 = blankval;
        if (RetPUp.Type==0) then begin
          if (RetPUp.PONr!=-1) then begin
            POr.SerNr = RetPUp.PONr;
            if (ReadFirstMain(POr,1,true)) then begin
              if (POr.Closed==0) then begin
                MatRowGet(POr,RetPUrw.OrdRow,POrw);
                if ((POrw.Quant - POrw.Shipd2)>=0) then begin //for over-recived we dont touch
                  t4 = -t2;
                end else begin
                  t4 = -t2;                  
                  t4 = POrw.Quant - POrw.Shipd2 + t4;
                  if (t4<0) then begin
                    t4 = blankval;
                  end;                  
                end;
                if (maintf) then begin
                  switch (gRuniningMaint) begin    
                    case "RecalcItemStatusMn":
                      t3 = blankval;
                      t4 = blankval;
                    otherwise
                      if (POr.OKFlag!=0) then begin
                        t3 = -t4;
                      end;
                      t4 = blankval;
                  end;
                end;
              end;
              poloc = POr.Location;
            end;
          end;
        end else begin
          if (RetPUp.PONr>0) then begin
            POr.SerNr = RetPUp.PONr;
            if (ReadFirstMain(POr,1,true)) then begin
              if (POr.OKFlag!=0) then begin
                MatRowGet(POr,RetPUrw.OrdRow,POrw);
                if ((POrw.Quant - POrw.Shipd2)>=0) then begin //for over-recived we dont touch
                  t3 = t2;
                end else begin
                  t3 = POrw.Quant - POrw.Shipd2 + t3;
                  if (t3<0) then begin
                    t3 = blankval;
                  end;                  
                end;
              end else begin
                if (maintf) then begin
                  switch (gRuniningMaint) begin    
                    case "RecalcItemStatusMn":
                      t3 = t2;
                      t4 = -t2;
                  end;
                end;
              end;
              poloc = POr.Location;
            end;
          end;
        end;
        if (negf) then begin 
          t2 = -t2; 
          t3 = -t3; 
          t4 = -t4; 
          q2 = -q2; 
        end;
        t = blankval;
        UpdateInstock("RetPUVc",RetPUp.SerNr,RetPUrw.ArtCode,loc2,RetPUp.TransDate,t2,t,t,t,t,q2,t,t,t);
        if (blank(poloc)) then begin
          poloc = loc2;
        end;
        UpdateInstock("RetPUVc",RetPUp.SerNr,RetPUrw.ArtCode,loc2,RetPUp.TransDate,t,t,t,t3,t4,t,t,t,t);
      end;      
    end;
  end;
  RETURN;
END;

global
updating function LongInt RetPUVcRecordImportAfter(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer err;
  
  if (RetPUr.OKFlag!=0) then begin
    RetPUUpdateSerialNr(RetPUr,false);
    if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
      RetPUUpdateCostPrice(RetPUr);
      RetPUUpdateStock(RetPUr,false,false);
      RetPUUpdateItemHist(RetPUr);
    end;
  end;
  RetPUVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt RetPUVcRecordUpdate(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (ItemHistExists("RetPUVc",RetPUr.SerNr)==false) then begin
    RetPUr.LocOKNr = NextLocOKNr(RetPUr.Location);
  end;
  RetPUVcRecordUpdate = res;
  RETURN;
END;

updating procedure UpdatePORowWithRetPURow(record GeneralOptionBlock GenOptr,record RetPUVc RetPUp,row RetPUVc RetPUrw,LongInt PONr,Boolean addf,Boolean sh2only)
begin
  record POVc POr;
  record POVc oldPOr;
  row POVc POrw;
  Integer porwcnt;
  val t,negqty;
  Boolean changedqtyf;

  POr.SerNr = PONr;
  if (ReadFirstMain(POr,1,true)) then begin
    RecordCopy(oldPOr,POr);
    porwcnt = MatRowCnt(POr);
    if (RetPUrw.OrdRow<porwcnt) then begin
      MatRowGet(POr,RetPUrw.OrdRow,POrw);
      changedqtyf = false;
      if (addf) then begin
        negqty = RetPUrw.Quant;
      end else begin
        negqty = -RetPUrw.Quant;
      end;
      if (RetPUp.OKFlag!=0) then begin      
        if (sh2only==false) then begin
          POrw.Shipd1 = POrw.Shipd1 + negqty;
        end;
        POrw.Shipd2 = POrw.Shipd2 + negqty;
        if (RetPUp.Type==1) then begin
          POrw.Quant = POrw.Quant + negqty;
          changedqtyf = true;
        end;
      end;
      if (POrw.Quant==0) then begin POrw.Quant = blankval; end;
      if (POrw.Shipd1==0) then begin POrw.Shipd1 = blankval; end;
      if (POrw.Shipd2==0) then begin POrw.Shipd2 = blankval; end;
      if (changedqtyf) then begin
        DivPIFactor(POrw.Quant,POrw.PIFactor,POrw.VEQuant);
        POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
//      CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,POrw.vRebate,t,GenOptr.UseDiscount);
//      POrw.Sum = t;
        MatRowPut(POr,RetPUrw.OrdRow,POrw);
        if (PODchrsum(POr,RetPUrw.OrdRow)) then begin
        end;
        POSumup(POr);
      end;
    end;    
    if (RecordUpdate(oldPOr,POr,true)==0) then begin
    end;
  end;
  return;
end;

global
updating procedure UpdatePOFromRetPURows(record RetPUVc RetPUp,Boolean retpuf,record RetPUVc RetPU2p,Boolean retpu2f,Boolean sh2only)
begin
  Integer i,rwcnt;
  row RetPUVc RetPUrw;
  LongInt PONr;
  record GeneralOptionBlock GenOptr;

  if (RetPUp.PONr!=-1) then begin goto LUpdatePOFromRetPURows; end;
  BlockLoad(GenOptr);
  if (retpu2f) then begin
    rwcnt = MatRowCnt(RetPU2p);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RetPU2p,i,RetPUrw);
      PONr = RetPUrw.PONr;
      if (PONr<=0) then begin PONr = RetPU2p.PONr; end;
      if (PONr!=-1) and (RetPUrw.OrdRow>=0) then begin
        UpdatePORowWithRetPURow(GenOptr,RetPU2p,RetPUrw,PONr,true,sh2only);
      end;
    end;
  end;
  if (retpuf) then begin
    rwcnt = MatRowCnt(RetPUp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RetPUp,i,RetPUrw);
      PONr = RetPUrw.PONr;
      if (PONr<=0) then begin PONr = RetPUp.PONr; end;
      if (RetPUrw.PONr!=-1) and (RetPUrw.OrdRow>=0) then begin
        UpdatePORowWithRetPURow(GenOptr,RetPUp,RetPUrw,PONr,false,sh2only);
      end;
    end;
  end;
//  UpdatePOOut(POr,true,false);
//  SetPOFlags(POr,false);
  
LUpdatePOFromRetPURows:;  
  return;
end;

updating procedure UpdatePOFromRetPU(record RetPUVc RetPUp,Boolean retpuf,record RetPUVc RetPU2p,Boolean retpu2f,Boolean sh2only)
BEGIN
  Integer i,rwcnt;
  row RetPUVc RetPUrw;
  record POVc oldPOr;
  record POVc POr;
  row POVc POrw;
  Integer orw,orcnt;
  val negqty,t;
  record GeneralOptionBlock GenOptr;
  Boolean changedqtyf;
  
  BlockLoad(GenOptr);
  if (RecordValid(RetPUp)) then begin
    POr.SerNr = RetPUp.PONr;
  end else begin
    POr.SerNr = RetPU2p.PONr;
  end;

  if (ReadFirstMain(POr,1,true)) then begin
    RecordCopy(oldPOr,POr);
    orcnt = MatRowCnt(POr);
    if (retpu2f) then begin
    if (RecordValid(RetPU2p)) then begin
      rwcnt = MatRowCnt(RetPU2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RetPU2p,i,RetPUrw);
        if (RetPUrw.OrdRow!=-1) then begin
          orw = RetPUrw.OrdRow;
          if (orw<orcnt) then begin
            changedqtyf = false;
            MatRowGet(POr,orw,POrw);
            negqty = -RetPUrw.Quant;
            if (RetPU2p.OKFlag!=0) then begin
              if (sh2only==false) then begin
                POrw.Shipd1 = POrw.Shipd1 - negqty;
              end;
              POrw.Shipd2 = POrw.Shipd2 - negqty;
              if (RetPUp.Type==1) then begin
                POrw.Quant = POrw.Quant - negqty;
              end;
            end;
            if (POrw.Quant==0) then begin POrw.Quant = blankval; end;
            if (POrw.Shipd1==0) then begin POrw.Shipd1 = blankval; end;
            if (POrw.Shipd2==0) then begin POrw.Shipd2 = blankval; end;
//            CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,POrw.vRebate,t,GenOptr.UseDiscount);
//            POrw.Sum = t;
//            MatRowPut(POr,orw,POrw);
            if (changedqtyf) then begin
              DivPIFactor(POrw.Quant,POrw.PIFactor,POrw.VEQuant);
              POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
              MatRowPut(POr,orw,POrw);
              if (PODchrsum(POr,orw)) then begin
              end;
            end else begin
              MatRowPut(POr,orw,POrw);
              if (PODchrsum(POr,orw)) then begin
              end;
            end;
            POSumup(POr);
          end;
        end;
      end;
    end;
    end;
    if (retpuf) then begin
    if (RecordValid(RetPUp)) then begin
    rwcnt = MatRowCnt(RetPUp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RetPUp,i,RetPUrw);
        if (RetPUrw.OrdRow!=-1) then begin
          orw = RetPUrw.OrdRow;
          if (orw<orcnt) then begin
            changedqtyf = false;
            MatRowGet(POr,orw,POrw);
            negqty = -RetPUrw.Quant;
            if (RetPUp.OKFlag!=0) then begin
              if (sh2only==false) then begin
                POrw.Shipd1 = POrw.Shipd1 + negqty;
              end;
              POrw.Shipd2 = POrw.Shipd2 + negqty;
              if (RetPUp.Type==1) then begin
                if (RetPUp.OKFlag!=0) then begin
                  POrw.Quant = POrw.Quant + negqty;
                  changedqtyf = true;
                end;
              end;  
            end;
            if (POrw.Quant==0) then begin POrw.Quant = blankval; end;
            if (POrw.Shipd1==0) then begin POrw.Shipd1 = blankval; end;
            if (POrw.Shipd2==0) then begin POrw.Shipd2 = blankval; end;
            if (changedqtyf) then begin
              DivPIFactor(POrw.Quant,POrw.PIFactor,POrw.VEQuant);
              POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
              MatRowPut(POr,orw,POrw);
              if (PODchrsum(POr,orw)) then begin
              end;
            end else begin
              MatRowPut(POr,orw,POrw);
              if (PODchrsum(POr,orw)) then begin
              end;
            end;
//            CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,POrw.vRebate,t,GenOptr.UseDiscount);
//            POrw.Sum = t;
//            MatRowPut(POr,orw,POrw);
          end;
        end;
      end;
    end;
    end;
    POSumup(POr);            
    SetPOFlags(POr,false);
    if (RecordUpdate(oldPOr,POr,false)==0) then begin end;
  end;
  RETURN;
END;

global
updating procedure UnOKSupplierReturn(record RetPUVc RetPUr,record RetPUVc RetPU2r,Boolean deltrf)
begin
//    RetPUUpdateCostPrice(RetPUr);JJRECALCSTOCK
    RetPUUpdateStock(RetPUr,true,false);
    RetPUUpdateSerialNr(RetPUr,true);
    if (RetPUr.PONr!=-1) then begin
      UpdatePOFromRetPU(RetPUr,false,RetPU2r,true,true);
    end else begin
      UpdatePOFromRetPURows(RetPUr,false,RetPU2r,true,true);
    end;
//  UpdateVarianceStatusRetPU(RetPUr);//JJRECALCSTOCK
//  UpdateStockResFromRetPU(RetPUr);//JJRECALCSTOCK

  UpdateRecalcStockNeeded(1);
  StoreUnOKHistory("RetPUVc",RetPUr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
  if (deltrf) then begin
    DeleteTransaction(RetPUr.SerNr,RetPUYc);
  end;
  return;
end;

global
updating function LongInt RetPUVcRecordUpdateAfter(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;
  Boolean ihef;
  record VIVc VIr;
  record VIVc oldVIr;
  record POSettingBlock POSb;

  ihef = ItemHistExists("RetPUVc",RetPUr.SerNr);
  if ((RetPU2r.OKFlag==0) and (RetPUr.OKFlag!=0)) then begin
    BlockLoad(POSb);
    if (ihef==false) then begin
      RetPUUpdateCostPrice(RetPUr);
    end;
    RetPUUpdateStock(RetPUr,false,false);
    if (ihef==false) then begin
      RetPUUpdateItemHist(RetPUr);
    end;
    RetPUUpdateSerialNr(RetPUr,false);

    if (RetPUr.PONr!=-1) then begin
      UpdatePOFromRetPU(RetPUr,true,RetPU2r,true,false);
    end else begin
      UpdatePOFromRetPURows(RetPUr,true,RetPU2r,false,false);
    end;
    if (ihef==false) then begin
      UpdateVarianceStatusRetPU(RetPUr);
      UpdateStockResFromRetPU(RetPUr,RetPU2r);
      if (POSb.CreateVIonRetPUOK!=0) then begin
        if (RecordAction_raPasteRetPUInVI(VIr,RetPUr.SerNr)==1) then begin
          RecordCopy(oldVIr,VIr);
          VIr.OKFlag = 1;
          RecordUpdate(oldVIr,VIr,true);
        end;
      end;
    end;
  end;
//  if ((IVr.Invalid==0) and (IV2r.Invalid==0)) then begin
  if ((RetPUr.OKFlag==0) and (RetPU2r.OKFlag!=0)) then begin//unok
    UnOKSupplierReturn(RetPUr,RetPU2r,true);
  end;
  RetPUVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt RetPUVcRecordSave(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (blankdate(RetPUr.RegDate)) then begin
    RetPUr.RegDate = CurrentDate;
  end;
  if (blanktime(RetPUr.RegTime)) then begin
    RetPUr.RegTime = CurrentTime;
  end;
  if (RetPUr.OKFlag!=0) then begin
    RetPUr.LocOKNr = NextLocOKNr(RetPUr.Location);
  end;
  if (blank(RetPUr.OfficialSerNr)) then begin
    FindNextRetPUVcOfficialSerialNr(RetPUr);
  end;
  RetPUVcRecordSave = res;
  return;
end;

global
updating function LongInt RetPUVcRecordSaveAfter(var record RetPUVc RetPUr,record RetPUVc RetPU2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (RetPUr.OKFlag!=0) then begin
    RetPUUpdateCostPrice(RetPUr);
    RetPUUpdateStock(RetPUr,false,false);
    RetPUUpdateItemHist(RetPUr);
    RetPUUpdateSerialNr(RetPUr,false);
    if (RetPUr.PONr!=-1) then begin
      UpdatePOFromRetPU(RetPUr,true,RetPU2r,true,false);
    end else begin
      UpdatePOFromRetPURows(RetPUr,true,RetPU2r,false,false);
    end;
    UpdateVarianceStatusRetPU(RetPUr);
//    UpdateStockResFromRetPU(RetPUr,RetPU2r);
  end;
  RetPUVcRecordSaveAfter = res;
  return;
end;

function Integer SerialNrOnThisRetPU(record RetPUVc RetPUr,string ArtCode,string SerialNr)
BEGIN
  row RetPUVc RetPUrw;
  Integer rwcnt,i;
  val qty;

  qty = 0;
  rwcnt = MatRowCnt(RetPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUr,i,RetPUrw);
    if (RetPUrw.ArtCode==ArtCode) and (RetPUrw.SerialNr==SerialNr) then begin
      qty = qty + RetPUrw.Quant;
    end;
  end;
  SerialNrOnThisRetPU = qty;
  RETURN;
END;

function Boolean RetPURowInStock(record RetPUVc RetPUp,LongInt PURow)
begin
  Boolean res;
  record ItemHistVc IHr;
  
  
  RetPURowInStock = res;
  return;
end;

function Integer ValidateBulkSerialNoRow(record SerNrTrackBlock SNrb,record RetPUVc RetPUr,row RetPUVc RetPUrw,Integer currow,var string gotofield,var Integer gotorow)
begin
  Integer res;
  Integer j,rwcnt;
  row RetPUVc RetPU2rw;
  Boolean testf;
  string 255 serialnr;
  string 255 serialnr2;
  val qty,qty2;

  gotorow = -1;
  gotofield = "";  
  if (RetPUrw.Quant>1) then begin
    rwcnt = len(RetPUrw.SerialNr);
    for (j=0;j<rwcnt;j=j+1) begin
      if ((IsDigit(Mid(RetPUrw.SerialNr,j,1))==false) and (Mid(RetPUrw.SerialNr,j,1)!=":")) then begin
        res = 20434;
        gotorow = currow;
        gotofield = "SerialNr";
        goto LValidateBulkSerialNoRow;
      end;
    end;
  end;
  rwcnt = MatRowCnt(RetPUr);
  serialnr = FirstInRange(RetPUrw.SerialNr,30);
  while (nonblank(serialnr)) begin
    for (j=0;j<currow;j=j+1) begin  
      MatRowGet(RetPUr,j,RetPU2rw);
      if (RetPU2rw.Quant!=0) then begin
        if (RetPUrw.ArtCode==RetPU2rw.ArtCode) then begin
          qty2 = blankval;
          serialnr2 = FirstInRange(RetPU2rw.SerialNr,30);
          while (nonblank(serialnr2)) begin
            if (serialnr==serialnr2) then begin
              res = 1241;
              gotorow = currow;
              gotofield = "SerialNr";
              goto LValidateBulkSerialNoRow;
            end;
            qty2 = qty2 + 1;
            serialnr2 = NextSerialNumber(RetPU2rw.ArtCode,serialnr2,SNrb);
            if (qty2>=RetPU2rw.Quant) then begin serialnr2 = ""; end;
          end;
        end;
      end;
    end;
    qty = qty + 1;
    serialnr = NextSerialNumber(RetPUrw.ArtCode,serialnr,SNrb);
    if (qty>=RetPUrw.Quant) then begin serialnr = ""; end;
  end;
LValidateBulkSerialNoRow:;  
  ValidateBulkSerialNoRow = res;
  return;
end;

global
updating function LongInt RetPUVcRecordCheck(var record RetPUVc RetPUp,record RetPUVc RetPU2p,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  LongInt oldnr,sernr;
  Integer insertmode,updatemode;
  Boolean transf,gentrans;
  record INVc INr;
  record POVc POr;
  row POVc POrw;
  row RetPUVc RetPUrw,RetPU2rw;
  record RetPUVc locRetPUr;
  Integer orrwcnt,i,rwcnt,errcode,j;
  record LocationVc LocRec;
  record MainStockBlock MainStockRec;
  record TRVc gTRp;
  val prev,q;
  string 10 location,location2;
  record ItemStatusVc ISr;
  string 255 tstr,errstr;
  record CostAccBlock CAb;
  record PUVc PUr;
  row PUVc PUrw;
  record ItemHistVc IHr;
  record CUVc VEr;
  record PISVc PISr;
  Boolean unokf,testf,test2f;
  transaction string 255 gRuniningMaint;
  record SerNrTrackBlock SNrb;
  val serqty;
  string 255 serialnr,oldOfficialSerNr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  Array string 255 otcheckaccs; //Edit***************************Sasha2,13:11 02.07.2015
  Array string 255 otcheckobjtyps; //Edit***************************Sasha2,13:11 02.07.2015
  Integer otcheckcnt; //Edit***************************Sasha2,13:11 02.07.2015
  Boolean initotcheckf; //Edit***************************Sasha2,13:11 02.07.2015

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = RetPUp.SerNr;
  oldOfficialSerNr = RetPUp.OfficialSerNr;  
  gentrans = true;
  transf = false;
  if (RetPUp.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (RetPU2p.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if (RetPUp.SerNr<=0) and (RetPU2p.OKFlag==0) then begin
      RetPUp.SerNr = RetPU2p.SerNr;
    end;
  end;      
  if (RetPUp.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (RetPU2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_RetPUVc(RetPUp);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"TransDate");      
      res = -1; 
    end;
    goto LRetPUVcRecordCheck;
  end;  
  BlockLoad(MainStockRec);
  BlockLoad(CAb);
  BlockLoad(SNrb);
  if (RetPUp.SerNr<=0) then begin
    RetPUp.SerNr = NextSerNr("RetPUVc",RetPUp.TransDate,-1,false,"");  
  end;
  if ((stat==insertmode) or (RetPUp.SerNr!=RetPU2p.SerNr)) then begin
    locRetPUr.SerNr = RetPUp.SerNr;
    if (ReadFirstMain(locRetPUr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
    if (SerNrTestRetPUVc(RetPUp.SerNr,RetPUp.TransDate,gentrans)==false) then begin
      if (check>0) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
  end;
  end;
  switch (stat) begin
    case Rs_update:
      if (RetPUp.OKFlag!=0) and (RetPU2p.OKFlag==0) then begin
        RetPUp.RegDate = CurrentDate;
        RetPUp.RegTime = CurrentTime;
      end;
    otherwise
      if (RetPUp.OKFlag!=0) then begin
        RetPUp.RegDate = CurrentDate;
        RetPUp.RegTime = CurrentTime;
      end;
  end;
  if (check==0) then begin
    goto LRetPUVcRecordCheck_GenTrans;
  end;
  if (Date2Test("RetPUVc",RetPUp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LRetPUVcRecordCheck;
  end; 
  if (DisallowFutureDateCheck(true,RetPUp.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LRetPUVcRecordCheck;
  end;
  if (blank(RetPUp.CurncyCode)) then begin //Edit***************************Sasha2,13:25 25.05.2015 {
    RecordCheckError(1854,"",-1,"CurncyCode");      
    res = -1; 
    goto LRetPUVcRecordCheck;
  end else begin
    MatRowGet(RetPUp,i,RetPUrw);
    if (nonblank(RetPUrw.ArtCode)) then begin
      INr.Code = RetPUrw.ArtCode;
      ReadFirstMain(INr,1,true);
      if (INr.LastPurchCurncyCode!=RetPUp.CurncyCode) then begin
        RecordCheckError(1217,"",-1,"CurncyCode");      
        res = -1; 
        goto LRetPUVcRecordCheck;
      end;
    end else begin
      if (nonblank(RetPUp.VECode)) then begin     
        VEr.Code = RetPUp.VECode;
        ReadFirstMain(VEr,1,true);
        if (VEr.VECurncyCode!=RetPUp.CurncyCode) then begin
          RecordCheckError(1217,RetPUp.VECode,-1,"CurncyCode");      
          res = -1;
          goto LRetPUVcRecordCheck;
        end;
      end else begin
        RecordCheckError(1217,"",-1,"CurncyCode");      
        res = -1; 
        goto LRetPUVcRecordCheck;
      end;
    end;
  end; //Edit***************************Sasha2,13:26 25.05.2015 }
  errcode = CheckRates(RetPUp.CurncyCode,RetPUp.FrRate,RetPUp.ToRateB1,RetPUp.ToRateB2,RetPUp.BaseRate1,RetPUp.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LRetPUVcRecordCheck;
  end;              
  LocRec.Code = RetPUp.Location;
  if (nonblank(RetPUp.Location)) then begin
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,RetPUp.Location,-1,"Location");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
  end else begin
    if (MainStockRec.requireLocation==0) then begin
      LocRec.Code = MainStockRec.MainStock;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
      end;
    end;
  end;  
  if (nonblank(RetPUp.VECode)) then begin     
    VEr.Code = RetPUp.VECode;
    if (ReadFirstMain(VEr,1,true)==false) then begin
      RecordCheckError(1120,RetPUp.VECode,-1,"VECode");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
  end;
  
  BlockLoad(LINrb);  
  if (nonblank(RetPUp.OfficialSerNr)) and ((MatRowCnt(LINrb)>0) or (HasLocalization("ARG,PRT"))) then begin
    GetLegalInvNrRow(RetPUp.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          RetPUp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (transf) then begin
          RetPUp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          RetPUp.OfficialSerNr = "";
        end;
    end;
  end;
  if (blank(RetPUp.OfficialSerNr)) then begin
    FindNextRetPUVcOfficialSerialNr(RetPUp);
  end;
  if (transf) then begin
    if (GetVATLaw==vatPortuguese) then begin
      if (blank(RetPUp.OfficialSerNr)) then begin
        RecordCheckError(1058,"",-1,"OfficialSerNr");  
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;
  end;
  if (ValidateOfficialSerialNrChronology("RetPUVc",RetPUp.OfficialSerNr,RetPUp.SerNr,RetPUp.TransDate,td)==false) then begin
    RecordCheckError(26201," " & td,-1,"TransDate");  
    res = -1;
    goto LRetPUVcRecordCheck;
  end;  
  if (nonblank(RetPUp.OfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(RetPUp.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_RetPUVc(LINrbrw,VEr.Classification,RetPUp,false);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      RecordCheckError(errcode," " & RetPUp.OfficialSerNr,-1,"OfficialSerNr");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
  end;
  
  if (check>0) and (transf) then begin 
  end else begin
//    goto LDONOTCHECK;
  end;  
  rwcnt = MatRowCnt(RetPUp);
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUp,i,RetPUrw); 
    if (check!=0) then begin //Edit***************************Sasha2,13:11 02.07.2015 {
      VerifyRowObjects("PL","",RetPUrw.Objects,RetPUrw.CredAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);                              
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;   
    if (nonblank(RetPUrw.Objects)) then begin 
      errcode = CheckObjs("",RetPUrw.Objects,errstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end; //Edit***************************Sasha2,13:11 02.07.2015 }
    if (RetPUrw.OrdRow==-1) then begin 
      RecordCheckError(1252,"",i,"OrdRow");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
    if (RetPUrw.PONr>0) then begin
      POr.SerNr = RetPUrw.PONr;
      if (ReadFirstMain(POr,1,true)==false) then begin
        RecordCheckError(1252,"",i,"PONr");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end else begin
      POr.SerNr = RetPUp.PONr;
      if (ReadFirstMain(POr,1,true)==false) then begin
        RecordCheckError(1252,"",-1,"SerNr");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;
    orrwcnt = MatRowCnt(POr);

    if (nonblank(RetPUrw.Location)) then begin
      LocRec.Code = RetPUrw.Location;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
        RecordCheckError(1120,RetPUp.Location,i,"Location");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;
    if (MainStockRec.requireLocation!=0) then begin
      tstr = RetPUrw.Location;
      if (blank(tstr)) then begin tstr = RetPUp.Location; end;
      if (blank(tstr)) then begin
        RecordCheckError(1058,tstr,-1,"Location");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;    
    if (check>0) and (true) then begin
    if (nonblank(RetPUrw.ArtCode)) then begin
      if (ReadFirstItem(RetPUrw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1120,RetPUrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;  
    if (RetPUrw.OrdRow<orrwcnt) then begin
      MatRowGet(POr,RetPUrw.OrdRow,POrw);
      if (POrw.ArtCode!=RetPUrw.ArtCode) then begin
        RecordCheckError(20350,RetPUrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
      if (updatemode) then begin //Edit***************************Sasha2,14:47 14.04.2015 {
        if (RetPUp.OKFlag==1 and RetPU2p.OKFlag==1 and (RetPUp.NotForReport!=RetPU2p.NotForReport or RetPUp.Comment!=RetPU2p.Comment)) then begin
        end else begin
          if (POrw.Shipd2<RetPUrw.Quant) then begin
            RecordCheckError(2280," " & RetPUrw.Quant,i,"Quant");      
            res = -1;
            goto LRetPUVcRecordCheck;
          end;
        end;
      end else begin //Edit***************************Sasha2,14:48 14.04.2015 }
        if (POrw.Shipd2<RetPUrw.Quant) then begin
          RecordCheckError(2280," " & RetPUrw.Quant,i,"Quant");      
          res = -1;
          goto LRetPUVcRecordCheck;
        end;
      end;      
    end;
    end;
    if (RetPUrw.PURow>=0) then begin
      if (RetPUrw.PUNr>0) then begin
        PUr.SerNr = RetPUrw.PUNr;
      end else begin
        PUr.SerNr = RetPUp.PUNr;
      end;
      if (ReadFirstMain(PUr,1,true)) then begin
        MatRowGet(PUr,RetPUrw.PURow,PUrw);
        if (RetPUrw.Quant>PUrw.Quant) then begin 
          RecordCheckError(2280," " & RetPUrw.Quant,i,"Quant");      
          res = -1;
          goto LRetPUVcRecordCheck;
        end;
/*        
        if (INr.ItemType==1) then begin
          if (CAb.RetPUCostPriceNotFromPU!=0) then begin
            IHr.FileName = "PUVc";
            IHr.TransNr = PUr.SerNr;
            IHr.Row = RetPUrw.PURow;
            if (ReadFirstKey("FNTransNr",IHr,3,true)==false) then begin end;
            q = PUrw.Quant - AlreadyReturned_RetPUVc(IHr.SerNr);
            if (q<=0) then begin
              RecordCheckError(2280," " & RetPUrw.Quant,i,"Quant");      
              res = -1;
              goto LRetPUVcRecordCheck;
            end;
          end;
        end;
*/
      end;
    end;
    if (nonblank(RetPUrw.ArtCode)) then begin
      if (RetPUrw.Quant==0) then begin
        RecordCheckError(1058,"",i,"Quant");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
    end;  
    if (RetPUrw.Quant<0) then begin
      RecordCheckError(1574,"",i,"Quant");      
      res = -1; 
      goto LRetPUVcRecordCheck;
    end;
/*    
    if (CAb.RetPUCostPriceNotFromPU==0) then begin
      if (RetPUrw.FIFO==0) then begin
        RecordCheckError(1574,"",i,"FIFO");      
        res = -1; 
        goto LRetPUVcRecordCheck;
      end;
    end;

    if (CAb.RetPUCostPriceNotFromPU!=0) then begin
      if (RetPURowInStock(RetPUp,RetPUrw.PURow)==false) then begin
        RecordCheckError(1574,"",i,"FIFO");      
        res = -1; 
        goto LRetPUVcRecordCheck;
      end;
    end;
*/    
    if (transf) then begin
      if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MainStockRec.NoSerOnPU==0)) then begin
        if (blank(RetPUrw.SerialNr)) then begin
          RecordCheckError(1239,"",i,"SerialNr");      
          res = -1;
          goto LRetPUVcRecordCheck;
        end;
        if (SNrb.BulkSerialNos==0) then begin
          if (IsSerialNrCorrect(RetPUrw.SerialNr)==false) then begin
            RecordCheckError(24154,RetPUrw.SerialNr,i,"SerialNr");      
            res = -1; 
            goto LRetPUVcRecordCheck;
          end;        
        end;        
        switch (INr.SerNrf) begin
          case 1:  // serial nr. 
            if (SNrb.BulkSerialNos!=0) then begin
              errcode = ValidateBulkSerialNoRow(SNrb,RetPUp,RetPUrw,i,errstr,j);
              if (errcode) then begin
                RecordCheckError(errcode,"",j,errstr);      
                res = -1;
                goto LRetPUVcRecordCheck;
              end;
            end else begin
              for (j=0;j<i;j=j+1) begin            
                MatRowGet(RetPUp,j,RetPU2rw);
                if ((RetPUrw.ArtCode==RetPU2rw.ArtCode) and
                    (RetPUrw.SerialNr==RetPU2rw.SerialNr)) then begin
                  RecordCheckError(1241,"",i,"SerialNr");      
                  res = -1;
                  goto LRetPUVcRecordCheck;
                end;
              end;
/*
what?          
            if (SerialNrAvail2(RetPUrw.ArtCode,RetPUrw.SerialNr,RetPUrw.Quant)==true) then begin
              RecordCheckError(1241,"",i,"SerialNr");      
              res = -1;
              goto LRetPUVcRecordCheck;
            end;
*/          
              if (RetPUrw.Quant>1) then begin
                RecordCheckError(1242,"",i,"Quant");      
                res = -1;
                goto LRetPUVcRecordCheck;
              end;
              if (SerialNrOnThisRetPU(RetPUp,RetPUrw.ArtCode,RetPUrw.SerialNr)>1) then begin
                RecordCheckError(1242,"",i,"Quant");      
                res = -1;
                goto LRetPUVcRecordCheck;
              end;
            end;
          case 2:  // batch nr. 
        end;
      end;        

      location = RetPUrw.Location;
      if (blank(location)) then begin
        location = RetPUp.Location;
      end;
      if (blank(location)) then begin
        location = MainStockRec.MainStock;
      end;  

      prev = RetPUrw.Quant;
      for (j=0;j<i;j=j+1) begin
        MatRowGet(RetPUp,j,RetPU2rw);
        location2 = RetPU2rw.Location;
        if (blank(location2)) then begin
          location2 = RetPUp.Location;
        end;
        if (blank(location2)) then begin
          location2 = MainStockRec.MainStock;
        end;  
        if (RetPU2rw.ArtCode==RetPUrw.ArtCode) and (location==location2) then begin
          prev = prev + RetPU2rw.Quant;
        end;  
      end;
            
      if (INr.ItemType==1) then begin
        FindStockValue(RetPUrw.ArtCode,location,ISr);
        if ((ISr.Instock<prev) and (prev>0)) then begin
          RecordCheckError(1247,"",i,"Quant");      
          res = -1; 
          goto LRetPUVcRecordCheck;
        end;      
      end;
      switch (INr.SerNrf) begin
        case 1:
          if (SNrb.BulkSerialNos!=0) then begin
            serqty = blankval;
            serialnr = FirstInRange(RetPUrw.SerialNr,30);
            while (nonblank(serialnr)) begin
               if (SerialNrAvail(RetPUrw.ArtCode,serialnr,location,1.00)==false) then begin
                RecordCheckError(1240,"",i,"SerialNr");      
                res = -1; 
                goto LRetPUVcRecordCheck;
              end;
              serqty = serqty + 1;
              serialnr = NextSerialNumber(RetPUrw.ArtCode,serialnr,SNrb);
              if (serqty>=RetPUrw.Quant) then begin serialnr = ""; end;
            end;
          end else begin
            if (SerialNrAvail(RetPUrw.ArtCode,RetPUrw.SerialNr,location,RetPUrw.Quant)==false) then begin
              RecordCheckError(1240,"",i,"SerialNr");      
              res = -1; 
              goto LRetPUVcRecordCheck;
            end;
          end;
        case 2:
          prev = RetPUrw.Quant;
          for (j=0;j<i;j=j+1) begin
            MatRowGet(RetPUp,j,RetPU2rw);
            location2 = RetPU2rw.Location;
            if (blank(location2)) then begin
              location2 = RetPUp.Location;
            end;
            if (blank(location2)) then begin
              location2 = MainStockRec.MainStock;
            end;  
            if (RetPU2rw.ArtCode==RetPUrw.ArtCode) and (RetPU2rw.SerialNr==RetPUrw.SerialNr) and (location==location2) then begin
              prev = prev + RetPU2rw.Quant;
            end;  
          end;
          if (SerialNrAvail(RetPUrw.ArtCode,RetPUrw.SerialNr,location,prev)==false) then begin
            RecordCheckError(1240,"",i,"SerialNr");      
            res = -1; 
            goto LRetPUVcRecordCheck;
          end;
      end;
      if (LocRec.RequirePos!=0) then begin
        if (RetPUrw.Quant>0) and (blank(RetPUrw.PosCode)) then begin
          RecordCheckError(1854,"",i,"PosCode"); 
          res = -1;
          goto LRetPUVcRecordCheck;
        end;
        FindStockValueAtPosition(RetPUrw.ArtCode,location,RetPUrw.PosCode,PISr);
        if (RetPUrw.Quant>PISr.LeftQty) then begin
          RecordCheckError(1397,"",i,"PosCode");      
          res = -1; 
          goto LRetPUVcRecordCheck;
        end;
      end;                      
    end;
  end;  
LDONOTCHECK:;  
  if (check>0) then begin
    if (RetPUp.UpdStockFlag!=0) then begin
      RetPUUpdateFIFO(RetPUp);
    end;
  end;  

  if (transf and RetPUp.UpdStockFlag!=0) then begin
    if (stat==updatemode) then begin
      sernr = RetPU2p.SerNr;
    end;

    if (check>0) then begin
      if (MainStockRec.Chronology!=0) then begin
        if (ExistStockTrans(RetPUp.Location,RetPUp.TransDate,errcode,errstr,"RetPUVc", sernr,MainStockRec)) then begin
          RecordCheckError(errcode,errstr,-1,"TransDate");      
          res = -1;
          goto LRetPUVcRecordCheck;
        end;
      end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1; 
      goto LRetPUVcRecordCheck;
    end;
  end;
  if (transf) then begin
    FillAmForVarianceRetPU(RetPUp);
  end;
LRetPUVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromRetPU(gTRp,RetPUp,false);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==RetPUYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto LRetPUVcRecordCheck;
      end;
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":
          UpdateTrans_Stock(gTRp);          
        otherwise
          SaveTrans(gTRp);
          AddTTrans_RetPUVc(gTRp,RetPUp);
      end;
    end;    
  end;
LRetPUVcRecordCheck:;  
  if (res!=0) then begin
    RetPUp.SerNr = oldnr;
    RetPUp.OfficialSerNr = oldOfficialSerNr;
  end;
  RetPUVcRecordCheck = res;
  RETURN;
END;
