external procedure IVDClassTouchScreenMainSerialNrExecute(LongInt);
external procedure OpenCashDrawer();
external procedure RowCalculateTaxMatrix_IVCashVc(var record IVCashVc,Integer,row IVCashVc);
external function Boolean IVCashDchrsum(record IVCashVc,Integer,Integer);
external procedure IVCashDchsum(record IVCashVc,Integer);
external function Boolean GetPMRow(string,var row PMBlock);
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure IVDchsum(var record IVVc,Integer);
remote procedure NPTSPaymentPasteAmounts_IVVc(var record IVVc,Array string,Array string,Array Integer,Array string,Array val,Array string,Array string,Integer);
remote procedure LoyaltyPointsPayment_IVVc(var record IVVc,val,string);
remote function Integer IVVc_PasteGiftCertificate(var record IVVc,Integer,Integer);
external function Boolean IVVc_PasteQuantity(record IVVc,Integer);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
remote procedure IVSumup(var record IVVc,Boolean);
remote procedure IVVc_PasteLoyaltyCardNr(var record IVVc);
external function Boolean srlRestAccLPrint(var record RestAccVc,string,string);
external procedure RestAccDchsum(record RestAccVc,Integer);
external function Boolean RestAccDchrsum(var record RestAccVc,Integer,Integer);
remote function val GetServiceCharge(var record RestAccVc,record LocalMachineBlock,Boolean);
external procedure FindCCAccountID(string,string,Integer,var record CCAccountIDVc,Integer);
external procedure CancelAndOverrideLogout();
external procedure NPTSSearchItemOnceMore();
remote function Boolean IVCashVc_PasteQuant(var record IVCashVc,Integer);
external procedure SetPOSWindowDisplayAmount(string,val);
remote procedure RestAccVc_PasteLoyaltyCardNr(var record RestAccVc);
remote procedure NPTSPaymentPasteAmounts_RestAccVc(var record RestAccVc,Array string,Array string,Array Integer,Array string,Array val,Array string,Array string,Integer);
remote function Integer TestOpenOnHotelGuestTouchScreenOClass(record RcVc,var string,var string);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
remote procedure RestAccSumup(var record RestAccVc,string);
external procedure RestAccSumupSoftEditFields(Integer,record RestAccVc);
external function Boolean IVCashPrintReceipt(Integer,var record IVCashVc,record IVCashVc,Integer,Boolean,Boolean,Integer,Integer);
external procedure CashPayTouchScreenKeypad();
remote procedure LoyaltyPointsPayment_IVCashVc(var record IVCashVc,val,string);
remote function Integer IVCashVc_PasteGiftCertificate(var record IVCashVc,Integer,Integer);
remote function Integer SCDiscountCardExecuteRemote(var record IVCashVc,record RcVc);
remote function Boolean IVCashVc_PasteQuant(var record IVCashVc,Integer);
external procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
remote function Boolean GetFullCurncyPurchaseRate(var string,Date,var val,var val,var val,var val,var val);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote procedure NPTSPaymentPasteAmounts(var record IVCashVc,Array string,Array string,Array Integer,Array string,Array val,Array string,Array string,Integer);
remote procedure CntNPTSPaymentCurrenciesRemote(string,var Array string,var Array string,var Array Integer,var Array string,var Integer);
external procedure IVCashSumupSoftEditFields(Integer,record IVCashVc);
external procedure SetPOSWindowDisplay(string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
remote procedure IVCashSumup(var record IVCashVc,Boolean);
remote procedure IVCashVc_PasteLoyaltyCardNr(var record IVCashVc);
external function Integer OpenCCPayWindow(string,longint,integer,val,val,val,string,string,
                          integer,integer,
                          integer,string,date,string,string,
                          integer,string,
                          string,string,string,string,string,string,string,string,
                          string,string,string,string,string,string,
                          string,Integer);
remote procedure FindLoyaltyCardRemote(string,var record LoyaltyCardVc,var boolean);
remote procedure IVVc_PasteSerialNr(var record IVVc,Integer,Boolean);


procedure SetPOSWindowDisplay_PaymentRow(string spec,val v)
begin
  string 255 tstr;
  
  if (v<0) then begin
    tstr = USetStr(24193) & "   " & ValToString(-v,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay(spec,tstr);
  end else begin
    tstr = USetStr(24193) & "   " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay("",tstr);
  end;
  return;
end;

/*
procedure 
begin
  record RcVc RepSpec;
  Integer nwn;
  
  nwn = OpenWindow("CCPayDClass",0,mwn,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.long1 = recordnr;
  RepSpec.long2 = rownr;
  RepSpec.vals0 = amount;
  RepSpec.vals3 = taxamount;
  RepSpec.vals4 = freightamount;
  RepSpec.f2 = cardnumber;
  RepSpec.f3 = comment;
  if (blank(RepSpec.f3)) then begin
    RepSpec.f3 = recordnr;
  end;
  RepSpec.f5 = authcode;
  RepSpec.f6 = transid;
  RepSpec.f8 = filename;
  RepSpec.ArtMode = paymentnr;
  RepSpec.flags[0] = txtype;
  RepSpec.flags[1] = lcardholdertype;
  RepSpec.CurncyCode = curncy;
  RepSpec.f9 = carddata;

  if (TouchScreenInterface) then begin
    RepSpec.flags[10] = 1;
  end else begin
    RepSpec.flags[10] = 0;
  end;
  RepSpec.flags[11] = newrowstp;
  RepSpec.f7 = newrowpmcode;
  return;
end;
*/
  
global
updating procedure ProceedCCPayTouchScreenDClass()
begin
  Integer wn,mwn,nwn;
  record RcVc RepSpec;
  record IVVc orgIVr;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc orgIVCashr;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  val from,to1,to2,base1,base2;
  string 255 crncy,transid,cardnumber;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record LocalMachineBlock LMb;
  Integer wnst,txtype;
  record CCAccountIDVc CCAccountIDr;  
  record CCMerchantIDVc CCMerchantIDr;  
  Date blankd;
  integer i,rwcnt;
	roundmode rnd;// Edit ************************** Friday, 15 March 2013 11:35:23
	val invfr,invto1,mto2,mbr1,mbr2;// Edit ************************** Monday, 25 March 2013 17:41:57
	string 20 cur;
	
	rnd = DefaultValRoundoff;
  rnd.decimals = 0;
  rnd.mode = kRoundingModeHalfDown;
	
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
            if (IVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
        end;
        BlockLoad(LMb);
        if(currentcompany==3)then begin
					cur = "AZN";
					if (GetFullCurncyPurchaseRate(cur,CurrentDate,invfr,invto1,mto2,mbr1,mbr2)==false) then begin// Edit ************************** Monday, 25 March 2013 17:43:29
						GetFullCurncyRate(cur,CurrentDate,invfr,invto1,mto2,mbr1,mbr2);// Edit ************************** Monday, 25 March 2013 17:43:28
					end;
					if(invfr==0 or invto1==0)then begin
							invfr = 1; invto1 = 1;
					end;
					rnd.step = kRoundingStep5;
					IVr.Sum4 = round(IVr.Sum4*invfr/invto1,rnd);
				end;
        if (IVr.Sum4<RepSpec.vals0) then begin
          CloseWindow(wn);
          MessageBox(20878,"");
          WindowFieldGoto(wn,IVr,-1,"vals0",true);
          goto LProceedCCPayTouchScreenDClass;
        end;
        if (LMb.CCRequireAuthCode!=0) then begin
          if (blank(RepSpec.f1)) then begin
            MessageBox(1058,"");
            WindowFieldGoto(wn,RepSpec,-1,"f1",true);
            goto LProceedCCPayTouchScreenDClass;
          end;
        end;
        if (IVr.OKFlag!=0) then begin
          IVr.OKFlag = 0;
        end;
        txtype = kCardTransactionPay;
        FindCCAccountID(RepSpec.CurncyCode,LMb.LocalMachineCode,kCCAccountTypePOS,CCAccountIDr,kCardHolderPresent);
        CCMerchantIDr.Code = CCAccountIDr.MerchantID;
        ReadFirstMain(CCMerchantIDr,1,true);
        if (CCMerchantIDr.Partner==kCCPartnerAuthorizeNetCHPresent) then begin
          CloseWindow(wn);
          if (WindowDoOK(mwn,0)) then begin
            ReRunWindowDef(mwn);
            GetWindowRecord(mwn,IVr);
            if (RepSpec.vals0<0) then begin
              txtype = kCardTransactionRefund;
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                if (IVrw.stp==kInvoiceRowTypeCredit) then begin
                  i = rwcnt;
                end;
              end;
              orgIVr.SerNr = IVrw.OrdRow;
              if (ReadFirstMain(orgIVr,1,true)) then begin
                rwcnt = MatRowCnt(orgIVr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(orgIVr,i,IVrw);
                  if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
                    cardnumber = IVrw.CreditCard;
                    transid = IVrw.CCTransID;
                    i = rwcnt;
                  end;
                end;
              end;
            end;

            nwn = OpenCCPayWindow("IVVc",IVr.SerNr,-1,RepSpec.vals0,0,0,RepSpec.CurncyCode,IVr.InvComment,
                          txtype,-1,kCardHolderPresent,cardnumber,blankd,"",transid,
                          kInvoiceRowTypeCreditCardPayment,RepSpec.AccStr,
                          "","","","","","","","",
                          "","","","","","",
                          "",mwn);
          end;
          goto LProceedCCPayTouchScreenDClass;
        end;
    
        ClearRow(IVr,IVrw,kInvoiceRowTypeCreditCardPayment);
        IVrw.stp = kInvoiceRowTypeCreditCardPayment;
        IVrw.Sum = RepSpec.vals0;
        IVrw.PayMode = RepSpec.AccStr;
        IVrw.Spec = RepSpec.f6;
        IVrw.AuthorizationCode = RepSpec.f1;
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,IVr.TransDate,from,to1,to2,base1,base2);
        IVrw.CurncyCode = crncy;
        IVrw.FrRate = from;
        IVrw.ToRateB1 = to1;
        IVrw.ToRateB2 = to2;
        IVrw.BaseRate1 = base1;
        IVrw.BaseRate2 = base2;  
        MatRowPut(IVr,MatRowCnt(IVr),IVrw);
        PutWindowRecord(mwn,IVr);
        WindowFieldGoto(wn,IVr,-1,"touchscreenitem",true);
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
            if (IVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
        end;
        BlockLoad(LMb);
        if (IVCashr.Sum4<RepSpec.vals0) then begin
          CloseWindow(wn);
          MessageBox(20878,"");
          WindowFieldGoto(wn,IVCashr,-1,"vals0",true);
          goto LProceedCCPayTouchScreenDClass;
        end;
        if (LMb.CCRequireAuthCode!=0) then begin
          if (blank(RepSpec.f1)) then begin
            MessageBox(1058,"");
            WindowFieldGoto(wn,RepSpec,-1,"f1",true);
            goto LProceedCCPayTouchScreenDClass;
          end;
        end;
        if (IVCashr.OKFlag!=0) then begin
          IVCashr.OKFlag = 0;
        end;
        txtype = kCardTransactionPay;
        FindCCAccountID(RepSpec.CurncyCode,LMb.LocalMachineCode,kCCAccountTypePOS,CCAccountIDr,kCardHolderPresent);
        CCMerchantIDr.Code = CCAccountIDr.MerchantID;
        ReadFirstMain(CCMerchantIDr,1,true);
        if (CCMerchantIDr.Partner==kCCPartnerAuthorizeNetCHPresent) then begin
          CloseWindow(wn);
          if (WindowDoOK(mwn,0)) then begin
            ReRunWindowDef(mwn);
            GetWindowRecord(mwn,IVCashr);
            if (RepSpec.vals0<0) then begin
              txtype = kCardTransactionRefund;
              rwcnt = MatRowCnt(IVCashr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVCashr,i,IVCashrw);
                if (IVCashrw.stp==kInvoiceRowTypeReturnIVNr) then begin
                  i = rwcnt;
                end;
              end;
              orgIVCashr.SerNr = IVCashrw.OrgIVNr;
              if (ReadFirstMain(orgIVCashr,1,true)) then begin
                rwcnt = MatRowCnt(orgIVCashr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(orgIVCashr,i,IVCashrw);
                  if (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
                    cardnumber = IVCashrw.CreditCard;
                    transid = IVCashrw.CCTransID;
                    i = rwcnt;
                  end;
                end;
              end;
            end;
            nwn = OpenCCPayWindow("IVCashVc",IVCashr.SerNr,-1,RepSpec.vals0,0,0,RepSpec.CurncyCode,IVCashr.InvComment,
                          txtype,-1,kCardHolderPresent,cardnumber,blankd,"",transid,
                          kInvoiceRowTypeCreditCardPayment,RepSpec.AccStr,
                          "","","","","","","","",
                          "","","","","","",
                          "",mwn);
          end;
          goto LProceedCCPayTouchScreenDClass;
        end;
    
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeCreditCardPayment);
        IVCashrw.stp = kInvoiceRowTypeCreditCardPayment;
        IVCashrw.Sum = RepSpec.vals0;
        IVCashrw.PayMode = RepSpec.AccStr;
        IVCashrw.Spec = RepSpec.f6;
        IVCashrw.AuthorizationCode = RepSpec.f1;
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,IVCashr.TransDate,from,to1,to2,base1,base2);
        IVCashrw.CurncyCode = crncy;
        IVCashrw.FrRate = from;
        IVCashrw.ToRateB1 = to1;
        IVCashrw.ToRateB2 = to2;
        IVCashrw.BaseRate1 = base1;
        IVCashrw.BaseRate2 = base2;  
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCCPayTouchScreenDClass;
            end;
        end;
        if (RestAccr.Sum4<RepSpec.vals0) then begin
          CloseWindow(wn);
          MessageBox(20878,"");
          WindowFieldGoto(wn,RestAccr,-1,"vals0",true);
          goto LProceedCCPayTouchScreenDClass;
        end;
        
        ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeCreditCardPayment);
        RestAccrw.stp = kInvoiceRowTypeCreditCardPayment;
        RestAccrw.Sum = RepSpec.vals0;
        RestAccrw.PayMode = RepSpec.AccStr;
        RestAccrw.Spec = RepSpec.f6;
        RestAccrw.AuthorizationCode = RepSpec.f1;
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,RestAccr.TransDate,from,to1,to2,base1,base2);
        RestAccrw.CurncyCode = crncy;
        RestAccrw.FrRate = from;
        RestAccrw.ToRateB1 = to1;
        RestAccrw.ToRateB2 = to2;
        RestAccrw.BaseRate1 = base1;
        RestAccrw.BaseRate2 = base2;  
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          IVDClass_RefreshStringList(mwn,IVr);
          SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetnValue);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
          SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
      end;
      OpenCashDrawer;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedCCPayTouchScreenDClass:;  
  return;
end;

global
updating procedure ProceedChequePayTouchScreenDClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
            if (IVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
        end;
        if (IVr.OKFlag!=0) then begin
          IVr.OKFlag = 0;
        end;
        
        ClearRow(IVr,IVrw,kInvoiceRowTypeChequePayment);
        IVrw.stp = kInvoiceRowTypeChequePayment;
        IVrw.Sum = RepSpec.vals0;
        IVrw.PayMode = RepSpec.AccStr;
        IVrw.Spec = RepSpec.f6;
        IVrw.CheckNr = RepSpec.f1;
        MatRowPut(IVr,MatRowCnt(IVr),IVrw);
        PutWindowRecord(mwn,IVr);
        WindowFieldGoto(wn,IVr,-1,"touchscreenitem",true);
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
            if (IVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
        end;
        if (IVCashr.OKFlag!=0) then begin
          IVCashr.OKFlag = 0;
        end;
        
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeChequePayment);
        IVCashrw.stp = kInvoiceRowTypeChequePayment;
        IVCashrw.Sum = RepSpec.vals0;
        IVCashrw.PayMode = RepSpec.AccStr;
        IVCashrw.Spec = RepSpec.f6;
        IVCashrw.CheckNr = RepSpec.f1;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedChequePayTouchScreenDClass;
            end;
        end;
        ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeChequePayment);
        RestAccrw.stp = kInvoiceRowTypeChequePayment;
        RestAccrw.Sum = RepSpec.vals0;
        RestAccrw.PayMode = RepSpec.AccStr;
        RestAccrw.Spec = RepSpec.f6;
        RestAccrw.CheckNr = RepSpec.f1;
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          IVDClass_RefreshStringList(mwn,IVr);
          SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetValue);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
          SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedChequePayTouchScreenDClass:;  
  return;
end;

global
updating procedure ProceedGiftVoucherTouchScreenDClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record GCSVc GCSr;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean found;
  record DefCashBlock DCb;
  row PMBlock PMrw;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    GCSr.BarCode = RepSpec.f1;
    found = ReadFirstKey("BarCode",GCSr,1,true);
    if (found==false) then begin    
      GCSr.SerNr = StringToLongInt(RepSpec.f1);
      found = ReadFirstMain(GCSr,1,true);
    end;
    if (found==false) then begin    
      MessageBox(2184,"");
      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      goto LProceedGiftVoucherTouchScreenDClass;
    end;
    if (GCSr.ExpiryDate<CurrentDate) then begin 
      MessageBox(2185,"");
      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      goto LProceedGiftVoucherTouchScreenDClass;
    end;
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
            if (IVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
        end;
        BlockLoad(DCb);
        ClearRow(IVr,IVrw,kInvoiceRowTypeGiftVoucherPayment);
        IVrw.stp = kInvoiceRowTypeGiftVoucherPayment;
        IVrw.Sum = RepSpec.vals0;
        if (IVrw.Sum>GCSr.Balance) then begin
          IVrw.Sum = GCSr.Balance;
        end;
        IVrw.VATCode = DCb.DefGCSVATCode;          
        IVrw.PayMode = RepSpec.AccStr;
        if (GetPMRow(IVrw.PayMode,PMrw)) then begin end;
        IVrw.SalesAcc = PMrw.AccNr;
        IVrw.Spec = RepSpec.f6;
        IVrw.GCNr = GCSr.SerNr;
        MatRowPut(IVr,MatRowCnt(IVr),IVrw);
        PutWindowRecord(mwn,IVr);
        WindowFieldGoto(wn,IVr,-1,"touchscreenitem",true);
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
            if (IVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
        end;
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeGiftVoucherPayment);
        IVCashrw.stp = kInvoiceRowTypeGiftVoucherPayment;
        IVCashrw.Sum = RepSpec.vals0;
        if (IVCashrw.Sum>GCSr.Balance) then begin
          IVCashrw.Sum = GCSr.Balance;
        end;
        IVCashrw.PayMode = RepSpec.AccStr;
        IVCashrw.Spec = RepSpec.f6;
        IVCashrw.GCNr = GCSr.SerNr;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherTouchScreenDClass;
            end;
        end;
        ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeGiftVoucherPayment);
        RestAccrw.stp = kInvoiceRowTypeGiftVoucherPayment;
        RestAccrw.Sum = RepSpec.vals0;
        if (RestAccrw.Sum>GCSr.Balance) then begin
          RestAccrw.Sum = GCSr.Balance;
        end;
        RestAccrw.PayMode = RepSpec.AccStr;
        RestAccrw.Spec = RepSpec.f6;
        RestAccrw.GCNr = GCSr.SerNr;
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          IVDClass_RefreshStringList(mwn,IVr);
          SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetValue);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
          SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedGiftVoucherTouchScreenDClass:;  
  return;
end;

global
updating procedure ProceedGiftVoucherSalesTouchScreenDClass()
begin
  Integer wn,mwn,rownr,err,i;
  record RcVc RepSpec;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc curIVCashr;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record GCVc GCr;
  record GCSVc GCSr;
  Boolean found;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    GCr.SerNr = StringToLongInt(RepSpec.f1);
    found = ReadFirstMain(GCr,1,true);
    if (found==false) then begin    
      GCr.BarCode = RepSpec.f1;
      found = ReadFirstKey("BarCode",GCr,1,true);
    end;
    if (found==false) then begin    
      MessageBox(2184,"");
      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      goto LProceedGiftVoucherSalesTouchScreenDClass;
    end;
    GCSr.SerNr = GCr.SerNr;
    if (ReadFirstMain(GCSr,1,true)) then begin
      MessageBox(2186,"");
      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      goto LProceedGiftVoucherSalesTouchScreenDClass;
    end;
    if (GCr.ExpiryDate<CurrentDate) then begin 
      MessageBox(2185,"");
      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      goto LProceedGiftVoucherSalesTouchScreenDClass;
    end;
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
            if (IVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
        end;
        rownr = MatRowCnt(IVr);
        ClearRow(IVr,IVrw,kInvoiceRowTypeGiftVoucherSold);
        IVrw.stp = kInvoiceRowTypeGiftVoucherSold;
        IVrw.GCNr = GCr.SerNr;
        IVrw.PayMode = RepSpec.AccStr;
        MatRowPut(IVr,rownr,IVrw);
        err = IVVc_PasteGiftCertificate(IVr,rownr,kInvoiceRowTypeGiftVoucherSold);
        if (err!=0) then begin
          MessageBox(err,"");
          CloseWindow(wn);
          goto LProceedGiftVoucherSalesTouchScreenDClass;
        end;
        PutWindowRecord(mwn,IVr);
        WindowFieldGoto(wn,IVr,-1,"touchscreenitem",true);
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        curIVCashr = IVCashr;
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
            if (IVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
        end;
        rownr = MatRowCnt(IVCashr);
        for (i=0;i<rownr;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
            if (GCr.SerNr==IVCashrw.GCNr) then begin
              MessageBox(2186,"");
              CloseWindow(wn);
              goto LProceedGiftVoucherSalesTouchScreenDClass;
            end;
          end;
        end;            
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeGiftVoucherSold);
        IVCashrw.stp = kInvoiceRowTypeGiftVoucherSold;
        IVCashrw.GCNr = GCr.SerNr;
        IVCashrw.PayMode = RepSpec.AccStr;
        MatRowPut(IVCashr,rownr,IVCashrw);
        err = IVCashVc_PasteGiftCertificate(IVCashr,rownr,kInvoiceRowTypeGiftVoucherSold);
        if (err!=0) then begin
          MessageBox(err,"");
          CloseWindow(wn);
          goto LProceedGiftVoucherSalesTouchScreenDClass;
        end;
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          IVDClass_RefreshStringList(mwn,IVr);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
      end;
    end else begin
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          IVDClass_RefreshStringList(mwn,IVr);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
      end;
      CloseWindow(wn);
    end;
  end;
LProceedGiftVoucherSalesTouchScreenDClass:;  
  return;
end;

global
updating function Boolean GiftVoucherSalesTouchScreenDClassOnOKWindow(Integer wn)
begin
  boolean res;

  ProceedGiftVoucherSalesTouchScreenDClass;
  GiftVoucherSalesTouchScreenDClassOnOKWindow = res;
  return;
end;

global
updating procedure ProceedCashPayTouchScreenDClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  val from,to1,to2,base1,base2;
  string 255 crncy;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
        if (IVCashr.OKFlag!=0) then begin
          IVCashr.OKFlag = 0;
        end;
        
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeCashPayment);
        IVCashrw.stp = kInvoiceRowTypeCashPayment;
        IVCashrw.Sum = RepSpec.vals0;
        IVCashrw.PayMode = RepSpec.AccStr;
        IVCashrw.Spec = RepSpec.f6;
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,IVCashr.TransDate,from,to1,to2,base1,base2);
        IVCashrw.CurncyCode = crncy;
        IVCashrw.FrRate = from;
        IVCashrw.ToRateB1 = to1;
        IVCashrw.ToRateB2 = to2;
        IVCashrw.BaseRate1 = base1;
        IVCashrw.BaseRate2 = base2;  
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
                
        ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeCreditCardPayment);
        RestAccrw.stp = kInvoiceRowTypeCashPayment;
        RestAccrw.Sum = RepSpec.vals0;
        RestAccrw.PayMode = RepSpec.AccStr;
        RestAccrw.Spec = RepSpec.f6;
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,RestAccr.TransDate,from,to1,to2,base1,base2);
        RestAccrw.CurncyCode = crncy;
        RestAccrw.FrRate = from;
        RestAccrw.ToRateB1 = to1;
        RestAccrw.ToRateB2 = to2;
        RestAccrw.BaseRate1 = base1;
        RestAccrw.BaseRate2 = base2;  
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
      end;
      OpenCashDrawer;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedCashPayTouchScreenDClass:;  
  return;
end;

global
procedure CancelCCPayTouchScreenDClass()
begin
  CloseWindow(CurWindow);
  return;
end;

global
updating procedure ProceedNPTSCashPaymentTClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Array string 255 acrncy;
  Array Boolean achangecrncyf;
  Integer i,acrncnt;
  string 255 crncy;
  val fr,to1,to2,br1,br2,sum4;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        sum4 = IVCashr.Sum4;
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
        if (IVCashr.OKFlag!=0) then begin
          IVCashr.OKFlag = 0;
        end;
        CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
        for (i=0;i<acrncnt;i=i+1) begin
        
          ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeCashPayment);
          IVCashrw.stp = kInvoiceRowTypeCashPayment;
          IVCashrw.Sum = StringToVal(GetWindowString(wn,"NPTSCashPaymentCashReceived" & i),M4Val);
          if (IVCashrw.Sum!=0) then begin
            IVCashrw.PayMode = RepSpec.AccStr;
            IVCashrw.Spec = RepSpec.f6;
            crncy = GetWindowString(wn,"NPTSCashPaymentCurrency" & i);
            if (GetFullCurncyPurchaseRate(crncy,CurrentDate,fr,to1,to2,br1,br2)==false) then begin
              GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
            end;
            IVCashrw.CurncyCode = crncy;
            IVCashrw.FrRate = fr;
            IVCashrw.ToRateB1 = to1;
            IVCashrw.ToRateB2 = to2;
            IVCashrw.BaseRate1 = br1;
            IVCashrw.BaseRate2 = br2;  
            MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
          end;
        end;
        
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",true);
      case "IVVc":
      	// Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 25 June 2013 14:37:32
	CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
      	if(acrncnt>0)then begin
      		if(StringToVal(GetWindowString(wn,"NPTSCashPaymentChangeDue" & 0),M4Val)!=0)then begin
      			messagebox(31002,"");
      			goto LProceedCashPayTouchScreenDClass;
      		end;
      	end;
      	
	// Edit End ---------------------------------------------- Edit End
	
        sum4 = IVr.Sum4;
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
        if (IVr.OKFlag!=0) then begin
          IVr.OKFlag = 0;
        end;
        CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
        for (i=0;i<acrncnt;i=i+1) begin
        
          ClearRow(IVr,IVrw,kInvoiceRowTypeCashPayment);
          IVrw.stp = kInvoiceRowTypeCashPayment;
          IVrw.Sum = StringToVal(GetWindowString(wn,"NPTSCashPaymentCashReceived" & i),M4Val) - StringToVal(GetWindowString(wn,"NPTSCashPaymentChangeGiven" & i),M4Val);// Edit ************************** Tuesday, 9 April 2013 15:11:17
          if (IVrw.Sum!=0) then begin
            IVrw.PayMode = RepSpec.AccStr;
            IVrw.Spec = RepSpec.f6;
            crncy = GetWindowString(wn,"NPTSCashPaymentCurrency" & i);
            if (GetFullCurncyPurchaseRate(crncy,CurrentDate,fr,to1,to2,br1,br2)==false) then begin
              GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
            end;
            IVrw.CurncyCode = crncy;
            IVrw.FrRate = fr;
            IVrw.ToRateB1 = to1;
            IVrw.ToRateB2 = to2;
            IVrw.BaseRate1 = br1;
            IVrw.BaseRate2 = br2;  
            MatRowPut(IVr,MatRowCnt(IVr),IVrw);
          end;
        end;
        PutWindowRecord(mwn,IVr);
        WindowFieldGoto(wn,IVr,-1,"ivcashcommand",true);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;

        CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
        for (i=0;i<acrncnt;i=i+1) begin
        
          ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeCreditCardPayment);
          RestAccrw.stp = kInvoiceRowTypeCashPayment;
          RestAccrw.Sum = StringToVal(GetWindowString(wn,"NPTSCashPaymentCashReceived" & i),M4Val);
          if (RestAccrw.Sum>0) then begin
            RestAccrw.PayMode = RepSpec.AccStr;
            RestAccrw.Spec = RepSpec.f6;
            crncy = GetWindowString(wn,"NPTSCashPaymentCurrency" & i);
            if (GetFullCurncyPurchaseRate(crncy,CurrentDate,fr,to1,to2,br1,br2)==false) then begin
              GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
            end;
            RestAccrw.CurncyCode = crncy;
            RestAccrw.FrRate = fr;
            RestAccrw.ToRateB1 = to1;
            RestAccrw.ToRateB2 = to2;
            RestAccrw.BaseRate1 = br1;
            RestAccrw.BaseRate2 = br2;  
            MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
          end;
        end;        
        RestAccSumup(RestAccr,"");
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          IVDClass_RefreshStringList(mwn,IVr);
          SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetnValue);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
          SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
      end;
      OpenCashDrawer;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedCashPayTouchScreenDClass:;  
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  return;
end;

global
procedure CancelNPTSCashPaymentTClass()
begin
  Integer mwn;
  record RcVc RepSpec;
  
  mwn =  MotherWIndow(CurWindow);
  CloseWindow(CurWindow);
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  return;
end;

global
updating procedure ProceedNPTSPaymentTClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 crncy;
  val fr,to1,to2,br1,br2,sum4;
  val totpaymentv,totcashv;
  Array string 255 acrncy,alabel,apaymentmode;
  Array Integer apaymenttype;
  Array val apaymentv;
  Array string 255 apaymentchecknr;
  Array string 255 apaymentauthcode;
  Integer i,acrncnt,rwcnt;
  record LocalMachineBlock LMb;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  vector val vpaymodeamounts;
  Boolean testf;
  record RestBlock Restb;
  record KitchenOrderVc KOr;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    BlockLoad(LMb);
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        sum4 = IVCashr.Sum4;
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
        if (IVCashr.OKFlag!=0) then begin
          IVCashr.OKFlag = 0;
        end;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
/*          
            case kInvoiceRowTypeLoyaltyPointsPayment:
              MatRowDelete(IVCashr,i);
              rwcnt = MatRowCnt(IVCashr);
              i = 0;
*/              
            case kInvoiceRowTypeCashPayment:
              MatRowDelete(IVCashr,i);
              rwcnt = MatRowCnt(IVCashr);
              i = 0;
/*              
            case kInvoiceRowTypeCreditCardPayment:
              MatRowDelete(IVCashr,i);
              rwcnt = MatRowCnt(IVCashr);
              i = 0;
            case kInvoiceRowTypeChequePayment:
              MatRowDelete(IVCashr,i);
              rwcnt = MatRowCnt(IVCashr);
              i = 0;
            case kInvoiceRowTypeGiftVoucherPayment:
//              MatRowDelete(IVCashr,i);
//              rwcnt = MatRowCnt(IVCashr);
//              i = 0;
*/
          end;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeCreditCardPayment:
              vpaymodeamounts[IVCashrw.PayMode] = vpaymodeamounts[IVCashrw.PayMode] + IVCashrw.Sum; 
          end;
        end;

        CntNPTSPaymentCurrenciesRemote(LMb.LocalMachineCode,alabel,acrncy,apaymenttype,apaymentmode,acrncnt);
        for (i=0;i<acrncnt;i=i+1) begin
          switch (apaymenttype[i]) begin
            case kInvoiceRowTypeChequePayment:
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassChequeAmount" & apaymentmode[i]),M4Val);
              apaymentchecknr[i] = GetWindowString(wn,"NPTSPaymentTClassChequeNr" & apaymentmode[i]);
            case kInvoiceRowTypeCreditCardPayment:
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassAmount" & apaymentmode[i]),M4Val) - vpaymodeamounts[apaymentmode[i]];
              apaymentauthcode[i] = GetWindowString(wn,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i]);
              if (LMb.CCRequireAuthCode!=0) then begin
                if (blank(apaymentauthcode[i])) and (apaymentv[i]>0) then begin
                  MessageBox(1058,"");
                  WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i],true);
                  goto LProceedCashPayTouchScreenDClass;
                end;
              end;
            case kInvoiceRowTypeGiftVoucherPayment:
            otherwise
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassAmount" & apaymentmode[i]),M4Val);
          end;
          switch (apaymenttype[i]) begin
            case kInvoiceRowTypeCashPayment:
              totcashv = totcashv + apaymentv[i];
          end;
          totpaymentv = totpaymentv + apaymentv[i];
        end;
        if (totcashv>=IVCashr.Sum4) then begin
          if (totpaymentv>totcashv) then begin
            MessageBox(20878,"");
            WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAmount" & apaymentmode[0],true);
            goto LProceedCashPayTouchScreenDClass;
          end;
        end;
        NPTSPaymentPasteAmounts(IVCashr,alabel,acrncy,apaymenttype,apaymentmode,apaymentv,apaymentchecknr,apaymentauthcode,acrncnt);
//        IVCashr.OKFlag = 1;
        PutWindowRecord(mwn,IVCashr);
        WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",true);
      case "IVVc":
        sum4 = IVr.Sum4;
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
        if (IVr.OKFlag!=0) then begin
          IVr.OKFlag = 0;
        end;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          switch (IVrw.stp) begin
/*          
            case kInvoiceRowTypeLoyaltyPointsPayment:
              MatRowDelete(IVr,i);
              rwcnt = MatRowCnt(IVr);
              i = 0;
*/              
            case kInvoiceRowTypeCashPayment:
              MatRowDelete(IVr,i);
              rwcnt = MatRowCnt(IVr);
              i = 0;
/*              
            case kInvoiceRowTypeCreditCardPayment:
              MatRowDelete(IVr,i);
              rwcnt = MatRowCnt(IVr);
              i = 0;
            case kInvoiceRowTypeChequePayment:
              MatRowDelete(IVr,i);
              rwcnt = MatRowCnt(IVr);
              i = 0;
            case kInvoiceRowTypeGiftVoucherPayment:
//              MatRowDelete(IVr,i);
//              rwcnt = MatRowCnt(IVr);
//              i = 0;
*/
          end;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          switch (IVrw.stp) begin
            case kInvoiceRowTypeCreditCardPayment:
              vpaymodeamounts[IVrw.PayMode] = vpaymodeamounts[IVrw.PayMode] + IVrw.Sum; 
          end;
        end;

        CntNPTSPaymentCurrenciesRemote(LMb.LocalMachineCode,alabel,acrncy,apaymenttype,apaymentmode,acrncnt);
        for (i=0;i<acrncnt;i=i+1) begin
          switch (apaymenttype[i]) begin
            case kInvoiceRowTypeChequePayment:
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassChequeAmount" & apaymentmode[i]),M4Val);
              apaymentchecknr[i] = GetWindowString(wn,"NPTSPaymentTClassChequeNr" & apaymentmode[i]);
            case kInvoiceRowTypeCreditCardPayment:
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassAmount" & apaymentmode[i]),M4Val) - vpaymodeamounts[apaymentmode[i]];
              apaymentauthcode[i] = GetWindowString(wn,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i]);
              if (LMb.CCRequireAuthCode!=0) then begin
                if (blank(apaymentauthcode[i])) and (apaymentv[i]>0) then begin
                  MessageBox(1058,"");
                  WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i],true);
                  goto LProceedCashPayTouchScreenDClass;
                end;
              end;
            case kInvoiceRowTypeGiftVoucherPayment:
            otherwise
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassAmount" & apaymentmode[i]),M4Val);
          end;
          switch (apaymenttype[i]) begin
            case kInvoiceRowTypeCashPayment:
              totcashv = totcashv + apaymentv[i];
          end;
          totpaymentv = totpaymentv + apaymentv[i];
        end;
        if (totcashv>=IVr.Sum4) then begin
          if (totpaymentv>totcashv) then begin
            MessageBox(20878,"");
            WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAmount" & apaymentmode[0],true);
            goto LProceedCashPayTouchScreenDClass;
          end;
        end;
        NPTSPaymentPasteAmounts_IVVc(IVr,alabel,acrncy,apaymenttype,apaymentmode,apaymentv,apaymentchecknr,apaymentauthcode,acrncnt);
//        IVr.OKFlag = 1;
        PutWindowRecord(mwn,IVr);
        WindowFieldGoto(wn,IVr,-1,"ivcashcommand",true);
      case "RestAccVc":
        BlockLoad(Restb);
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedCashPayTouchScreenDClass;
            end;
        end;
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          switch (RestAccrw.stp) begin
/*          
            case kInvoiceRowTypeLoyaltyPointsPayment:
              MatRowDelete(RestAccr,i);
              rwcnt = MatRowCnt(RestAccr);
              i = 0;
*/              
            case kInvoiceRowTypeCashPayment:
              MatRowDelete(RestAccr,i);
              rwcnt = MatRowCnt(RestAccr);
              i = 0;
/*          
            case kInvoiceRowTypeCreditCardPayment:
              MatRowDelete(RestAccr,i);
              rwcnt = MatRowCnt(RestAccr);
              i = 0;
            case kInvoiceRowTypeChequePayment:
              MatRowDelete(RestAccr,i);
              rwcnt = MatRowCnt(RestAccr);
              i = 0;
            case kInvoiceRowTypeGiftVoucherPayment:
              MatRowDelete(RestAccr,i);
              rwcnt = MatRowCnt(RestAccr);
              i = 0;
*/
          end;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          switch (RestAccrw.stp) begin
            case kInvoiceRowTypeCreditCardPayment:
              vpaymodeamounts[RestAccrw.PayMode] = vpaymodeamounts[RestAccrw.PayMode] + RestAccrw.Sum; 
          end;
        end;

        CntNPTSPaymentCurrenciesRemote(LMb.LocalMachineCode,alabel,acrncy,apaymenttype,apaymentmode,acrncnt);
        for (i=0;i<acrncnt;i=i+1) begin
          switch (apaymenttype[i]) begin
            case kInvoiceRowTypeChequePayment:
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassChequeAmount" & apaymentmode[i]),M4Val);
              apaymentchecknr[i] = GetWindowString(wn,"NPTSPaymentTClassChequeNr" & apaymentmode[i]);
            case kInvoiceRowTypeCreditCardPayment:
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassAmount" & apaymentmode[i]),M4Val) - vpaymodeamounts[apaymentmode[i]];
              apaymentauthcode[i] = GetWindowString(wn,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i]);
              if (LMb.CCRequireAuthCode!=0) then begin
                if (blank(apaymentauthcode[i])) and (apaymentv[i]>0) then begin
                  MessageBox(1058,"");
                  WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i],true);
                  goto LProceedCashPayTouchScreenDClass;
                end;
              end;
            otherwise
              apaymentv[i] = StringToVal(GetWindowString(wn,"NPTSPaymentTClassAmount" & apaymentmode[i]),M4Val);
          end;
          switch (apaymenttype[i]) begin
            case kInvoiceRowTypeCashPayment:
              totcashv = totcashv + apaymentv[i];
          end;
          totpaymentv = totpaymentv + apaymentv[i];
        end;
        if (totcashv>=RestAccr.Sum4) then begin
          if (totpaymentv>totcashv) then begin
            MessageBox(20878,"");
            WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAmount" & apaymentmode[0],true);
            goto LProceedCashPayTouchScreenDClass;
          end;
        end;
        if (RepSpec.vals1>=0) then begin
          if ((totpaymentv-totcashv)>RepSpec.vals1) then begin testf = true; end;
        end else begin
          if ((totpaymentv-totcashv)<RepSpec.vals1) then begin testf = true; end;
        end;        
        if (testf) then begin
          for (i=0;i<acrncnt;i=i+1) begin
            switch (apaymenttype[i]) begin
              case kInvoiceRowTypeCashPayment:
              otherwise
                if (apaymentv[i]>0) then begin
                  MessageBox(24184,"");
                  WindowFieldGoto(wn,RepSpec,-1,"NPTSPaymentTClassAmount" & apaymentmode[i],true);
                  goto LProceedCashPayTouchScreenDClass;
                end;
            end;
          end;
        end;
        NPTSPaymentPasteAmounts_RestAccVc(RestAccr,alabel,acrncy,apaymenttype,apaymentmode,apaymentv,apaymentchecknr,apaymentauthcode,acrncnt);
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "IVVc":
          GetWindowRecord(mwn,IVr);
          SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetnValue);
          IVDClass_RefreshStringList(mwn,IVr);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
          IVCashDClass_RefreshStringList(mwn,IVCashr);
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
          if (Restb.ProceedPaymentPrintKitchenOrder!=0) then begin
            srlRestAccLPrint(RestAccr,"","RestAccKitchenForm");
          end;
          if (Restb.ProceedPaymentPrintReceipt!=0) then begin
            srlRestAccLPrint(RestAccr,"","RestAccForm");
          end;
          if (Restb.ProceedPaymentSaveTab!=0) then begin
            WindowDoNew(mwn,0);
          end;
      end;
      OpenCashDrawer;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedCashPayTouchScreenDClass:;  
  return;
end;

global
updating procedure ProceedOpenOnHotelGuestTouchScreenOClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  string 255 errstr,fieldgoto;
  Integer err;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    err = TestOpenOnHotelGuestTouchScreenOClass(RepSpec,errstr,fieldgoto);
    if (err!=0) then begin
      MessageBox(err," " & errstr);
      WindowFieldGoto(wn,RepSpec,-1,fieldgoto,true);
      goto LProceedOpenOnHotelGuestTouchScreenDClass;
    end;

    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedOpenOnHotelGuestTouchScreenDClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedOpenOnHotelGuestTouchScreenDClass;
            end;
        end;
        RestAccr.Resource = RepSpec.f1;
        RestAccr.GuestCode = RepSpec.f2;
        RestAccr.CUCode = RepSpec.f3;
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedOpenOnHotelGuestTouchScreenDClass:;  
  return;
end;

global
updating procedure ProceedAmendLineNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  row RestAccVc RestAccrw;
  Boolean ivcashcommandf;
  record LocalMachineBlock LMb;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  record GeneralOptionBlock GenOptRec;
  
  ivcashcommandf = true;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
        end;
        BlockLoad(GenOptRec);
        rownr = RepSpec.long1;
        MatRowGet(IVCashr,rownr,IVCashrw);
        IVCashrw.Quant = RepSpec.vals0;
        MatRowPut(IVCashr,rownr,IVCashrw);
        if (IVCashVc_PasteQuant(IVCashr,rownr)) then begin    
        end;
        MatRowGet(IVCashr,rownr,IVCashrw);
//        IVCashrw.Quant = RepSpec.vals0;
        IVCashrw.Price = RepSpec.vals1;
        IVCashrw.vRebate = RepSpec.vals2;
        IVCashrw.Sum = RepSpec.vals3;
        MatRowPut(IVCashr,rownr,IVCashrw);      

        IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount);
        MatRowGet(IVCashr,rownr,IVCashrw);
        RowCalculateTaxMatrix_IVCashVc(IVCashr,rownr,IVCashrw);
        MatRowPut(IVCashr,rownr,IVCashrw);      
        IVCashDchsum(IVCashr,rownr);
        IVCashSumup(IVCashr,true);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        tstr = ValToString(IVCashrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(IVCashrw.ArtCode & " " & IVCashrw.Spec,tstr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        OverrideLogout;
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
        end;
        rownr = RepSpec.long1;
        MatRowGet(IVr,rownr,IVrw);
        IVrw.Quant = RepSpec.vals0;
        IVrw.Price = RepSpec.vals1;
        IVrw.vRebate = RepSpec.vals2;
        IVrw.Sum = RepSpec.vals3;
        MatRowPut(IVr,rownr,IVrw);      
        IVDchrsum(IVr,rownr);
        IVDchsum(IVr,rownr);
        IVSumup(IVr,true);
//        IVSumupSoftEditFields(mwn,IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        tstr = ValToString(IVrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(IVrw.ArtCode & " " & IVrw.Spec,tstr);
        PutWindowString(mwn,"CustomerDisplayData_Line3",Left("sdfg1",40));// Edit ************************** Thursday, 2 May 2013 11:26:59
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        OverrideLogout;
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
        end;
        BlockLoad(LMb);
        rownr = RepSpec.long1;
        MatRowGet(RestAccr,rownr,RestAccrw);
        RestAccrw.Quant = RepSpec.vals0;
        RestAccrw.Price = RepSpec.vals1;
        RestAccrw.vRebate = RepSpec.vals2;
        RestAccrw.Sum = RepSpec.vals3;
        MatRowPut(RestAccr,rownr,RestAccrw);
        RestAccDchrsum(RestAccr,rownr,0);
        RestAccDchsum(RestAccr,rownr);
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,"");
        RestAccSumupSoftEditFields(mwn,RestAccr);
        PutWindowRecord(mwn,RestAccr);
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        tstr = ValToString(RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        OverrideLogout;
        ivcashcommandf = false;
    end;
  end;
LProceedAmendLineNPTSSClass:;  
  if (ivcashcommandf) then begin
    WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  end;
  return;
end;

global
function Boolean SplitItemNPTSSClassClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  SplitItemNPTSSClassClassOnClose = true;
  return;
end;

global
function Boolean LoyaltyPointsBonusNPTSSClassClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  LoyaltyPointsBonusNPTSSClassClassOnClose = true;
  return;
end;


global
function Boolean LoyalCardNPTSSClassClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  LoyalCardNPTSSClassClassOnClose = true;
  return;
end;

global
updating procedure ProceedAmendLineNPTSSClass()
begin  
  ProceedAmendLineNPTSSClassExecute(CurWindow);
  return;
end;

global
function Boolean AmendLineNPTSSClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  AmendLineNPTSSClassOnClose = true;
  return;
end;

global
updating procedure ProceedAddOrderDiscountNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  row RestAccVc RestAccrw;
  Boolean ivcashcommandf;
  record LocalMachineBlock LMb;
  Integer i,rwcnt;
  
  ivcashcommandf = true;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
      /*
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
        end;
        rownr = RepSpec.long1;
        MatRowGet(IVCashr,rownr,IVCashrw);
        IVCashrw.Quant = RepSpec.vals0;
        MatRowPut(IVCashr,rownr,IVCashrw);
        if (IVCashVc_PasteQuant(IVCashr,rownr)) then begin    
        end;
        MatRowGet(IVCashr,rownr,IVCashrw);
//        IVCashrw.Quant = RepSpec.vals0;
        IVCashrw.Price = RepSpec.vals1;
        IVCashrw.vRebate = RepSpec.vals2;
        IVCashrw.Sum = RepSpec.vals3;
        MatRowPut(IVCashr,rownr,IVCashrw);      
        IVCashSumup(IVCashr,true);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        tstr = ValToString(IVCashrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(IVCashrw.ArtCode & " " & IVCashrw.Spec,tstr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        OverrideLogout;
        */
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedAmendLineNPTSSClass;
            end;
        end;
        BlockLoad(LMb);
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          if (RestAccrw.stp==1) and (RestAccrw.ovst==0) then begin
            RestAccrw.vRebate = RepSpec.vals2;        
            MatRowPut(RestAccr,i,RestAccrw);
            RestAccDchrsum(RestAccr,i,0);
            RestAccDchsum(RestAccr,i);
          end;
        end;                
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,"");
        RestAccSumupSoftEditFields(mwn,RestAccr);
        PutWindowRecord(mwn,RestAccr);
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        tstr = ValToString(RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),20-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        OverrideLogout;
        ivcashcommandf = false;
    end;
  end;
LProceedAmendLineNPTSSClass:;  
  if (ivcashcommandf) then begin
    WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  end;
  return;
end;

global
updating procedure ProceedAddOrderDiscountNPTSSClass()
begin  
  ProceedAddOrderDiscountNPTSSClassExecute(CurWindow);
  return;
end;

global
function Boolean AddOrderDiscountNPTSSClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  AddOrderDiscountNPTSSClassOnClose = true;
  return;
end;

global
function Boolean SplitItemNPTSSClassClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  SplitItemNPTSSClassClassOnClose = true;
  return;
end;

global
function Boolean LoyaltyPointsBonusNPTSSClassClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;
  
  LoyaltyPointsBonusNPTSSClassClassOnClose = true;
  return;
end;


global
function Boolean LoyalCardNPTSSClassClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  CancelAndOverrideLogout;  
  LoyalCardNPTSSClassClassOnClose = true;
  return;
end;

global
updating procedure ProceedLoyalCardNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  record IVVc IVr;
  record IVVc prevIVr;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  string 255 tstr,t2;
  record LoyaltyCardVc LoyaltyCardr;
  boolean findf;// Edit ************************** Wednesday, 5 December 2012 13:59:36
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);

        LoyaltyCardr.SerNr = RepSpec.f1;
        if (ReadFirstMain(LoyaltyCardr,1,true)==false) then begin
          MessageBox(26435,"");
          WindowFieldGoto(wn,RepSpec,-1,"f1",false);
          goto LProceedLoyalCardNPTSSClass;
        end;
        if (nonblankdate(LoyaltyCardr.ExpiryDate)) then begin
          if (LoyaltyCardr.ExpiryDate<IVCashr.TransDate) then begin
            MessageBox(26438,"");
            WindowFieldGoto(wn,RepSpec,-1,"f1",false);
            goto LProceedLoyalCardNPTSSClass;
          end;
        end;
        if (LoyaltyCardr.Closed!=0) then begin
          MessageBox(26434,"");
          WindowFieldGoto(wn,RepSpec,-1,"f1",false);
          goto LProceedLoyalCardNPTSSClass;
        end;
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
        end;
        IVCashr.LoyaltyCardNr = RepSpec.f1;
        IVCashVc_PasteLoyaltyCardNr(IVCashr);
        IVCashSumup(IVCashr,true);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
//        WindowDoOK(mwn,0);
        CloseWindow(wn);
        ReRunWindowDef(mwn);
        WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);

        //LoyaltyCardr.SerNr = RepSpec.f1;
        findf = false;
        recordnew(LoyaltyCardr);
        FindLoyaltyCardRemote(RepSpec.f1,LoyaltyCardr,findf);// Edit ************************** Wednesday, 5 December 2012 13:55:24
        if(!findf)then begin// Edit ************************** Wednesday, 5 December 2012 13:55:26
        //if (ReadFirstMain(LoyaltyCardr,1,true)==false) then begin
          MessageBox(26435,"");
          WindowFieldGoto(wn,RepSpec,-1,"f1",false);
          goto LProceedLoyalCardNPTSSClass;
        end;
        if (nonblankdate(LoyaltyCardr.ExpiryDate)) then begin
          if (LoyaltyCardr.ExpiryDate<IVr.TransDate) then begin
            MessageBox(26438,"");
            WindowFieldGoto(wn,RepSpec,-1,"f1",false);
            goto LProceedLoyalCardNPTSSClass;
          end;
        end;
        if (LoyaltyCardr.Closed!=0) then begin
          MessageBox(26434,"");
          WindowFieldGoto(wn,RepSpec,-1,"f1",false);
          goto LProceedLoyalCardNPTSSClass;
        end;
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
        end;
        IVr.LoyaltyCardNr = RepSpec.f1;
        IVVc_PasteLoyaltyCardNr(IVr);
        IVSumup(IVr,true);
//        IVSumupSoftEditFields(mwn,IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
//        WindowDoOK(mwn,0);
        CloseWindow(wn);
        ReRunWindowDef(mwn);
        WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyalCardNPTSSClass;
            end;
        end;
        RestAccr.LoyaltyCardNr = RepSpec.f1;
        RestAccVc_PasteLoyaltyCardNr(RestAccr);
        RestAccSumup(RestAccr,"");
        RestAccSumupSoftEditFields(mwn,RestAccr);
        PutWindowRecord(mwn,RestAccr);
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        ReRunWindowDef(mwn);
    end;
  end;
LProceedLoyalCardNPTSSClass:;  
  return;
end;

global
updating procedure ProceedLoyalCardNPTSSClass()
begin  
  ProceedLoyalCardNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean LoyalCardNPTSSClassOnOKWindow(integer wn)
begin
  ProceedLoyalCardNPTSSClassExecute(wn);
  LoyalCardNPTSSClassOnOKWindow = false;
  return;
end;

global
updating procedure ProceedSerialNoScanNPTSSClassExecute(Integer wn)
begin
  Integer mwn,nwn,rownr;
  record RcVc RepSpec;
  record RcVc newRepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  string 255 tstr,t2;
  record ACPVc ACPr;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSerialNoScanNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSerialNoScanNPTSSClass;
            end;
        end;
        rownr = RepSpec.long1;
        MatRowGet(IVCashr,rownr,IVCashrw);
        IVCashrw.SerialNr = RepSpec.f1;
        MatRowPut(IVCashr,rownr,IVCashrw);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        ReRunWindowDef(mwn);
        PutWindowString(mwn,"ivcashcommandlastitemsernrf","");
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSerialNoScanNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSerialNoScanNPTSSClass;
            end;
        end;
        rownr = RepSpec.long1;
        MatRowGet(IVr,rownr,IVrw);
        IVrw.SerialNr = RepSpec.f1;
        MatRowPut(IVr,rownr,IVrw);
        IVVc_PasteSerialNr(IVr,rownr,true);
        MatRowGet(IVr,rownr,IVrw);
        MatRowPut(IVr,rownr,IVrw);
//        IVSumupSoftEditFields(mwn,IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        ReRunWindowDef(mwn);
        PutWindowString(mwn,"ivcashcommandlastitemsernrf","");
        ACPr.ArtCode = IVrw.ArtCode;
        if (ReadFirstMain(ACPr,1,true)) then begin
          IVDClassTouchScreenMainSerialNrExecute(rownr);
        end;
    end;
  end;
LProceedSerialNoScanNPTSSClass:;  
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  return;
end;

global
updating procedure ProceedSerialNoScanNPTSSClass()
begin  
  ProceedSerialNoScanNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean SerialNoScanNPTSSClassOnOKWindow(integer wn)
begin
  ProceedSerialNoScanNPTSSClassExecute(wn);
  SerialNoScanNPTSSClassOnOKWindow = false;
  return;
end;

global
function Boolean SerialNoScanNPTSSClassOnClose(Integer wn,Integer wn2)
begin
  Integer nwn;
  
  SerialNoScanNPTSSClassOnClose = true;
  return;
end;

global
updating procedure ProceedSCDiscountCardNPTSSClassExecute(Integer wn)
begin
  Integer mwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  string 255 tstr,t2;
  Integer err;
  LongInt printrownr;
  record LocalMachineBlock LMb;
  Integer wnst;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    if (blank(RepSpec.f1)) then begin
      MessageBox(24187,"");
      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      goto LProceedSCDiscountCardNPTSSClassExecute;
    end;
    if (blank(RepSpec.f2)) then begin
      MessageBox(24188,"");
      WindowFieldGoto(wn,RepSpec,-1,"f2",true);
      goto LProceedSCDiscountCardNPTSSClassExecute;
    end;
    if (RepSpec.vals0==0) then begin
      MessageBox(24189,"");
      WindowFieldGoto(wn,RepSpec,-1,"vals0",true);
      goto LProceedSCDiscountCardNPTSSClassExecute;
    end;
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSCDiscountCardNPTSSClassExecute1;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedSCDiscountCardNPTSSClassExecute1;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSCDiscountCardNPTSSClassExecute1;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedSCDiscountCardNPTSSClassExecute1;
            end;
        end;
        err = SCDiscountCardExecuteRemote(IVCashr,RepSpec);
        if (err!=0) then begin
          MessageBox(err,"");
          CloseWindow(wn);
          goto LProceedSCDiscountCardNPTSSClassExecute;
        end;
        wnst = WindowState(mwn);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        if (WindowDoOK(mwn,0)) then begin
          GetWindowRecord(mwn,IVCashr);      
          BlockLoad(LMb);
          if (LMb.IncrementalReceiptPrinting!=0) then begin
            GetPrevWindowRecord(mwn,prevIVCashr);      
            printrownr = StringToLongInt(GetWindowString(mwn,"touchscreenitemlastrownr"));
            if (printrownr>=0) then begin
              if (IVCashPrintReceipt(mwn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
              end;
            end;
          end;
          PutWindowString(mwn,"touchscreenitemlastrownr",MatRowCnt(IVCashr)-1);
        end;
        CloseWindow(wn);
        ReRunWindowDef(mwn);
    end;
  end;
LProceedSCDiscountCardNPTSSClassExecute1:;  
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
LProceedSCDiscountCardNPTSSClassExecute:;  
  return;
end;

global
updating procedure ProceedSCDiscountCardNPTSSClass()
begin  
  ProceedSCDiscountCardNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean ProceedSCDiscountCardNPTSSClassOnOKWindow(integer wn)
begin
  ProceedSCDiscountCardNPTSSClassExecute(wn);
  return;
end;

global
function Boolean SCDiscountCardNPTSSClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "vals0":
      SelectButton(wn,"ProceedSCDiscountCardNPTSSClass");
      res = false;
  end;
  SCDiscountCardNPTSSClassOnEnterKey = res;
  return;
end;

// it is above
global
updating procedure ProceedReturnInvNoNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
        end;
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeReturnIVNr);    
        IVCashrw.OrgIVNr = RepSpec.long1;
        IVCashrw.StandProblemCode = RepSpec.f1;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        
        IVCashSumup(IVCashr,true);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
    end;
  end;
LProceedReturnInvNoNPTSSClass:;  
  WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
  return;
end;

global
updating procedure ProceedReturnInvNoNPTSSClass()
begin  
  ProceedReturnInvNoNPTSSClassExecute(CurWindow);
  return;
end;

global
updating procedure ProceedReturnReasonNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedReturnInvNoNPTSSClass;
            end;
        end;
        IVCashr.InvComment = RepSpec.f2;
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
    end;
  end;
LProceedReturnInvNoNPTSSClass:;  
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  return;
end;

global
updating procedure ProceedReturnReasonNPTSSClass()
begin  
  ProceedReturnReasonNPTSSClassExecute(CurWindow);
  return;
end;

global
updating procedure ProceedLoyaltyPointsBonusNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  row RestAccVc RestAccrw;
  Boolean ivcashcommandf;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  
  ivcashcommandf = true;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
        end;
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeLoyaltyPointsBonus);    
        IVCashrw.Points = RepSpec.vals0;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        
        IVCashSumup(IVCashr,true);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
        end;
        ClearRow(IVr,IVrw,kInvoiceRowTypeLoyaltyPointsBonus);    
        IVrw.Points = RepSpec.vals0;
        MatRowPut(IVr,MatRowCnt(IVr),IVrw);
        
        IVSumup(IVr,true);
//        IVSumupSoftEditFields(mwn,IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPointsBonusNPTSSClass;
            end;
        end;
        ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeLoyaltyPointsBonus);    
        RestAccrw.Points = RepSpec.vals0;
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        
        RestAccSumup(RestAccr,true);
        RestAccSumupSoftEditFields(mwn,RestAccr);
        PutWindowRecord(mwn,RestAccr);
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        ivcashcommandf = false;
    end;
  end;
LProceedLoyaltyPointsBonusNPTSSClass:;  
  if (ivcashcommandf) then begin
    WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  end;
  return;
end;

global
updating procedure ProceedLoyaltyPointsBonusNPTSSClass()
begin  
  ProceedLoyaltyPointsBonusNPTSSClassExecute(CurWindow);
  return;
end;

global
updating procedure ProceedLoyaltyPaymentNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
          case Rs_normal:
            if (IVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
            if (IVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
        end;
        LoyaltyPointsPayment_IVCashVc(IVCashr,RepSpec.vals0,RepSpec.FirstAcc);
        
        IVCashSumup(IVCashr,true);
        IVCashSumupSoftEditFields(mwn,IVCashr);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        SetPOSWindowDisplay_PaymentRow(IVCashrw.Spec,IVCashr.RetValue);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
        OverrideLogout;
      case "IVVc":
      		WindowDoOK(mwn,0);
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
          case Rs_normal:
            if (IVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
            if (IVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
        end;
        LoyaltyPointsPayment_IVVc(IVr,RepSpec.vals0,RepSpec.FirstAcc);
        IVSumup(IVr,true);
        WindowDoOK(mwn,0);// Edit ************************** Tuesday, 26 February 2013 15:28:37
//        IVSumupSoftEditFields(mwn,IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetValue);
        //WindowDoOK(mwn,0);// Edit ************************** Tuesday, 26 February 2013 15:28:38
        CloseWindow(wn);
        OverrideLogout;
    end;
  end;
LProceedLoyaltyPaymentNPTSSClass:;  
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  return;
end;

global
updating procedure ProceedLoyaltyPaymentNPTSSClassExecuteMy(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  
  mwn = wn;
  if (wn!=0) then begin
      		WindowDoOK(mwn,0);
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
          case Rs_normal:
            if (IVr.OKFlag!=0) then begin
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
            if (IVr.Invalid!=0) then begin
              goto LProceedLoyaltyPaymentNPTSSClass;
            end;
        end;
        IVSumup(IVr,true);
        WindowDoOK(mwn,0);// Edit ************************** Tuesday, 26 February 2013 15:28:37
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        SetPOSWindowDisplay_PaymentRow(IVrw.Spec,IVr.RetValue);
        //WindowDoOK(mwn,0);// Edit ************************** Tuesday, 26 February 2013 15:28:38
        OverrideLogout;
  end;
LProceedLoyaltyPaymentNPTSSClass:;  
  WindowFieldGoto(mwn,RepSpec,-1,"ivcashcommand",true);
  return;
end;

global
updating procedure ProceedLoyaltyPaymentNPTSSClass()
begin  
  ProceedLoyaltyPaymentNPTSSClassExecute(CurWindow);
  return;
end;

function Boolean GiftVoucherTouchScreenDClassf1EFAfter(Integer wn,Boolean changedf)
begin
  record GCSVc GCSr;
  record RcVc RepSpec;
  Boolean res,found;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RepSpec);
    GCSr.BarCode = RepSpec.f1;
    found = ReadFirstKey("BarCode",GCSr,1,true);
    if (found==false) then begin    
      GCSr.SerNr = StringToLongInt(RepSpec.f1);
      found = ReadFirstMain(GCSr,1,true);
    end;
    if (found==false) then begin    
//      MessageBox(2184,"");
//      WindowFieldGoto(wn,RepSpec,-1,"f1",true);
      res = false;
      goto LGiftVoucherTouchScreenDClassf1EFAfter;
    end;
    RepSpec.vals0 = GCSr.Balance;
    PutWindowRecord(wn,RepSpec);
  end;
LGiftVoucherTouchScreenDClassf1EFAfter:;  
  GiftVoucherTouchScreenDClassf1EFAfter = res;
  return;
end;

global
function Boolean GiftVoucherTouchScreenDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "f1": res = GiftVoucherTouchScreenDClassf1EFAfter(wn,changed!=0);
  end;
  res = true;
  GiftVoucherTouchScreenDClassAfterEditField = res;
  return;
end;

global
updating procedure ProceedEnterBaggerNPTSOClass()
begin
  Integer wn,mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);

    DeselectWindow(mwn,false);
    GetWindowRecord(mwn,IVCashr);
    switch (WindowState(mwn)) begin
      case Rs_update:
        GetPrevWindowRecord(mwn,prevIVCashr);
        if (prevIVCashr.OKFlag!=0) then begin
          CloseWindow(wn);
          goto LProceedEnterBaggerNPTSOClass;
        end;
        if (prevIVCashr.Invalid!=0) then begin
          CloseWindow(wn);
          goto LProceedEnterBaggerNPTSOClass;
        end;
      case Rs_normal:
        GetWindowRecord(mwn,prevIVCashr);
        if (prevIVCashr.OKFlag!=0) then begin
          CloseWindow(wn);
          goto LProceedEnterBaggerNPTSOClass;
        end;
        if (prevIVCashr.Invalid!=0) then begin
          CloseWindow(wn);
          goto LProceedEnterBaggerNPTSOClass;
        end;
    end;
    IVCashr.Bagger = RepSpec.f1;
    PutWindowRecord(mwn,IVCashr);
  end;
  if (WindowDoOK(mwn,0)) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RepSpec);
    CloseWindow(wn);
    ReRunWindowDef(mwn);
    WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
  end else begin
    CloseWindow(wn);
  end;
LProceedEnterBaggerNPTSOClass:;
  return;
end;

global
updating procedure ProceedEnterSalesmanNPTSOClass()
begin
  Integer wn,mwn,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  record IVVc IVr;
  record IVVc prevIVr;
  record UserVc Userr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);

    DeselectWindow(mwn,false);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
        end;
        Userr.Code = RepSpec.f1;    
        if (ReadFirstMain(Userr,1,true)==false) then begin
          goto LProceedEnterSalesmanNPTSOClass;
        end;
        IVCashr.SalesMan = RepSpec.f1;
        PutWindowRecord(mwn,IVCashr);
      case "IVVc":
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedEnterSalesmanNPTSOClass;
            end;
        end;
        Userr.Code = RepSpec.f1;    
        if (ReadFirstMain(Userr,1,true)==false) then begin
          goto LProceedEnterSalesmanNPTSOClass;
        end;
        IVr.SalesMan = RepSpec.f1;
        PutWindowRecord(mwn,IVr);
    end;
  end;
  if (WindowDoOK(mwn,0)) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RepSpec);
    CloseWindow(wn);
    ReRunWindowDef(mwn);
  end else begin
    CloseWindow(wn);
  end;
LProceedEnterSalesmanNPTSOClass:;
  return;
end;

//shortkeys
global
updating procedure NPTSCashPaymentTClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedNPTSCashPaymentTClass;
    case 2: 
      CancelNPTSCashPaymentTClass;
  end;
  return;
end;

global
updating procedure CCPayTouchScreenDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedCCPayTouchScreenDClass;
    case 2: 
      CancelCCPayTouchScreenDClass;
    case 3: 
      CashPayTouchScreenKeypad;
  end;
  return;
end;

global
updating procedure DCPayTouchScreenDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedCCPayTouchScreenDClass;
    case 2: 
      CancelCCPayTouchScreenDClass;
    case 3: 
      CashPayTouchScreenKeypad;
  end;
  return;
end;

global
updating procedure GiftVoucherTouchScreenDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedGiftVoucherTouchScreenDClass;
    case 2: 
      CancelCCPayTouchScreenDClass;
    case 3: 
      CashPayTouchScreenKeypad;
  end;
  return;
end;

global
updating procedure ChequePayTouchScreenDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedChequePayTouchScreenDClass;
    case 2: 
      CancelCCPayTouchScreenDClass;
    case 3: 
      CashPayTouchScreenKeypad;
  end;
  return;
end;


global
updating procedure LoyalCardNPTSSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedLoyalCardNPTSSClass;
    case 2: 
      CancelAndOverrideLogout;
  end;
  return;
end;

global
updating procedure EnterBaggerNPTSOClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedEnterBaggerNPTSOClass;
    case 2: 
      CancelNPTSCashPaymentTClass;
  end;
  return;
end;

global
updating procedure EnterSalesmanNPTSOClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedEnterSalesmanNPTSOClass;
    case 2: 
      CancelNPTSCashPaymentTClass;
  end;
  return;
end;

global
updating procedure SCDiscountCardNPTSSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedSCDiscountCardNPTSSClass;
    case 2: 
      CancelNPTSCashPaymentTClass;
  end;
  return;
end;

global
updating procedure AmendLineNPTSSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedAmendLineNPTSSClass;
    case 2: 
      CancelAndOverrideLogout;
    case 3: 
      CashPayTouchScreenKeypad;
  end;
  return;
end;

global
updating procedure LoyaltyPaymentNPTSSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedLoyaltyPaymentNPTSSClass;
    case 2: 
      CancelAndOverrideLogout;
  end;
  return;
end;

global
updating procedure NPTSPaymentTClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedNPTSPaymentTClass;
    case 2: 
      CancelNPTSCashPaymentTClass;
  end;
  return;
end;

global
updating procedure INNPTSSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      NPTSSearchItemOnceMore;
    case 2: 
      CancelNPTSCashPaymentTClass;
  end;
  return;
end;

global
procedure SyncClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ToolAction(CurWindow,ToolStopSync,0,false);
      CloseWindow(CurWindow);
    case 2: 
      ToolAction(CurWindow,ToolStopSync,0,false);
      CloseWindow(CurWindow);
  end;
  return;
end;

global
procedure SyncOrExitClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ToolAction(CurWindow,ToolStopSync,0,false);
      CloseWindow(CurWindow);
    case 2: 
      ToolAction(CurWindow,ToolStopSync,0,false);
      CloseWindow(CurWindow);
  end;
  return;
end;
