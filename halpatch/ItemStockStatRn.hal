external procedure ExtractObj(string,var Integer,var string);
external procedure GetBaseCurncy(Integer,var string);

//SetLangMode(LangRussian,"RUS",0);

global function string 200 ParseClassification(string class)
begin
	string 200 res,cl;
	record DIVc DIr;
	integer pos;
	
	if(nonblank(class))then begin
		pos = 0;
		ExtractObj(class,pos,cl);
		DIr.Code = cl;
		if(readfirstmain(DIr,1,true))then begin
			res = DIr.Name;
			outstring(0,0,DIr.Name,false);
		end else begin
			outstring(0,0,"",false);
		end;
	
		ExtractObj(class,pos,cl);
		if(nonblank(cl))then begin
			DIr.Code = cl;
			if(readfirstmain(DIr,1,true))then begin
				if(nonblank(DIr.Code))then begin
					res = res & "," & DIr.Name;
				end;
				if(currentcompany>3)then begin
					outstring(0,0,DIr.Name,false);
				end;
			end else begin
				if(currentcompany>3)then begin
					outstring(0,0,"",false);
				end;
			end;
		end else begin
			if(currentcompany>3)then begin
				outstring(0,0,"",false);
			end;
		end;
	end else begin
		outstring(0,0,"",false);
		if(currentcompany>3)then begin
			outstring(0,0,"",false);
		end;
	end;
	ParseClassification = res;
return;
end;


global procedure ItemStockStatRn(record RcVc RepSpec)
begin
  record ItemStatusVc ISr;
  record PLVc PLr;
  string 100 item,location,findkey,class;
  record INVc INr;
  boolean TrHs,testf,TrHs1,testf1,TrHs2,testf2;
  val price;
  record DIVc DIr;
  integer findint;
  record UserVc User;
  boolean userlocation;
  integer pos;
  string 50 uloc;
  string 200 classfind,model,brand;
	string 20 basecur;
	
	
	GetBaseCurncy(1,basecur);
  
  item = RepSpec.f1;
  location = RepSpec.f2;
  
  
  userlocation = false;
  User.Code = currentuser;
  if(readfirstmain(User,1,true))then begin
  	if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
  		userlocation = true;
  		pos = 0;
			ExtractObj(User.UserLocations,pos,uloc);
			while (nonblank(uloc)) begin
				if(uloc==location)then begin
					userlocation = false;
				end;
				ExtractObj(User.UserLocations,pos,uloc);
			end;
  	end;
  end;
  
  startreportnoheaderjob(USetStr(31247)); //report of the residues on locations 
  
  if(userlocation)then begin
  	startformat(15);
			outstring(50,0,USetStr(31248),false);   //You are not allowed to see report on this location, please choose your location
  	endformat;
  end else begin
		startformat(15);
			outstring(0,0,USetStr(31226),false);
			if(currentcompany>3)then begin
				outstring(0,0,USetStr(31206),false);
			end;
			outstring(0,0,USetStr(31203),false);
			outstring(70,0,USetStr(31204),false);
			outstring(240,0,USetStr(31249),false);
			outstring(-160,0,USetStr(31255),false);
			outstring(-120,0,USetStr(31238),false);
			if(usercanaction("ViewCostPrice",true))then begin
				outstring(-80,0,USetStr(31251) & " " & basecur,false);
			end;
			outstring(1,0,USetStr(31252),true);
			outstring(1,0,USetStr(31253),true);
			outstring(1,0,USetStr(31254),true);
		endformat;
	
		if(nonblank(item))then begin
			ISr.Code = item;
			TrHs = true;
			while(loopmain(ISr,1,TrHs))begin
				testf = true;
				if(ISr.Code!=item)then begin TrHs = false; testf = false; end;
				if(ISr.Location==";;;")then begin testf = false; end;
				if(nonblank(location) and location!=ISr.Location)then begin testf = false; end;
			
				if(testf)then begin
					INr.Code = ISr.Code;
					readfirstmain(INr,1,true);
					startformat(15);
						ParseClassification(INr.DispGroups);
						outstring(0,0,ISr.Code,false);
						outstring(70,0,INr.Name,false);
						outstring(240,0,INr.BarCode,false);
						//DIr.Code = INr.DispGroups;
						//readfirstmain(DIr,1,true);
						//outstring(200,0,Dir.Name,false);
						outstring(-160,0,ISr.Location,false);
						outstring(-120,0,ISr.Instock,false);
						if(usercanaction("ViewCostPrice",true))then begin
							outstring(-80,0,INr.InPrice,false);
						end;
						price = 0;
						PLr.ArtCode = ISr.Code;
						PLr.PLCode = "RRP";
						if(readfirstmain(PLr,2,true))then begin
							if(PLr.ArtCode==ISr.Code and PLr.PLCode=="RRP")then begin
								price = PLr.ExVatPrice;
							end;
						end;
						outstring(1,0,price,true);
						outstring(1,0,INr.Colour,true);
						outstring(1,0,INr.Size,true);
					endformat;
				end;
			end;
		end else begin
		
			INr.DispGroups = RepSpec.f3;
			class = RepSpec.f3;
			TrHs1 = true;
			while(loopkey("MyDispGroups",INr,1,TrHs1))begin
				testf1 = true;
				if(nonblank(RepSpec.f3)) then begin
					if(RepSpec.f3!=left(INr.DispGroups,len(RepSpec.f3)))then begin 
						testf1 = false; TrHs1 = false; 
					end else begin
						if(len(INr.DispGroups)>len(RepSpec.f3))then begin
							if(mid(INr.DispGroups,len(RepSpec.f3),1)!=",")then begin
								testf1 = false; TrHs1 = false;
							end;
						end;
					end;
				end;
				
				if(INr.Terminated!=0)then begin testf1 = false; end;
				if(testf1)then begin
					if(nonblank(RepSpec.f4) or nonblank(RepSpec.f5))then begin
						brand = "";
						model = "";
			
						pos = 0;
						classfind = "";
						ExtractObj(INr.DispGroups,pos,classfind);
						while(nonblank(classfind))begin
							DIr.Code = classfind;
							readfirstmain(DIr,1,true);
							if(DIr.CType=="BRAND")then begin
								brand = DIr.Code;
							end;
							if(DIr.CType=="MODEL")then begin
								model = DIr.Code;
							end;
							ExtractObj(INr.DispGroups,pos,classfind);
						end;
						if(nonblank(RepSpec.f4) and brand!=RepSpec.f4)then begin
							testf1 = false;
						end;
						if(nonblank(RepSpec.f5) and model!=RepSpec.f5)then begin
							testf1 = false;
						end;
					end;
				end;
			
				if(testf1)then begin
					ISr.Code = INr.Code;
					TrHs2 = true;
					while(loopmain(ISr,1,TrHs2))begin
						testf2 = true;
						if(ISr.Code!=INr.Code)then begin testf2 = false; TrHs2 = false; end;
						if(nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2)then begin testf2 = false; end;
						if(ISr.Location==";;;")then begin testf2 = false; end;
						if(ISr.Instock<=0)then begin testf2 = false; end;
					
						if(testf2)then begin
							if(INr.DispGroups!=class)then begin
								class = INr.DispGroups;
								Gray_divider(0,1);
							end;
							startformat(15);
								ParseClassification(INr.DispGroups);
								outstring(0,0,ISr.Code,false);
								outstring(70,0,INr.Name,false);
								outstring(240,0,INr.BarCode,false);
								//outstring(200,0,"",false);
								outstring(-160,0,ISr.Location,false);
								outstring(-120,0,ISr.Instock,false);
								outstring(-80,0,INr.InPrice,false);
								price = 0;
								PLr.ArtCode = ISr.Code;
								PLr.PLCode = "RRP";
								if(readfirstmain(PLr,2,true))then begin
									if(PLr.ArtCode==ISr.Code and PLr.PLCode=="RRP")then begin
										price = PLr.ExVatPrice;
									end;
								end;
								outstring(1,0,price,true);
								outstring(1,0,INr.Colour,true);
								outstring(1,0,INr.Size,true);
							endformat;
						end;
					end;
					resetloop(ISr);
				end;
			end;
			resetloop(INr);
			Gray_Divider(0,1);
		end;
  end;
  endjob;
  
return;
end;


global procedure ItemStockStatRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	record UserVc User;
	integer i;
	string 20 loc;
	
	getwindowrecord(wn,RepSpec);
	User.Code = currentuser;
	if(readfirstmain(User,1,true))then begin
		if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
			i = 0;
			ExtractObj(User.UserLocations,i,loc);
			RepSpec.f2 = loc;
			putwindowrecord(wn,RepSpec);
		end;
	end;
return;
end;




global procedure StockListForPricingRn(record RcVc RepSpec)	//Edit----------------------Dima  22.05.2015
begin
  record ItemStatusVc ISr;
  record PLVc PLr;
  string 100 item,location,findkey,class;
  record INVc INr;
  boolean TrHs,testf,TrHs1,testf1,TrHs2,testf2;
  val price;
  record DIVc DIr;
  integer findint;
  record UserVc User;
  boolean userlocation;
  integer pos;
  string 50 uloc;
  string 200 classfind,model,brand;
	string 20 basecur;
	
	
	GetBaseCurncy(1,basecur);
  
  item = RepSpec.f1;
  location = RepSpec.f2;
  
  
  userlocation = false;
  User.Code = currentuser;
  if(readfirstmain(User,1,true))then begin
  	if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
  		userlocation = true;
  		pos = 0;
			ExtractObj(User.UserLocations,pos,uloc);
			while (nonblank(uloc)) begin
				if(uloc==location)then begin
					userlocation = false;
				end;
				ExtractObj(User.UserLocations,pos,uloc);
			end;
  	end;
  end;
  
  startreportnoheaderjob(USetStr(31247)); //report of the residues on locations 
  
  if(userlocation)then begin
  	startformat(15);
			outstring(50,0,USetStr(31248),false);   //You are not allowed to see report on this location, please choose your location
  	endformat;
  end else begin
		
			INr.DispGroups = RepSpec.f3;
			class = RepSpec.f3;
			TrHs1 = true;
			while(loopkey("MyDispGroups",INr,1,TrHs1)) begin
				testf1 = true;
				if(nonblank(RepSpec.f3)) then begin
					if(RepSpec.f3!=left(INr.DispGroups,len(RepSpec.f3)))then begin 
						testf1 = false; TrHs1 = false; 
					end else begin
						if(len(INr.DispGroups)>len(RepSpec.f3))then begin
							if(mid(INr.DispGroups,len(RepSpec.f3),1)!=",")then begin
								testf1 = false; TrHs1 = false;
							end;
						end;
					end;
				end;
				
				if(INr.Terminated!=0)then begin testf1 = false; end;
				if(testf1)then begin
					if(nonblank(RepSpec.f4) or nonblank(RepSpec.f5))then begin
						brand = "";
						model = "";
			
						pos = 0;
						classfind = "";
						ExtractObj(INr.DispGroups,pos,classfind);
						while(nonblank(classfind)) begin
							DIr.Code = classfind;
							readfirstmain(DIr,1,true);
							if(DIr.CType=="BRAND")then begin
								brand = DIr.Code;
							end;
							if(DIr.CType=="MODEL")then begin
								model = DIr.Code;
							end;
							ExtractObj(INr.DispGroups,pos,classfind);
						end;
						if(nonblank(RepSpec.f4) and brand!=RepSpec.f4)then begin
							testf1 = false;
						end;
						if(nonblank(RepSpec.f5) and model!=RepSpec.f5)then begin
							testf1 = false;
						end;
					end;
				end;
			
				if(testf1)then begin
					ISr.Code = INr.Code;
					TrHs2 = true;
					while(loopmain(ISr,1,TrHs2)) begin
						testf2 = true;
						if(ISr.Code!=INr.Code)then begin testf2 = false; TrHs2 = false; end;
						if(nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2)then begin testf2 = false; end;
						if(ISr.Location==";;;")then begin testf2 = false; end;
						if(ISr.Instock<=0)then begin testf2 = false; end;
					
						if(testf2)then begin
							if(INr.DispGroups!=class)then begin
								class = INr.DispGroups;
								Gray_divider(0,1);
							end;
							startformat(15);
								//ParseClassification(INr.DispGroups);
								outstring(0,0,"RRP",false);
								outstring(90,0,ISr.Code,false);
								outstring(150,0,"",false);
								outstring(200,0,INr.InPrice,false);
							endformat;
						end;
					end;
					resetloop(ISr);
				end;
			end;
			resetloop(INr);
			Gray_Divider(0,1);
		end;

  endjob;
  
return;
end;