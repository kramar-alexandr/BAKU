external function Integer CheckSerialatPositionInItemHist(string,string,string,string,val);
external function Boolean IsDigit(string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external function Integer GetVATLaw();
external function Boolean TestNextOfficialSerialNr_StockMovVc(row LegalInvNrBlock,string,record StockMovVc,Boolean);
external procedure FindNextStockMovVcOfficialSerialNr(var record StockMovVc);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external updating procedure UpdateTrans_Stock(record TRVc);
external function Integer IsUnOKAllowed_StockMovVc(record StockMovVc);
external function Boolean AllowedToTakeFromThisLoc(record LocationVc);
external function Integer CheckStockMovRowFromPosition(record StockMovVc,row StockMovVc,record LocationVc,record INVc,
                                              Integer,Boolean,Boolean);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure UpdateStockResFromStockMov(record StockMovVc);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Integer MakeTransFromStockMov(record TRVc,record StockMovVc,record LocationVc,record LocationVc,Boolean,Integer,record StockMovVc); //Edit***************************Sasha2,18:04 09.04.2015
external updating procedure StockMovUpdateReserved(record StockMovVc,Boolean,Boolean);
external function Boolean StockMovVc_PasteQuant(var record StockMovVc,Integer);
external procedure StockMovSumUp(var record StockMovVc);
external function Boolean StockMovVc_PasteArtCode(var record StockMovVc,Integer,Integer,var array string);
external function string 20 FindFreePositionInLocArea(record INVc,string,record LocationVc,string,string);
external updating procedure UpdatePosition(string,string,string,val,val,val);
external updating function Boolean UpdateForkLiftQueue(record StockMovVc,Boolean);
external updating procedure SetPositionStatus(string,Integer);
external function Integer CheckPosition(string,string,Integer,val,val,val);
external function Integer CheckObjs(string,string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external updating procedure StockMovUpdateCostPrice(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateItemHist(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateStock(record StockMovVc,record StockMovVc,Boolean,Boolean,Boolean);
external procedure StockMovSumUp(var record StockMovVc);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);
external updating function Boolean UpdateIntOrderFromStockMov(record StockMovVc,record StockMovVc,Boolean);
external procedure UpdateStockMovFIFO(var record StockMovVc,record StockMovVc,Integer,var record StockMovVc,integer); //Edit***************************Sasha2,17:47 09.04.2015
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external function Boolean SerialNrAvail(string,string,string,val);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestStockMovVc(LongInt,Date,var Boolean);
external function string 20 GetNextOfficialSerNr(string, date);	//Edit----------------------Dima  01.04.2015
external function Boolean SetInSet2(string,string);

function Integer CheckStockMovRowToPosition(record StockMovVc SMp,row StockMovVc StockMovrw,record LocationVc LocToRec,record INVc INr,
                                            Integer rownr,Boolean disperrf)
BEGIN
  Integer res;
  string 20 topos,topos2;
  record PISVc PISr;
  val w,h,d,m;
  record INVc IN2r;
  row StockMovVc StockMov2rw;
  Integer j,errcode;
  
  topos = StockMovrw.ToPosCode;
  if (blank(topos)) then begin
    topos = SMp.ToPos;
  end;
  if (LocToRec.RequirePos!=0) then begin
    if (blank(topos)) then begin
      if (disperrf) then begin
        RecordCheckError(1854,topos,-1,"ToPos");
      end;
      res = 1854; 
      goto LCheckStockMovRowToPosition;
    end;  
    w = 0;
    h = 0;
    d = 0;
    m = StockMovrw.Quant/INr.QtyonPallet;
    if (INr.PalletWidth!=0) then begin w = w + INr.PalletWidth*m; end;
    if (INr.PalletHeight!=0) then begin h = h + INr.PalletHeight*m; end;
    if (INr.PalletDepth!=0) then begin d = d + INr.PalletDepth*m; end;
    for (j=0;j<rownr;j=j+1) begin
      MatRowGet(SMp,j,StockMov2rw);
      topos2 = StockMov2rw.ToPosCode;
      if (blank(topos2)) then begin
        topos2 = SMp.ToPos;
      end;
      if (topos==topos2) then begin
        if (ReadFirstItem(StockMov2rw.ArtCode,IN2r,true,true)) then begin
          m = 0;
          if (IN2r.QtyonPallet>0) then begin
            m = StockMov2rw.Quant/IN2r.QtyonPallet;
          end;              
          if (IN2r.PalletWidth!=0) then begin
            w = w + IN2r.PalletWidth*m;
          end;
          if (IN2r.PalletHeight!=0) then begin
            h = h + IN2r.PalletHeight*m;
          end;
          if (IN2r.PalletDepth!=0) then begin
            d = d + IN2r.PalletDepth*m;
          end;
        end;
      end;
    end;    
    errcode = CheckPosition(topos,LocToRec.Code,LocToRec.RequirePos,w,h,d);      
    if (errcode!=0) then begin
      if (disperrf) then begin
        if (nonblank(StockMovrw.ToPosCode)) then begin
          RecordCheckError(errcode,topos,rownr,"ToPosCode");
        end else begin
          RecordCheckError(errcode,topos,-1,"ToPos");
        end;
      end;
      res = errcode; 
      goto LCheckStockMovRowToPosition;
    end;    
  end;
LCheckStockMovRowToPosition:;
  CheckStockMovRowToPosition = res;
  RETURN;
END;

function Integer ValidateBulkSerialNoRow(record SerNrTrackBlock SNrb,record StockMovVc SMr,row StockMovVc StockMovrw,Integer currow,Boolean sentquantf,var string gotofield,var Integer gotorow)
begin
  Integer res;
  Integer j,rwcnt;
  row StockMovVc StockMov2rw;
  Boolean testf;
  string 255 serialnr;
  string 255 serialnr2;
  val qty,qty2,quant,quant2;

  gotorow = -1;
  gotofield = "";  
  if (sentquantf) then begin
    quant = StockMovrw.SentQuant;
  end else begin
    quant = StockMovrw.Quant;
  end;
  if (quant>1) then begin
    rwcnt = len(StockMovrw.SerialNr);
    for (j=0;j<rwcnt;j=j+1) begin
      if ((IsDigit(Mid(StockMovrw.SerialNr,j,1))==false) and (Mid(StockMovrw.SerialNr,j,1)!=":")) then begin
        res = 20434;
        gotorow = currow;
        gotofield = "SerialNr";
        goto LValidateBulkSerialNoRow;
      end;
    end;
  end;
  rwcnt = MatRowCnt(SMr);
  serialnr = FirstInRange(StockMovrw.SerialNr,30);
  while (nonblank(serialnr)) begin
    for (j=0;j<currow;j=j+1) begin  
      MatRowGet(SMr,j,StockMov2rw);
      if (sentquantf) then begin
        quant2 = StockMov2rw.SentQuant;
      end else begin
        quant2 = StockMov2rw.Quant;
      end;
      if (quant2!=0) then begin
        if (StockMovrw.ArtCode==StockMov2rw.ArtCode) then begin
          qty2 = blankval;
          serialnr2 = FirstInRange(StockMov2rw.SerialNr,30);
          while (nonblank(serialnr2)) begin
            if (serialnr==serialnr2) then begin
              res = 1241;
              gotorow = currow;
              gotofield = "SerialNr";
              goto LValidateBulkSerialNoRow;
            end;
            qty2 = qty2 + 1;
            serialnr2 = NextSerialNumber(StockMov2rw.ArtCode,serialnr2,SNrb);
            if (qty2>=quant2) then begin serialnr2 = ""; end;
          end;
        end;
      end;
    end;
    qty = qty + 1;
    serialnr = NextSerialNumber(StockMovrw.ArtCode,serialnr,SNrb);
    if (qty>=quant) then begin serialnr = ""; end;
  end;
LValidateBulkSerialNoRow:;  
  ValidateBulkSerialNoRow = res;
  return;
end;

function Integer CheckStockMovRow(record StockMovVc SMp,row StockMovVc StockMovrw,record INVc INr,                                  
                                  record MainStockBlock MSb,record SerNrTrackBlock SNrb,Integer rownr,
                                  string frlocation,string tolocation,Boolean sentquantf,Boolean disperrf,LongInt check)
BEGIN
  Integer res;
  record INVc IN2r;
  record ItemStatusVc ISr;
  record PISVc PISr;
  val w,h,d,m;
  val prev,stockreservq;
  row StockMovVc StockMov2rw;
  Integer errcode;
  string 255 objstr,errstr;
  Integer j;
  val quant;
  record LocationVc ToLocr;
  val serqty;
  string 255 serialnr,errofield;
  
  ToLocr.Code = tolocation;
  if (ReadFirstMain(ToLocr,1,true)) then begin
  end;
  if (sentquantf) then begin
    quant = StockMovrw.SentQuant;
  end else begin
    quant = StockMovrw.Quant;
  end;
  if (quant<0) then begin
    if (disperrf) then begin
      if (sentquantf) then begin
        RecordCheckError(1574,"",rownr,"SentQuant");      
      end else begin
        RecordCheckError(1574,"",rownr,"Quant");      
      end;
    end;
    res = 1574; 
    goto LCheckStockMovRow;
  end;
  if (blank(quant)) then begin
    if (disperrf) then begin
      if (sentquantf) then begin
        RecordCheckError(1574,"",rownr,"SentQuant");      
      end else begin
        RecordCheckError(1574,"",rownr,"Quant");      
      end;
    end;
    res = 1058;
    goto LCheckStockMovRow;
  end;    
  if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
    if (ToLocr.Type==1) then begin
      if (CheckSerialStatus(StockMovrw.ArtCode,StockMovrw.SerialNr,errstr)==2) then begin
        if (disperrf) then begin
          RecordCheckError(2210," " & errstr,rownr,"SerialNr");      
        end;
        res = -1;
        goto LCheckStockMovRow;
      end;
    end;
  end;
  if (check!=0) then begin
    if (MSb.dontAllowOvership==1) then begin
      if (SMp.OKFlag==1) or (SMp.SentOKFlag==1) then begin
        if (INr.ItemType==1) then begin        
          prev = 0;
          for (j=0;j<rownr;j=j+1) begin           
            MatRowGet(SMp,j,StockMov2rw);
            if ((StockMovrw.ArtCode==StockMov2rw.ArtCode) and ((StockMovrw.SerialNr==StockMov2rw.SerialNr) and (SNrb.BulkSerialNos==0))) then begin
              if (sentquantf) then begin
                prev = prev + StockMov2rw.SentQuant;
              end else begin
                prev = prev + StockMov2rw.Quant;
              end;
            end;
          end;
//          FindStockValue(StockMovrw.ArtCode,frlocation,ISr);            
          if (SNrb.BulkSerialNos!=0) then begin
            FindStockValueInclStockReserv(-1,StockMovrw.ArtCode,"",frlocation,ISr,stockreservq);
          end else begin
            FindStockValueInclStockReserv(-1,StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,ISr,stockreservq);
          end;
          prev = prev + quant;
          if (ISr.Instock<(prev+stockreservq)) then begin
            if (disperrf) then begin
              if (sentquantf) then begin
                RecordCheckError(1247,"",rownr,"SentQuant");      
              end else begin
                RecordCheckError(1247,"",rownr,"Quant");      
              end;
            end;
            res = 1247;
            goto LCheckStockMovRow;
          end;
        end;
      end;
    end;
  end;  
  if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
    if (quant!=0) then begin
      if (SNrb.BulkSerialNos==0) then begin
        if (IsSerialNrCorrect(StockMovrw.SerialNr)==false) then begin
          if (disperrf) then begin
            RecordCheckError(24154,StockMovrw.SerialNr,rownr,"SerialNr");      
          end;
          res = 1209; 
          goto LCheckStockMovRow;
        end;        
      end;        
      if (blank(StockMovrw.SerialNr)) then begin
         if (disperrf) then begin
           RecordCheckError(1239,"",rownr,"SerialNr");      
         end;
         res = 1239; 
         goto LCheckStockMovRow;
      end;
    end;    
    if (INr.SerNrf==1) then begin
      if (SNrb.BulkSerialNos!=0) then begin
        errcode = ValidateBulkSerialNoRow(SNrb,SMp,StockMovrw,rownr,sentquantf,errofield,j);
        if (errcode) then begin
          RecordCheckError(errcode,"",j,errofield);      
          res = -1;
          goto LCheckStockMovRow;
        end;
      end else begin
        if (StockMovrw.Quant>1) then begin
          if (disperrf) then begin
            RecordCheckError(1242,"",rownr,"SerialNr");      
          end;
          res = 1242; 
          goto LCheckStockMovRow;
        end;
        if (StockMovrw.SentQuant>1) then begin
          if (disperrf) then begin
            RecordCheckError(1242,"",rownr,"SerialNr");      
          end;
          res = 1242; 
          goto LCheckStockMovRow;
        end;
      end;
      if (SNrb.BulkSerialNos!=0) then begin
        serqty = blankval;
        serialnr = FirstInRange(StockMovrw.SerialNr,30);
        while (nonblank(serialnr)) begin
          if (SerialNrAvail(StockMovrw.ArtCode,serialnr,frlocation,1.00)==false) then begin
            if (disperrf) then begin
              RecordCheckError(1240,"",rownr,"SerialNr");      
            end;
            res = 1240; 
            goto LCheckStockMovRow;
          end;
          serqty = serqty + 1;
          serialnr = NextSerialNumber(StockMovrw.ArtCode,serialnr,SNrb);
          if (serqty>=StockMovrw.Quant) then begin serialnr = ""; end;
        end;
      end else begin
        if (quant!=0) then begin
          if (SerialNrAvail(StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,quant)==false) then begin
            if (disperrf) then begin
              RecordCheckError(1240,"",rownr,"SerialNr");      
            end;
            res = 1240; 
            goto LCheckStockMovRow;
          end;
        end;
      end;
      for (j=0;j<rownr;j=j+1) begin
        MatRowGet(SMp,j,StockMov2rw);
         if ((StockMovrw.ArtCode==StockMov2rw.ArtCode) and (StockMovrw.SerialNr==StockMov2rw.SerialNr)) then begin
           if (disperrf) then begin
             RecordCheckError(1240,"",rownr,"SerialNr");      
           end;
           res = 1240; 
           goto LCheckStockMovRow;
         end;
      end;      
    end else begin
      prev = 0;
      for (j=0;j<rownr;j=j+1) begin
        MatRowGet(SMp,j,StockMov2rw);
        if ((StockMovrw.ArtCode==StockMov2rw.ArtCode) and (StockMovrw.SerialNr==StockMov2rw.SerialNr)) then begin
          if (sentquantf) then begin
            prev = prev + StockMov2rw.SentQuant;
          end else begin
            prev = prev + StockMov2rw.Quant;
          end;
        end;
      end;
      prev = prev + quant;
      if (SerialNrAvail(StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,prev)==false) then begin
        if (disperrf) then begin
          RecordCheckError(1240,"",rownr,"SerialNr");      
        end;
        res = 1240; 
        goto LCheckStockMovRow;
      end;
    end;
    if (nonblank(StockMovrw.FrPosCode) and nonblank(StockMovrw.SerialNr)) then begin           
      errcode = CheckSerialatPositionInItemHist(StockMovrw.ArtCode,frlocation,StockMovrw.FrPosCode,StockMovrw.SerialNr,prev);
      if (errcode!=0) then begin 
        if (disperrf) then begin
          RecordCheckError(15057," : " & USetStr(12872) & " " & USetStr(16148) ,rownr,"FrPosCode");
        end;
        res = 15057;
        goto LCheckStockMovRow;
      end; 
    end;
  end;  
LCheckStockMovRow:;  
  CheckStockMovRow = res;
  RETURN;
END;


global
updating function Integer CheckStockMovRecord(var record StockMovVc SMp,record StockMovVc SM2p,LongInt stat,LongInt check,Boolean disperrf)
BEGIN  
  record MainStockBlock MSb;
  record LocationVc LocFrRec;
  record LocationVc LocToRec;
  record LocationVc LocThrouRec;
  record ItemStatusVc ISr;
  record INVc INr;
  row StockMovVc StockMovrw;
  row StockMovVc StockMov2rw;
  record TRVc gTRp;
  Integer res;
  LongInt oldnr,newnr;
  Integer i,rwcnt,j,orwcnt;
  Integer insertmode,updatemode;
  Boolean transreceivef,gentrans,transsendf,testf,test2f,checksendf,checkreceivef;
  val prev,orsrv;
  Integer errcode;
  LongInt sernr;
  string 20 frlocation,tolocation;
  string 255 frpos,topos;
  record POSVc POSr;
  string 255 objstr,errstr,oldOfficialSerNr;
  record OrdSettBlock OrdSettRec;
  Boolean unokf,intorf,shf;
  transaction string 255 gRuniningMaint;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  record SerNrTrackBlock SNrb;
  record IntORVc IntORr;
  row IntORVc IntORrw;
  record SHVc SHr;
  row SHVc SHrw;
  record StockMovVc fifocurSMr; //Edit***************************Sasha2,11:34 18.03.2015
  record UserVc Userr; //Edit***************************Sasha2,12:10 13.06.2016

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = SMp.SerNr;
  oldOfficialSerNr = SMp.OfficialSerNr;
  BlockLoad(MSb);
  BlockLoad(SNrb);
  BlockLoad(OrdSettRec);
  if (stat==updatemode) then begin
    if (SMp.SerNr<=0) and (SM2p.OKFlag==0) then begin
      SMp.SerNr = SM2p.SerNr;
    end;
  end;   
  
  if (SMp.OrdFlag==0 and (SMp.OKFlag!=0 or SMp.SentOKFlag!=0)) then begin //Edit***************************Sasha2,10:47 22.01.2016 {
    RecordCheckError(1854,". \"" & USetStr(15102) & "\"",-1,"OrdFlag");        
    res = -1; 
    goto LCheckStockMovRecord;
  end; //Edit***************************Sasha2,10:47 22.01.2016 }   

  if (SMp.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (SM2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_StockMovVc(SMp);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"TransDate");      
      res = -1; 
    end;
    goto LCheckStockMovRecord;
  end;  
  
  transreceivef = false;
  if (SMp.OKFlag!=0) then begin
    if (stat==insertmode) then begin transreceivef = true; end;
    if (stat==updatemode) then begin
      if (SM2p.OKFlag==0) then begin
        transreceivef = true;
        if (MSb.SetDelDateToCurrent!=0) then begin
          SMp.TransDate = CurrentDate;
        end;
      end;
    end;
  end;
  if (stat==updatemode) then begin
    if ((SM2p.OrdFlag==0) and (SMp.OrdFlag!=0)) then begin
      if (MSb.SetDelDateToCurrent!=0) then begin
        SMp.OrdTransDate = CurrentDate;
      end;
    end;
  end;    
  transsendf = false;
  if (SMp.SentOKFlag!=0) then begin
    if (stat==insertmode) then begin transsendf = true; end;
    if (stat==updatemode) then begin
      if (SM2p.SentOKFlag==0) then begin
        transsendf = true;
        if (MSb.SetDelDateToCurrent!=0) then begin
          SMp.SentTransDate = CurrentDate;
        end;
      end;
    end;
  end;

  if (SMp.OrdFlag!=0) then begin
    if (stat==insertmode) then begin 
      if (nonblank(SMp.ThrouLocation)) then begin
        checksendf = true;
      end else begin
        checkreceivef = true;
      end;
    end;
    if (stat==updatemode) then begin
      if (SM2p.OrdFlag==0) then begin
        if (nonblank(SMp.ThrouLocation)) then begin
          checksendf = true;
        end else begin
          checkreceivef = true;
        end;
      end;
    end;
  end;

  switch (stat) begin
    case Rs_update:
      if (SMp.OKFlag!=0) and (SM2p.OKFlag==0) then begin
        SMp.RegDate = CurrentDate;
        SMp.RegTime = CurrentTime;
      end;
    otherwise
      if (SMp.OKFlag!=0) then begin
        SMp.RegDate = CurrentDate;
        SMp.RegTime = CurrentTime;
      end;
  end;
  if (SMp.IntORNo>0) then begin
    IntORr.SerNr = SMp.IntORNo;
    intorf = ReadFirstMain(IntORr,1,true);
  end;
  if (SMp.TransNr>0) then begin
    switch (SMp.FileName) begin
      case "SHVc":
        SHr.SerNr = SMp.TransNr;
        shf = ReadFirstMain(SHr,1,true);
    end;
  end;
  if nonblank(SMp.SentTransDate) then begin
    if (SMp.OrdTransDate>SMp.SentTransDate) then begin
      if (disperrf) then begin
        RecordCheckError(20094,"",-1,"SentTransDate");      
      end;
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
  if nonblank(SMp.TransDate) then begin
    if (SMp.SentTransDate>SMp.TransDate) then begin
      if (disperrf) then begin
        RecordCheckError(20095,"",-1,"TransDate");      
      end;
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
  if blankdate(SMp.OrdTransDate) then begin
    if (disperrf) then begin
      RecordCheckError(1058,"",-1,"OrdTransDate");      
    end;
    res = -1;
    goto LCheckStockMovRecord;
  end;
  if (transsendf) then begin
    if (disperrf) then begin
      if (Date2Test("StockMovVc",SMp.SentTransDate,"SentTransDate",-1)==false) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;  
      if (DisallowFutureDateCheck(disperrf,SMp.SentTransDate,"SentTransDate",-1)) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end;
  if (transreceivef==false) and nonblankdate(SMp.SentTransDate) then begin
    if (SMp.SerNr==-1) then begin
      SMp.SerNr = NextSerNr("StockMovVc",SMp.SentTransDate,-1,false,"");
    end;
    if (SerNrTestStockMovVc(SMp.SerNr,SMp.SentTransDate,gentrans)==false) then begin
      if (check>0) then begin
      if (disperrf) then begin
        RecordCheckError(1557,"",-1,"SerNr");      
      end;
      res = 1557; 
      goto LCheckStockMovRecord;
    end;
    end;
    if (disperrf) then begin
      if (Date2Test("StockMovVc",SMp.SentTransDate,"SentTransDate",-1)==false) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;  
      if (DisallowFutureDateCheck(disperrf,SMp.SentTransDate,"SentTransDate",-1)) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end else begin
    if (SMp.SerNr<=0) then begin
      SMp.SerNr = NextSerNr("StockMovVc",SMp.OrdTransDate,-1,false,"");
    end;
    if (SerNrTestStockMovVc(SMp.SerNr,SMp.OrdTransDate,gentrans)==false) then begin
      if (check>0) then begin
      if (disperrf) then begin
        RecordCheckError(1557,"",-1,"SerNr");      
      end;
      res = 1557; 
      goto LCheckStockMovRecord;
    end;
    end;
    if (disperrf) then begin
      if (SMp.OKFlag==1) then begin
        if (Date2Test("StockMovVc",SMp.TransDate,"TransDate",-1)==false) then begin
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (DisallowFutureDateCheck(disperrf,SMp.TransDate,"TransDate",-1)) then begin
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;    
    end;
  end;
  if (check==0) then begin
    goto LStockMovVcRecordCheck_GenTrans;
  end;
  frlocation = SMp.FrLocation;
  LocFrRec.Code = frlocation;
  if (ReadFirstMain(LocFrRec,1,true)==false) then begin
    if (disperrf) then begin
      RecordCheckError(1120,SMp.FrLocation,-1,"FrLocation");      
    end;
    res = 1120; 
    goto LCheckStockMovRecord;    
  end;
  if (AllowedToTakeFromThisLoc(LocFrRec)==false) then begin
    if (disperrf) then begin
      RecordCheckError(1768,"",-1,"FrLocation");      
    end;
    res = -1;
    goto LCheckStockMovRecord;
  end;
  tolocation = SMp.ToLocation;
  LocToRec.Code = tolocation;
  if (ReadFirstMain(LocToRec,1,true)==false) then begin
    if (disperrf) then begin
      RecordCheckError(1120,SMp.ToLocation,-1,"ToLocation");
    end;
    res = 1120; 
    goto LCheckStockMovRecord;
  end;
  if (AllowedToTakeFromThisLoc(LocToRec)==false) then begin //Edit***************************Sasha2,10:16 16.02.2016 {
    if (disperrf) then begin
      RecordCheckError(31182,"",-1,"ToLocation");      
    end;
    res = -1;
    goto LCheckStockMovRecord;
  end; //Edit***************************Sasha2,10:17 16.02.2016 }
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true) and SetInSet2("OWNLO",Userr.AccessGroup)) then begin
    if (NonBlank(Userr.Location)) then begin
      if (stat==insertmode) then begin
        if (SMp.OrdFlag!=0 and frlocation!=Userr.Location) then begin
          if (disperrf) then begin
            RecordCheckError(35097,SMp.FrLocation,-1,"FrLocation");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (SMp.OKFlag!=0 and tolocation!=Userr.Location) then begin
          if (disperrf) then begin
            RecordCheckError(35098,SMp.ToLocation,-1,"ToLocation");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
      if (stat==updatemode) then begin
        if (SM2p.OrdFlag==0 and SMp.OrdFlag!=0 and frlocation!=Userr.Location) then begin
          if (disperrf) then begin
            RecordCheckError(35097,SMp.FrLocation,-1,"FrLocation");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (SM2p.OKFlag==0 and SMp.OKFlag!=0 and tolocation!=Userr.Location) then begin
          if (disperrf) then begin
            RecordCheckError(35098,SMp.ToLocation,-1,"ToLocation");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
    end;
  end;
  if (nonblank(SMp.ThrouLocation)) then begin
    if (SMp.FrLocation==SMp.ThrouLocation) then begin
      if (disperrf) then begin
        RecordCheckError(20081,SMp.ThrouLocation,-1,"ThrouLocation");
      end;
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
    if (SMp.ThrouLocation==SMp.ToLocation) then begin
      if (disperrf) then begin
        RecordCheckError(20082,SMp.ThrouLocation,-1,"ThrouLocation");
      end;
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
    if (nonblank(LocToRec.ThrouLocation)) then begin
      if (SMp.ThrouLocation!=LocToRec.ThrouLocation) then begin
        if (disperrf) then begin
          RecordCheckError(22036,SMp.ThrouLocation,-1,"ThrouLocation");
        end;
        res = 22036; 
        goto LCheckStockMovRecord;
      end;
    end;
    LocThrouRec.Code = SMp.ThrouLocation;
    if (ReadFirstMain(LocThrouRec,1,true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(1120,SMp.ThrouLocation,-1,"ThrouLocation");
      end;
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
    if (LocThrouRec.RequirePos!=0) then begin
      if (disperrf) then begin
        RecordCheckError(22037,SMp.ThrouLocation,-1,"ThrouLocation");
      end;
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
  end;
  if (SMp.SentOKFlag==0) and (SMp.OKFlag!=0) then begin
    if (nonblank(SMp.ThrouLocation)) then begin
      if (disperrf) then begin
        RecordCheckError(1084,SMp.ThrouLocation,-1,"ThrouLocation");
      end;
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
  end;
  errcode = CheckRates(SMp.CurncyCode,SMp.FrRate,SMp.ToRateB1,SMp.ToRateB2,SMp.BaseRate1,SMp.BaseRate2,errstr);
  if (errcode!=0) then begin
    if (disperrf) then begin
      RecordCheckError(errcode,"",-1,errstr);      
    end;
    res = -1; 
    goto LCheckStockMovRecord;
  end;          

  BlockLoad(LINrb); 
  /* 				//Commented by--------------------------------------------------------------------Dima  01.04.2015
  if (nonblank(SMp.OfficialSerNr)) then begin
    GetLegalInvNrRow(SMp.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          SMp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (blank(SMp.ThrouLocation)) then begin
          SMp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          SMp.OfficialSerNr = "";
        end;
    end;
  end;
  
  if (blank(SMp.OfficialSerNr)) then begin
    FindNextStockMovVcOfficialSerialNr(SMp);
  end;
  if (transsendf) or (transreceivef) then begin
    if (GetVATLaw==vatPortuguese) then begin
      if (blank(SMp.OfficialSerNr)) then begin
        RecordCheckError(1058,"",-1,"OfficialSerNr");  
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end;
  if (nonblank(SMp.ThrouLocation)) then begin
    if (ValidateOfficialSerialNrChronology("StockMovVc",SMp.OfficialSerNr,SMp.SerNr,SMp.SentTransDate,td)==false) then begin
      RecordCheckError(26201," " & td,-1,"SentTransDate");  
      res = -1;
      goto LCheckStockMovRecord;
    end;  
  end else begin
    if (ValidateOfficialSerialNrChronology("StockMovVc",SMp.OfficialSerNr,SMp.SerNr,SMp.TransDate,td)==false) then begin
      RecordCheckError(26201," " & td,-1,"TransDate");  
      res = -1;
      goto LCheckStockMovRecord;
    end;  
  end;
  if (nonblank(SMp.OfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(SMp.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_StockMovVc(LINrbrw,"",SMp,false);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      RecordCheckError(errcode," " & SMp.OfficialSerNr,-1,"OfficialSerNr");      
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
 */ //Commented by--------------------------------------------------------------------Dima  01.04.2015
  rwcnt = MatRowCnt(SMp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMp,i,StockMovrw);    
    if (StockMovrw.OrdQuant!=0) then begin
      if (StockMovrw.OrdQuant < StockMovrw.SentQuant) then begin
        if (disperrf) then begin
          RecordCheckError(20083,"",0,"SentQuant");
        end;
        res = 20083; 
        goto LCheckStockMovRecord;
      end;
      if blank(StockMovrw.SentQuant) then begin
        if (StockMovrw.OrdQuant < StockMovrw.Quant) then begin
          if (disperrf) then begin
            RecordCheckError(20085,"",0,"Quant");
          end;
          res = 20085; 
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (StockMovrw.SentQuant!=0) then begin
      if (StockMovrw.SentQuant < StockMovrw.Quant) then begin
        if (disperrf) then begin
          RecordCheckError(20084,"",0,"Quant");
        end;
        res = 20084; 
        goto LCheckStockMovRecord;
      end;
    end;  
    
    if (StockMovrw.SentQuant!=0) then begin
      if (SMp.SentOKFlag==0) and (SMp.OKFlag!=0) then begin
        if (disperrf) then begin
          RecordCheckError(1084,"",i,"SentQuant");    
        end;
        res = 1084;
        goto LCheckStockMovRecord;
      end;
    end;
    if (StockMovrw.NewPrice<0) then begin
      if (disperrf) then begin
        RecordCheckError(1058,"",i,"NewPrice");    
      end;
      res = 1058;
      goto LCheckStockMovRecord;
    end;
    if (StockMovrw.SentNewPrice<0) then begin
      if (disperrf) then begin
        RecordCheckError(1058,"",i,"SentNewPrice");    
      end;
      res = 1058;
      goto LCheckStockMovRecord;
    end;
    if (intorf) then begin
      if (StockMovrw.IntORRow>=0) then begin
        prev = blankval;
        if (stat==Rs_update) then begin
          orwcnt = MatRowCnt(SM2p);
          for (j=0;j<orwcnt;j=j+1) begin
            MatRowGet(SM2p,j,StockMov2rw);
            if (StockMov2rw.IntORRow>=0) and (StockMov2rw.IntORRow==StockMovrw.IntORRow) then begin
              if (StockMovrw.SentQuant!=0) then begin
                prev = prev + StockMov2rw.SentQuant;
              end else begin
                prev = prev + StockMov2rw.Quant;
              end;
            end;
          end;
        end;
        MatRowGet(IntORr,StockMovrw.IntORRow,IntORrw);
        if (StockMovrw.SentQuant!=0) then begin
          if ((IntORrw.Shipd1+StockMovrw.SentQuant-prev)>IntORrw.Quant) then begin
            if (disperrf) then begin
              RecordCheckError(1733,"",i,"SentQuant");      
            end;
            res = 1733; 
            goto LCheckStockMovRecord;
          end;
        end else begin
          if ((IntORrw.Shipd1+StockMovrw.Quant-prev)>IntORrw.Quant) then begin
            if (disperrf) then begin
              RecordCheckError(1733,"",i,"Quant");      
            end;
            res = 1733; 
            goto LCheckStockMovRecord;
          end;
        end;
      end;
    end;

    if (shf) then begin
      if (StockMovrw.SHRow>=0) then begin
        MatRowGet(SHr,StockMovrw.SHRow,SHrw);
        if (StockMovrw.Quant!=SHrw.Ship) then begin
          if (disperrf) then begin
            RecordCheckError(1302,"",i,"Quant");      
          end;
          res = 1733; 
          goto LCheckStockMovRecord;
        end;
      end;
    end;    
    if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
      end;
      res = 1233; 
      goto LCheckStockMovRecord;
    end;
    objstr = SMp.Objects;
    if (nonblank(objstr)) then begin
      objstr = objstr & ",";
    end;
    objstr = objstr & StockMovrw.Objects;
    errcode = CheckObjs("",objstr,errstr);
    if (errcode!=0) then begin
      if (disperrf) then begin
        RecordCheckError(errcode,errstr,i,"Objects");    
      end;
      res = errcode;
      goto LCheckStockMovRecord;
    end;
    if (INr.ItemType==2) then begin
      if (disperrf) then begin
        RecordCheckError(1826,"",i,"ArtCode");      
      end;
      res = 1826; 
      goto LCheckStockMovRecord;
    end;
    if (SMp.Reserved!=0) then begin
      if (OrdSettRec.dontAllowOverreserving!=0) then begin
        FindStockValue(StockMovrw.ArtCode,SMp.FrLocation,ISr);
        orsrv = 0;
        if (stat==updatemode) then begin        
          if (RecordValid(SM2p)) then begin
            if (SM2p.Reserved!=0) then begin
              for (j=0;j<MatRowCnt(SM2p);j=j+1) begin
                MatRowGet(SM2p,j,StockMov2rw);
                if (StockMov2rw.ArtCode==StockMovrw.ArtCode) then begin
                  orsrv = orsrv + StockMov2rw.OrdQuant;
                end;
              end;
            end;
          end;
        end;
        if ((StockMovrw.OrdQuant)>(ISr.Instock-ISr.RsrvQty+orsrv)) then begin // StockRsrvQty ?
          if (disperrf) then begin
            RecordCheckError(20011,"",i,"OrdQuant");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (SMp.SentOKFlag!=0) then begin
      if (blank(StockMovrw.SentQuant)) then begin
        if (disperrf) then begin
          RecordCheckError(1058,"",i,"SentQuant");      
        end;
        res = 1826; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (transsendf or checksendf) then begin
      errcode = CheckStockMovRow(SMp,StockMovrw,INr,MSb,SNrb,i,SMp.FrLocation,SMp.ThrouLocation,true,disperrf,check);
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;        
    end else begin
      if (transreceivef or checkreceivef) then begin
        if (blank(SMp.ThrouLocation)) then begin
          errcode = CheckStockMovRow(SMp,StockMovrw,INr,MSb,SNrb,i,SMp.FrLocation,SMp.ToLocation,false,disperrf,check);
        end else begin
          errcode = CheckStockMovRow(SMp,StockMovrw,INr,MSb,SNrb,i,SMp.ThrouLocation,SMp.ToLocation,false,disperrf,check);
        end;
        if (errcode!=0) then begin 
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end else begin
        if (blank(SMp.ThrouLocation)) then begin
          if (StockMovrw.SentQuant>0) then begin
            if (disperrf) then begin
              RecordCheckError(1058,"",-1,"ThrouLocation");      
            end;
            res = 1058;
            goto LCheckStockMovRecord;
          end;
        end;
      end;
    end;
    frpos = StockMovrw.FrPosCode;
    if (blank(frpos)) then begin
      frpos = SMp.FrPos;
    end;
    if (nonblank(frpos)) then begin
      Posr.Code = frpos;
      if (ReadFirstMain(Posr,1,true)==false) then begin
        if (disperrf) then begin
          RecordCheckError(1734," " & frpos,-1,"FrPos");
        end;
        res = 1734; 
        goto LCheckStockMovRecord;
      end;
      Posr.Code = frpos;
      Posr.Location = LocFrRec.Code;
      if (ReadFirstKey("Location",Posr,2,true)==false) then begin
        if (disperrf) then begin
          RecordCheckError(1748," " & frpos,-1,"FrPos");
        end;
        res = 1748; 
        goto LCheckStockMovRecord;
      end;
    end;
    topos = StockMovrw.ToPosCode;
    if (blank(topos)) then begin
      topos = SMp.ToPos;
    end;
    if (frpos==topos) and ((nonblank(frpos)) or (nonblank(topos))) then begin
      if (frlocation==tolocation) then begin
        if (disperrf) then begin
          if (blank(frpos)) then begin
            RecordCheckError(1769,"",-1,"FrLocation");
          end else begin
            RecordCheckError(1797," " & topos,-1,"ToPos");
          end;
        end;
        res = 1734; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (nonblank(topos)) then begin
      Posr.Code = topos;
      if (ReadFirstMain(Posr,1,true)==false) then begin
        if (disperrf) then begin
          RecordCheckError(1734," " & topos,-1,"ToPos");
        end;
        res = 1734; 
        goto LCheckStockMovRecord;
      end;
      Posr.Code = topos;
      Posr.Location = LocToRec.Code;
      if (ReadFirstKey("Location",Posr,2,true)==false) then begin
        if (disperrf) then begin
          RecordCheckError(1748," " & topos,-1,"ToPos");
        end;
        res = 1748; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (transsendf) then begin
      errcode = CheckStockMovRowFromPosition(SMp,StockMovrw,LocFrRec,INr,i,true,disperrf);
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end else begin
      if (transreceivef) then begin
        errcode = CheckStockMovRowFromPosition(SMp,StockMovrw,LocFrRec,INr,i,false,disperrf);
        if (errcode!=0) then begin 
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (transreceivef) then begin
/*
already checked few lines above
      if (nonblank(SMp.ThrouLocation)) then begin
        errcode = CheckStockMovRow(SMp,StockMovrw,INr,MainWHMRec,MSb,i,SMp.ThrouLocation,SMp.ToLocation,true,disperrf,check);
        if (errcode!=0) then begin 
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
*/      
      errcode = CheckStockMovRowToPosition(SMp,StockMovrw,LocToRec,INr,i,disperrf);
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (SMp.SentCoin>0) then begin //Edit-------------------Vitalii 10:58 03.08.2016 {
      if (Blank(StockMovrw.BarCode)) then begin
        RecordCheckError(1854,"",i,"BarCode");      
        res = -1;
        goto LCheckStockMovRecord;
      end;
      if (len(StockMovrw.BarCode)!=13) then begin
        RecordCheckError(20414,"",i,"BarCode");      
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (SMp.SentCoin>0) then begin
    if (Blank(SMp.TransBillCoin)) then begin
      RecordCheckError(1854,"",-1,"TransBillCoin");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
    if (len(SMp.TransBillCoin)!=9) then begin
      RecordCheckError(20414,"",-1,"TransBillCoin");      
      res = -1;
      goto LRetPUVcRecordCheck;
    end;
  end; //Edit-------------------Vitalii 10:58 03.08.2016 }
  end;
  
  if (check!=0 and stat==updatemode) then begin
    UpdateStockMovFIFO(SMp,SM2p,stat,fifocurSMr,2); //Edit***************************Sasha2,17:46 09.04.2015   1 - IVVc, 2 - StockMovVc
  end;  
  if (transsendf) then begin
    if (UserCanAction("SentStockMovOK",true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(1274,StringFromStringSet(3,"SentStockMovOK"),-1,"SerNr");      
      end;
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (check>0) then begin
      if (MSb.Chronology!=0) then begin
        if (ExistStockTrans(frlocation,SMp.SentTransDate,errcode,errstr,"StockMovVc",sernr,MSb)) then begin
           if (disperrf) then begin
             RecordCheckError(errcode,errstr,-1,"SentTransDate");      
           end;
           res = errcode; 
           goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      if (disperrf) then begin
        RecordCheckError(errcode,"",-1,"SerNr");      
      end;
      res = -1; 
      goto LCheckStockMovRecord;
    end;
  end;
  if (transreceivef) then begin
    if (UserCanAction("StockMovOK",true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(1274,StringFromStringSet(3,"StockMovOK"),-1,"SerNr");      
      end;
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (stat==updatemode) then begin sernr = SM2p.SerNr; end;
    if (check>0) then begin
    if (MSb.Chronology!=0) then begin
      if (ExistStockTrans(frlocation,SMp.TransDate,errcode,errstr,"StockMovVc",sernr,MSb)) then begin
         if (disperrf) then begin
           RecordCheckError(errcode,errstr,-1,"TransDate");      
         end;
         res = errcode; 
         goto LCheckStockMovRecord;
      end;
      if (ExistStockTrans(tolocation,SMp.TransDate,errcode,errstr,"StockMovVc", sernr,MSb)) then begin
         if (disperrf) then begin
           RecordCheckError(errcode,errstr,-1,"TransDate");      
         end;
         res = errcode; 
         goto LCheckStockMovRecord;
      end;
      if (nonblank(SMp.ThrouLocation)) then begin
        if (ExistStockTrans(SMp.ThrouLocation,SMp.TransDate,errcode,errstr,"StockMovVc",sernr,MSb)) then begin
           if (disperrf) then begin
             RecordCheckError(errcode,errstr,-1,"TransDate");      
           end;
           res = errcode; 
           goto LCheckStockMovRecord;
        end;      
      end;
    end;
    end;
  end;
LStockMovVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transsendf = false; end;
  if (gentrans==false) then begin transreceivef = false; end;
  if (transsendf) then begin
    errcode = MakeTransFromStockMov(gTRp,SMp,LocFrRec,LocThrouRec,false,SentSTMovYc,fifocurSMr); //Edit***************************Sasha2,18:03 09.04.2015
    if (errcode!=0) then begin
      if (disperrf) then begin
        RecordCheckError(errcode,"",-1,"SerNr");      
      end;
      res = errcode; 
      goto LCheckStockMovRecord;
    end;
    if (disperrf) then begin
      if ((gTRp.Number>0) and (gTRp.IntYc==SentSTMovYc)) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          if (disperrf) then begin
            RecordCheckError(1085,errstr,-1,"SerNr");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (MatRowCnt(gTRp)>0) then begin
          switch (gRuniningMaint) begin    
            case "RecalcStockMn":
              UpdateTrans_Stock(gTRp);          
            otherwise
              SaveTrans(gTRp);
          end;
        end;
      end;
    end;
  end;
  if (transreceivef) then begin
    if (blank(SMp.ThrouLocation)) then begin
      if (SMp.SentOKFlag!=0) then begin
        errcode = MakeTransFromStockMov(gTRp,SMp,LocThrouRec,LocToRec,false,STMovYc,fifocurSMr); //Edit***************************Sasha2,18:42 09.04.2015
      end else begin
        errcode = MakeTransFromStockMov(gTRp,SMp,LocFrRec,LocToRec,false,STMovYc,fifocurSMr); //Edit***************************Sasha2,18:42 09.04.2015
      end;
    end else begin
      errcode = MakeTransFromStockMov(gTRp,SMp,LocThrouRec,LocToRec,false,STMovYc,fifocurSMr); //Edit***************************Sasha2,18:42 09.04.2015
    end;
    if (errcode!=0) then begin
      if (disperrf) then begin
        RecordCheckError(errcode,"",-1,"SerNr");      
      end;
      res = errcode; 
      goto LCheckStockMovRecord;
    end;

    if (disperrf) then begin
      if ((gTRp.Number>0) and (gTRp.IntYc==STMovYc)) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          if (disperrf) then begin
            RecordCheckError(1085,errstr,-1,"SerNr");      
          end;
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (MatRowCnt(gTRp)>0) then begin
          switch (gRuniningMaint) begin    
            case "RecalcStockMn":
              UpdateTrans_Stock(gTRp);          
            otherwise
              SaveTrans(gTRp);
          end;
        end;

      end;
    end;
  end;
LCheckStockMovRecord:;  
  CheckStockMovRecord = res;
  RETURN;
END;
  
global
updating function LongInt StockMovVcRecordCheck(var record StockMovVc SMp,record StockMovVc SM2p,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  LongInt oldnr,newnr;
  string 255 oldOfficialSerNr;

  res = 0;
  oldnr = SMp.SerNr;
  oldOfficialSerNr = SMp.OfficialSerNr;
  // Edit Start ---------------------------------------------- Edit Start
	//Monday, 11 February 2013 13:15:37
	
  /*if(usercanaction("SaveSMOtherDate",false)==false)then begin
  		if(SM2p.OrdFlag==0 and SMp.OrdFlag==1)then begin
  			SMp.OrdTransDate = currentdate;
  		end;
  		if(SM2p.OKFlag==0 and SMp.OKFlag==1)then begin
  			SMp.TransDate = currentdate;
  		end;
  end;*/
  		
	// Edit End ---------------------------------------------- Edit End
  
  if (CheckStockMovRecord(SMp,SM2p,stat,check,true)!=0) then begin
    res = -1;
    goto LStockMovVcRecordCheck;
  end;
LStockMovVcRecordCheck:;
  if (res!=0) then begin 
    SMp.SerNr = oldnr; 
    SMp.OfficialSerNr = oldOfficialSerNr;
  end;
  StockMovVcRecordCheck = res;
  RETURN;
END;

procedure AddToStockMovRow(row StockMovVc StockMovrw,row StockMovVc fromprodStockMovrw)
BEGIN    
  StockMovrw.ArtCode = fromprodStockMovrw.ArtCode;
  StockMovrw.Quant = fromprodStockMovrw.Quant;
  StockMovrw.Spec = fromprodStockMovrw.Spec;
  StockMovrw.SerialNr = fromprodStockMovrw.SerialNr;
  StockMovrw.OldPrice = fromprodStockMovrw.OldPrice;
  StockMovrw.ExtraSCost = blankval;
  StockMovrw.NewPrice = fromprodStockMovrw.OldPrice;
  StockMovrw.BasePrice = fromprodStockMovrw.BasePrice;
  StockMovrw.Coefficient = fromprodStockMovrw.Coefficient;
  StockMovrw.UnitXval = fromprodStockMovrw.UnitXval;
  StockMovrw.UnitYval = fromprodStockMovrw.UnitYval;
  StockMovrw.UnitZval = fromprodStockMovrw.UnitZval;
  StockMovrw.FrPosCode = fromprodStockMovrw.ToPosCode;
  RETURN;
END;

procedure AddPalletItemToStockMov(record StockMovVc StockMovr,string palletitem,var Integer smrwcnt,
                                  string frposcode,string toposcode)
BEGIN
  row StockMovVc palletsmrw;
  array string 255 aWarning;
  
  if (nonblank(palletitem)) then begin
    ClearRow(StockMovr,palletsmrw,1);
    palletsmrw.ArtCode = palletitem;
    palletsmrw.Quant = 1;
    palletsmrw.FrPosCode = frposcode;
    palletsmrw.ToPosCode = toposcode;
    MatRowPut(StockMovr,smrwcnt,palletsmrw);
    if (StockMovVc_PasteArtCode(StockMovr,smrwcnt,1,aWarning)) then begin
      smrwcnt = smrwcnt + 1;
    end;
  end;
  RETURN;
END;

procedure NewStockMovement(var record StockMovVc StockMovr,record StockMovVc fromprodStockMovr)
BEGIN
  RecordNew(StockMovr);
  StockMovr.FrLocation = fromprodStockMovr.ToLocation;
  StockMovr.ToLocation = fromprodStockMovr.ToLocation;
  StockMovr.ToForkLiftQue = 0;
  StockMovr.TransNr = fromprodStockMovr.SerNr;
  StockMovr.FileName = "StockMovVc";
  StockMovr.TransDate = CurrentDate;
  StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");
  RETURN;
END;

function Boolean IsItemOutOnProd(record ProdVc Prodr,string ArtCode)
BEGIN
  Boolean res;
  row ProdVc Prodrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(Prodr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodr,i,Prodrw);
    if (Prodrw.Item==ArtCode) then begin
      if (Prodrw.OutQty!=0) then begin
        res = true;
        i = rwcnt;
      end;
    end;
  end;
  IsItemOutOnProd = res;
  RETURN;
END;

global
updating procedure StockMovCreateStockMovement(record StockMovVc fromprodStockMovr)
BEGIN
  record StockMovVc lfromprodStockMovr;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  row StockMovVc fromprodStockMovrw;
  row StockMovVc newStockMovrw;
  Integer i,rwcnt,smrwcnt,oldrwcnt,orgrwcnt,lasti,j;
  record MainStockBlock MainRec;
  string 20 frposcode,toposcode,lastpalletitem;
  record INVc INr;
  record LocationVc LocRec;
  Boolean storesmf;  
  record ProdVc Prodr;
  
  if (fromprodStockMovr.ProdSerNr<=0) then begin goto LStockMovCreateStockMovement; end;
  if (fromprodStockMovr.OKFlag==0) then begin goto LStockMovCreateStockMovement; end;
  
  BlockLoad(MainRec);  
  LocRec.Code = fromprodStockMovr.ToLocation;
  if (ReadFirstMain(LocRec,1,true)==false) then begin goto LStockMovCreateStockMovement; end;  
  if (LocRec.RequirePos==0) then begin goto LStockMovCreateStockMovement; end;  
  
  Prodr.SerNr = fromprodStockMovr.ProdSerNr;
  if (ReadFirstMain(Prodr,1,true)) then begin end; 
  
  RecordCopy(lfromprodStockMovr,fromprodStockMovr);
  rwcnt = MatRowCnt(lfromprodStockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(lfromprodStockMovr,i,fromprodStockMovrw);
    if (IsItemOutOnProd(Prodr,fromprodStockMovrw.ArtCode)==false) then begin
      MatRowDelete(lfromprodStockMovr,i);
      rwcnt = rwcnt - 1;
      i = i - 1; 
    end;
  end;  
  
  lfromprodStockMovr.FrLocation = fromprodStockMovr.ToLocation;
  
  orgrwcnt = MatRowCnt(lfromprodStockMovr);
  if (orgrwcnt>0) then begin//only one item out on prod
    if (StockMovVc_PasteQuant(lfromprodStockMovr,0)) then begin    
    end;
  end;
  
//  rwcnt = orgrwcnt;
//  for (i=0;i<rwcnt;i=i+1) begin
//    if (StockMovVc_PasteQuant(lfromprodStockMovr,i)) then begin    
//      rwcnt = MatRowCnt(lfromprodStockMovr);
//      if (oldrwcnt!=rwcnt) then begin
//        i = rwcnt - orgrwcnt + 1;
//        oldrwcnt = rwcnt;
//      end else begin
//        i = rwcnt;
//      end;
//    end;
//  end;
  
  NewStockMovement(StockMovr,lfromprodStockMovr);
  if (StockMovr.SerNr<=0) then begin goto LStockMovCreateStockMovement; end;

  rwcnt = MatRowCnt(lfromprodStockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(lfromprodStockMovr,i,fromprodStockMovrw);
    storesmf = false;
    ClearRow(StockMovr,StockMovrw,1);
    AddToStockMovRow(StockMovrw,fromprodStockMovrw);
    if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin end;
    if (blank(INr.DefPalletItem)) and (INr.Code!=lastpalletitem) then begin
      storesmf = true;
      StockMovr.ToForkLiftQue = 100;//items without pallet don't goto automatic delivery que
    end;
    frposcode = lfromprodStockMovr.ToPos;
    if (blank(frposcode)) then begin
      frposcode = fromprodStockMovrw.ToPosCode;
    end;
    StockMovrw.FrPosCode = frposcode;
    if (INr.Code!=lastpalletitem) then begin
      if (blank(toposcode)) then begin
        toposcode = FindFreePositionInLocArea(INr,INr.LocArea,LocRec,StockMovrw.FrPosCode,LocRec.WHMDefPUPosCode);
      end;
    end;
    StockMovrw.ToPosCode = toposcode;
    MatRowPut(StockMovr,smrwcnt,StockMovrw);
    SetPositionStatus(toposcode,2);    
    
    lastpalletitem = INr.DefPalletItem;
    smrwcnt = smrwcnt + 1;

    if (nonblank(INr.DefPalletItem)) then begin
//      AddPalletItemToStockMov(StockMovr,INr.DefPalletItem,smrwcnt,StockMovrw.FrPosCode,StockMovrw.ToPosCode);
    end;    
    if ((Mod(smrwcnt,2)==0) or (storesmf)) then begin
      if (MatRowCnt(StockMovr)>0) then begin
        StockMovSumUp(StockMovr);    
        if (RecordStore(StockMovr,false)) then begin
        end;
      end;
      NewStockMovement(StockMovr,lfromprodStockMovr);
      if (StockMovr.SerNr<=0) then begin goto LStockMovCreateStockMovement; end;
      smrwcnt = 0;
      toposcode = "";
      lastpalletitem = "";
    end;
LSkipRowStockMovCreateStockMovement:;    
  end;
  if (MatRowCnt(StockMovr)>0) then begin
    StockMovSumUp(StockMovr);    
    if (RecordStore(StockMovr,false)) then begin
    end;
  end;  
  
//  smrwcnt = MatRowCnt(fromprodStockMovr);
//  rwcnt = MatRowCnt(lfromprodStockMovr);
//  for (i=0;i<rwcnt;i=i+1) begin
//    MatRowGet(lfromprodStockMovr,i,fromprodStockMovrw);
//    if (ReadFirstItem(fromprodStockMovrw.ArtCode,INr,true,true)) then begin
//      if (nonblank(INr.DefPalletItem)) then begin
//        for (j=lasti;j<rwcnt;j=j+1) begin
//          MatRowGet(lfromprodStockMovr,j,StockMovrw);
//          if (StockMovrw.ArtCode==INr.DefPalletItem) then begin
//            MatRowPut(fromprodStockMovr,smrwcnt,StockMovrw);
//            smrwcnt = smrwcnt + 1;
//            j = rwcnt;
//            lasti = i;
//          end;
//        end;
//      end;
//    end;    
//  end;  
LStockMovCreateStockMovement:;  
  RETURN;
END;

global
updating procedure StockMovSetPositionStatus(record StockMovVc StockMovr,Integer status)
BEGIN
  Integer i,rwcnt;
  row StockMovVc StockMovrw;
  string 60 toposcode;
  Boolean testf;
  record LocationVc Locr;

  Locr.Code = StockMovr.ToLocation;
  ReadFirstMain(Locr,1,true);

  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    testf = true;
    toposcode = StockMovrw.ToPosCode;
    if (blank(toposcode)) then begin
      toposcode = StockMovr.ToPos;
    end;
    if (blank(toposcode)) then begin testf = false; end;
    if (toposcode==Locr.WHMDefPUPosCode) then begin testf = false; end;
    if (toposcode==Locr.WHMDefProdPosCode) then begin testf = false; end;
    if (toposcode==Locr.WHMDeliveryPosCode) then begin testf = false; end;
    if (toposcode==Locr.WHMWraperPosCode) then begin testf = false; end;
    if (testf) then begin
      SetPositionStatus(toposcode,status);
    end;
  end;
  RETURN;
END;

global
updating procedure UpdateInStockMovFromStockMov(record StockMovVc StockMovr,Boolean negf)
BEGIN
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  string 50 frpos,topos;
  val blv,t;
  Boolean testf;
  record LocationVc Locr;

  Locr.Code = StockMovr.ToLocation;
  ReadFirstMain(Locr,1,true);
  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    frpos = StockMovrw.FrPosCode;
    if (blank(frpos)) then begin
      frpos = StockMovr.FrPos;
    end;
    topos = StockMovrw.ToPosCode;
    if (blank(topos)) then begin
      topos = StockMovr.ToPos;
    end;
    testf = true;
    if (frpos==Locr.WHMDefPUPosCode) then begin testf = false; end;
    if (frpos==Locr.WHMDefProdPosCode) then begin testf = false; end;
    if (frpos==Locr.WHMWraperPosCode) then begin testf = false; end;
    if (frpos==Locr.WHMDeliveryPosCode) then begin testf = false; end;
    if (frpos==topos) then begin testf = false; end;
    if (testf) then begin
      if (nonblank(StockMovr.ThrouLocation)) then begin
        if (negf) then begin
          t = -StockMovrw.SentQuant;
        end else begin
          t = StockMovrw.SentQuant;
        end;
      end else begin
        if (negf) then begin
          t = -StockMovrw.Quant;
        end else begin
          t = StockMovrw.Quant;
        end;
      end;
      UpdatePosition(StockMovrw.ArtCode,StockMovr.FrLocation,frpos,blv,blv,t);
    end;
  end;
LUpdateInStockMovFromStockMov:;  
  RETURN;
END;

global
function LongInt StockMovVcRecordProtectFields(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  StockMov2r.Prntdf = StockMovr.Prntdf;
  StockMovVcRecordProtectFields = res;
  return;
end;

global updating function integer CreateBackStockMov(record StockMovVc SMr, var record StockMovVc newSMr)
begin
	integer res;
	
	res = -1;
	
	newSMr.FrLocation = SMr.ToLocation;
	newSMr.ToLocation = SMr.FrLocation;
	newSMr.OrdFlag = 0;
	newSMr.OKFlag = 0;
	
	newSMr.SerNr = NextSerNr("StockMovVc",Currentdate,-1,false,""); 
	if(recordinsert(newSMr,true))then begin
		CreateRecordLink(newSMr,CurrentCompany,SMr,CurrentCompany);  
		CreateRecordLink(SMr,CurrentCompany,newSMr,CurrentCompany);  
		res = 0;
	end;

return;
end;




global		//Edit----------------------Dima  01.04.2015
updating function LongInt StockMovVcRecordSave(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = inner.StockMovVcRecordSave(StockMovr,StockMov2r,stat,long4);
	if (CurrentCompany==10)	then begin //Dupont
		StockMovr.OfficialSerNr = GetNextOfficialSerNr("StockMovVc",StockMovr.TransDate);
	end;	  

  StockMovVcRecordSave = res;
  RETURN;
END;

